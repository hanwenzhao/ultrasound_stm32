
ultrasound.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f38  0800f060  0800f060  0001f060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f98  08010f98  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08010f98  08010f98  00020f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010fa0  08010fa0  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010fa0  08010fa0  00020fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010fa4  08010fa4  00020fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08010fa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068a0  20000078  08011020  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006918  08011020  00036918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f252  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005bab  00000000  00000000  0005f2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a0  00000000  00000000  00064ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  00066148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f758  00000000  00000000  00067230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001faa4  00000000  00000000  00096988  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f8cf0  00000000  00000000  000b642c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001af11c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e4c  00000000  00000000  001af198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f048 	.word	0x0800f048

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800f048 	.word	0x0800f048

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f92d 	bl	8000824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f806 	bl	80005dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005d0:	f00d fa0c 	bl	800d9ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x54>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_InitTick+0x58>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f939 	bl	8000872 <HAL_SYSTICK_Config>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e00e      	b.n	8000628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d80a      	bhi.n	8000626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000610:	2200      	movs	r2, #0
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	f000 f90f 	bl	800083a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_InitTick+0x5c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000010 	.word	0x20000010
 8000634:	20000004 	.word	0x20000004
 8000638:	20000000 	.word	0x20000000

0800063c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x20>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_IncTick+0x24>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <HAL_IncTick+0x24>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000004 	.word	0x20000004
 8000660:	20000214 	.word	0x20000214

08000664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <HAL_GetTick+0x14>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000214 	.word	0x20000214

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000684:	f7ff ffee 	bl	8000664 <HAL_GetTick>
 8000688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_Delay+0x40>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a2:	bf00      	nop
 80006a4:	f7ff ffde 	bl	8000664 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
  {
  }
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000004 	.word	0x20000004

080006c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <__NVIC_SetPriorityGrouping+0x40>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	4313      	orrs	r3, r2
 80006ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <__NVIC_SetPriorityGrouping+0x40>)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	60d3      	str	r3, [r2, #12]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00
 8000704:	05fa0000 	.word	0x05fa0000

08000708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <__NVIC_GetPriorityGrouping+0x18>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	f003 0307 	and.w	r3, r3, #7
}
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0a      	blt.n	800074e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	490c      	ldr	r1, [pc, #48]	; (8000770 <__NVIC_SetPriority+0x4c>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	0112      	lsls	r2, r2, #4
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	440b      	add	r3, r1
 8000748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800074c:	e00a      	b.n	8000764 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4908      	ldr	r1, [pc, #32]	; (8000774 <__NVIC_SetPriority+0x50>)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	3b04      	subs	r3, #4
 800075c:	0112      	lsls	r2, r2, #4
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	440b      	add	r3, r1
 8000762:	761a      	strb	r2, [r3, #24]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000e100 	.word	0xe000e100
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f1c3 0307 	rsb	r3, r3, #7
 8000792:	2b04      	cmp	r3, #4
 8000794:	bf28      	it	cs
 8000796:	2304      	movcs	r3, #4
 8000798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3304      	adds	r3, #4
 800079e:	2b06      	cmp	r3, #6
 80007a0:	d902      	bls.n	80007a8 <NVIC_EncodePriority+0x30>
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3b03      	subs	r3, #3
 80007a6:	e000      	b.n	80007aa <NVIC_EncodePriority+0x32>
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	f04f 32ff 	mov.w	r2, #4294967295
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43da      	mvns	r2, r3
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	401a      	ands	r2, r3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43d9      	mvns	r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	4313      	orrs	r3, r2
         );
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3724      	adds	r7, #36	; 0x24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f0:	d301      	bcc.n	80007f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00f      	b.n	8000816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <SysTick_Config+0x40>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007fe:	210f      	movs	r1, #15
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f7ff ff8e 	bl	8000724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <SysTick_Config+0x40>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <SysTick_Config+0x40>)
 8000810:	2207      	movs	r2, #7
 8000812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	e000e010 	.word	0xe000e010

08000824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff47 	bl	80006c0 <__NVIC_SetPriorityGrouping>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800084c:	f7ff ff5c 	bl	8000708 <__NVIC_GetPriorityGrouping>
 8000850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	6978      	ldr	r0, [r7, #20]
 8000858:	f7ff ff8e 	bl	8000778 <NVIC_EncodePriority>
 800085c:	4602      	mov	r2, r0
 800085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5d 	bl	8000724 <__NVIC_SetPriority>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffb0 	bl	80007e0 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800089c:	4ba9      	ldr	r3, [pc, #676]	; (8000b44 <HAL_ETH_Init+0x2b8>)
 800089e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d101      	bne.n	80008b2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e183      	b.n	8000bba <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d106      	bne.n	80008cc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f00c fab4 	bl	800ce34 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008cc:	4b9e      	ldr	r3, [pc, #632]	; (8000b48 <HAL_ETH_Init+0x2bc>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d0:	4a9d      	ldr	r2, [pc, #628]	; (8000b48 <HAL_ETH_Init+0x2bc>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d6:	6453      	str	r3, [r2, #68]	; 0x44
 80008d8:	4b9b      	ldr	r3, [pc, #620]	; (8000b48 <HAL_ETH_Init+0x2bc>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008e4:	4b99      	ldr	r3, [pc, #612]	; (8000b4c <HAL_ETH_Init+0x2c0>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	4a98      	ldr	r2, [pc, #608]	; (8000b4c <HAL_ETH_Init+0x2c0>)
 80008ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80008ee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008f0:	4b96      	ldr	r3, [pc, #600]	; (8000b4c <HAL_ETH_Init+0x2c0>)
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	4994      	ldr	r1, [pc, #592]	; (8000b4c <HAL_ETH_Init+0x2c0>)
 80008fa:	4313      	orrs	r3, r2
 80008fc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f042 0201 	orr.w	r2, r2, #1
 8000910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000914:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000916:	f7ff fea5 	bl	8000664 <HAL_GetTick>
 800091a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800091c:	e011      	b.n	8000942 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800091e:	f7ff fea1 	bl	8000664 <HAL_GetTick>
 8000922:	4602      	mov	r2, r0
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800092c:	d909      	bls.n	8000942 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2203      	movs	r2, #3
 8000932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800093e:	2303      	movs	r3, #3
 8000940:	e13b      	b.n	8000bba <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1e4      	bne.n	800091e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f023 031c 	bic.w	r3, r3, #28
 8000962:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000964:	f001 fd5a 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8000968:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	4a78      	ldr	r2, [pc, #480]	; (8000b50 <HAL_ETH_Init+0x2c4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d908      	bls.n	8000984 <HAL_ETH_Init+0xf8>
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	4a77      	ldr	r2, [pc, #476]	; (8000b54 <HAL_ETH_Init+0x2c8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d804      	bhi.n	8000984 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	61fb      	str	r3, [r7, #28]
 8000982:	e027      	b.n	80009d4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	4a73      	ldr	r2, [pc, #460]	; (8000b54 <HAL_ETH_Init+0x2c8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d908      	bls.n	800099e <HAL_ETH_Init+0x112>
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	4a72      	ldr	r2, [pc, #456]	; (8000b58 <HAL_ETH_Init+0x2cc>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d804      	bhi.n	800099e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f043 030c 	orr.w	r3, r3, #12
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	e01a      	b.n	80009d4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	4a6d      	ldr	r2, [pc, #436]	; (8000b58 <HAL_ETH_Init+0x2cc>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d903      	bls.n	80009ae <HAL_ETH_Init+0x122>
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	4a6c      	ldr	r2, [pc, #432]	; (8000b5c <HAL_ETH_Init+0x2d0>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d911      	bls.n	80009d2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ETH_Init+0x2d0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d908      	bls.n	80009c8 <HAL_ETH_Init+0x13c>
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	4a69      	ldr	r2, [pc, #420]	; (8000b60 <HAL_ETH_Init+0x2d4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d804      	bhi.n	80009c8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	e005      	b.n	80009d4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	61fb      	str	r3, [r7, #28]
 80009d0:	e000      	b.n	80009d4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80009d2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	69fa      	ldr	r2, [r7, #28]
 80009da:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009e0:	2100      	movs	r1, #0
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 fb9a 	bl	800111c <HAL_ETH_WritePHYRegister>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00b      	beq.n	8000a06 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80009f2:	6939      	ldr	r1, [r7, #16]
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 fc27 	bl	8001248 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e0d9      	b.n	8000bba <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	f7ff fe38 	bl	800067c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 80a7 	beq.w	8000b64 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a16:	f7ff fe25 	bl	8000664 <HAL_GetTick>
 8000a1a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	461a      	mov	r2, r3
 8000a22:	2101      	movs	r1, #1
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 fb11 	bl	800104c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a2a:	f7ff fe1b 	bl	8000664 <HAL_GetTick>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d90f      	bls.n	8000a5c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a40:	6939      	ldr	r1, [r7, #16]
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 fc00 	bl	8001248 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e0ae      	b.n	8000bba <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0da      	beq.n	8000a1c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 fb55 	bl	800111c <HAL_ETH_WritePHYRegister>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00b      	beq.n	8000a90 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a7c:	6939      	ldr	r1, [r7, #16]
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 fbe2 	bl	8001248 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e094      	b.n	8000bba <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a90:	f7ff fde8 	bl	8000664 <HAL_GetTick>
 8000a94:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 fad4 	bl	800104c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000aa4:	f7ff fdde 	bl	8000664 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d90f      	bls.n	8000ad6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000aba:	6939      	ldr	r1, [r7, #16]
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 fbc3 	bl	8001248 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	e071      	b.n	8000bba <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f003 0320 	and.w	r3, r3, #32
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0da      	beq.n	8000a96 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	211f      	movs	r1, #31
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 faaf 	bl	800104c <HAL_ETH_ReadPHYRegister>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00b      	beq.n	8000b0c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000af8:	6939      	ldr	r1, [r7, #16]
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 fba4 	bl	8001248 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2201      	movs	r2, #1
 8000b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e056      	b.n	8000bba <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d004      	beq.n	8000b20 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	e002      	b.n	8000b26 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	e037      	b.n	8000ba8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	e032      	b.n	8000ba8 <HAL_ETH_Init+0x31c>
 8000b42:	bf00      	nop
 8000b44:	03938700 	.word	0x03938700
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	01312cff 	.word	0x01312cff
 8000b54:	02160ebf 	.word	0x02160ebf
 8000b58:	039386ff 	.word	0x039386ff
 8000b5c:	05f5e0ff 	.word	0x05f5e0ff
 8000b60:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	08db      	lsrs	r3, r3, #3
 8000b6a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 facd 	bl	800111c <HAL_ETH_WritePHYRegister>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00b      	beq.n	8000ba0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 fb5a 	bl	8001248 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e00c      	b.n	8000bba <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000ba0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000ba4:	f7ff fd6a 	bl	800067c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000ba8:	6939      	ldr	r1, [r7, #16]
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 fb4c 	bl	8001248 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop

08000bc4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d101      	bne.n	8000be4 <HAL_ETH_DMATxDescListInit+0x20>
 8000be0:	2302      	movs	r3, #2
 8000be2:	e052      	b.n	8000c8a <HAL_ETH_DMATxDescListInit+0xc6>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2202      	movs	r2, #2
 8000bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e030      	b.n	8000c62 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	015b      	lsls	r3, r3, #5
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	4413      	add	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c10:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c18:	fb02 f303 	mul.w	r3, r2, r3
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4413      	add	r3, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d105      	bne.n	8000c3a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d208      	bcs.n	8000c56 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	015b      	lsls	r3, r3, #5
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	461a      	mov	r2, r3
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	e002      	b.n	8000c5c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3ca      	bcc.n	8000c00 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6819      	ldr	r1, [r3, #0]
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f241 0310 	movw	r3, #4112	; 0x1010
 8000c74:	440b      	add	r3, r1
 8000c76:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	371c      	adds	r7, #28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b087      	sub	sp, #28
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d101      	bne.n	8000cb6 <HAL_ETH_DMARxDescListInit+0x20>
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e056      	b.n	8000d64 <HAL_ETH_DMARxDescListInit+0xce>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	e034      	b.n	8000d3c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	015b      	lsls	r3, r3, #5
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	4413      	add	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ce2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000cea:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d105      	bne.n	8000d14 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d208      	bcs.n	8000d30 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	015b      	lsls	r3, r3, #5
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	4413      	add	r3, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	e002      	b.n	8000d36 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d3c6      	bcc.n	8000cd2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6819      	ldr	r1, [r3, #0]
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	f241 030c 	movw	r3, #4108	; 0x100c
 8000d4e:	440b      	add	r3, r1
 8000d50:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	371c      	adds	r7, #28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d101      	bne.n	8000d94 <HAL_ETH_TransmitFrame+0x24>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e0cd      	b.n	8000f30 <HAL_ETH_TransmitFrame+0x1c0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2202      	movs	r2, #2
 8000da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d109      	bne.n	8000dbe <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e0b8      	b.n	8000f30 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da09      	bge.n	8000ddc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2212      	movs	r2, #18
 8000dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e0a9      	b.n	8000f30 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d915      	bls.n	8000e12 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	4a54      	ldr	r2, [pc, #336]	; (8000f3c <HAL_ETH_TransmitFrame+0x1cc>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	0a9b      	lsrs	r3, r3, #10
 8000df0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <HAL_ETH_TransmitFrame+0x1cc>)
 8000df6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dfa:	0a9b      	lsrs	r3, r3, #10
 8000dfc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000e00:	fb01 f303 	mul.w	r3, r1, r3
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d005      	beq.n	8000e16 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	e001      	b.n	8000e16 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d11c      	bne.n	8000e56 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e26:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000e2a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000e36:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e46:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e54:	e04b      	b.n	8000eee <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	e044      	b.n	8000ee6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e6a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d107      	bne.n	8000e82 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e80:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e8a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d116      	bne.n	8000ec4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000ea4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4a25      	ldr	r2, [pc, #148]	; (8000f40 <HAL_ETH_TransmitFrame+0x1d0>)
 8000eaa:	fb02 f203 	mul.w	r2, r2, r3
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000eb6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000ec2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ed2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3b6      	bcc.n	8000e5c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	f241 0314 	movw	r3, #4116	; 0x1014
 8000ef6:	4413      	add	r3, r2
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00d      	beq.n	8000f1e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f241 0314 	movw	r3, #4116	; 0x1014
 8000f0a:	4413      	add	r3, r2
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	f241 0304 	movw	r3, #4100	; 0x1004
 8000f18:	4413      	add	r3, r2
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	ac02b00b 	.word	0xac02b00b
 8000f40:	fffffa0c 	.word	0xfffffa0c

08000f44 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_ETH_GetReceivedFrame+0x1a>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e070      	b.n	8001040 <HAL_ETH_GetReceivedFrame+0xfc>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2202      	movs	r2, #2
 8000f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db5a      	blt.n	800102e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d030      	beq.n	8000fe8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d103      	bne.n	8000fa0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	0c1b      	lsrs	r3, r3, #16
 8000fb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000fb4:	3b04      	subs	r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e02b      	b.n	8001040 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d010      	beq.n	8001018 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
 8001016:	e00a      	b.n	800102e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	461a      	mov	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	460b      	mov	r3, r1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b82      	cmp	r3, #130	; 0x82
 800106c:	d101      	bne.n	8001072 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800106e:	2302      	movs	r3, #2
 8001070:	e050      	b.n	8001114 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2282      	movs	r2, #130	; 0x82
 8001076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 031c 	and.w	r3, r3, #28
 8001088:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8a1b      	ldrh	r3, [r3, #16]
 800108e:	02db      	lsls	r3, r3, #11
 8001090:	b29b      	uxth	r3, r3
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4313      	orrs	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001098:	897b      	ldrh	r3, [r7, #10]
 800109a:	019b      	lsls	r3, r3, #6
 800109c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f023 0302 	bic.w	r3, r3, #2
 80010ac:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80010be:	f7ff fad1 	bl	8000664 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80010c4:	e015      	b.n	80010f2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80010c6:	f7ff facd 	bl	8000664 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d4:	d309      	bcc.n	80010ea <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e014      	b.n	8001114 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e4      	bne.n	80010c6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	b29b      	uxth	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	460b      	mov	r3, r1
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b42      	cmp	r3, #66	; 0x42
 800113c:	d101      	bne.n	8001142 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800113e:	2302      	movs	r3, #2
 8001140:	e04e      	b.n	80011e0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2242      	movs	r2, #66	; 0x42
 8001146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 031c 	and.w	r3, r3, #28
 8001158:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8a1b      	ldrh	r3, [r3, #16]
 800115e:	02db      	lsls	r3, r3, #11
 8001160:	b29b      	uxth	r3, r3
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4313      	orrs	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001168:	897b      	ldrh	r3, [r7, #10]
 800116a:	019b      	lsls	r3, r3, #6
 800116c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	4313      	orrs	r3, r2
 8001174:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001198:	f7ff fa64 	bl	8000664 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800119e:	e015      	b.n	80011cc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80011a0:	f7ff fa60 	bl	8000664 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ae:	d309      	bcc.n	80011c4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e00d      	b.n	80011e0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1e4      	bne.n	80011a0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_ETH_Start+0x16>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e01f      	b.n	800123e <HAL_ETH_Start+0x56>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2202      	movs	r2, #2
 800120a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 fa1c 	bl	800164c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 fa36 	bl	8001686 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 fa80 	bl	8001720 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fa4d 	bl	80016c0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fa62 	bl	80016f0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0b0      	sub	sp, #192	; 0xc0
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001264:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800126c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001276:	2300      	movs	r3, #0
 8001278:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d103      	bne.n	8001296 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800128e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001292:	663b      	str	r3, [r7, #96]	; 0x60
 8001294:	e001      	b.n	800129a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800129a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80012a4:	2300      	movs	r3, #0
 80012a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80012b4:	2340      	movs	r3, #64	; 0x40
 80012b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800131c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001320:	4bab      	ldr	r3, [pc, #684]	; (80015d0 <ETH_MACDMAConfig+0x388>)
 8001322:	4013      	ands	r3, r2
 8001324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001328:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800132a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800132c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800132e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001330:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001334:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800133a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800133c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800133e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001342:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001348:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800134a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800134c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800134e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001350:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001354:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001358:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800135a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800135c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800135e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001362:	4313      	orrs	r3, r2
 8001364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001370:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff f97d 	bl	800067c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800138a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800138c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800138e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001390:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001392:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001394:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001396:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800139a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800139c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80013a0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80013a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80013a6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80013a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80013ac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80013b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80013b8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80013ba:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff f958 	bl	800067c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013d4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80013de:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013e8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80013f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013f8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013fc:	4013      	ands	r3, r2
 80013fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001406:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001408:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800140c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800140e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001412:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001418:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800141a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800141e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001420:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001424:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001426:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800142a:	4313      	orrs	r3, r2
 800142c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001438:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff f919 	bl	800067c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001452:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001454:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001458:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff f904 	bl	800067c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800147c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001486:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800148c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001490:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80014a2:	2304      	movs	r3, #4
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80014a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80014ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80014b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80014b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f241 0318 	movw	r3, #4120	; 0x1018
 80014d2:	4413      	add	r3, r2
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80014da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <ETH_MACDMAConfig+0x38c>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80014e6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80014e8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80014ea:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80014ec:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80014ee:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80014f0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80014f2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80014f4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80014f6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80014f8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80014fa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80014fc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80014fe:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001502:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001506:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001508:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800150c:	4313      	orrs	r3, r2
 800150e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	f241 0318 	movw	r3, #4120	; 0x1018
 800151a:	4413      	add	r3, r2
 800151c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001520:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f241 0318 	movw	r3, #4120	; 0x1018
 800152a:	4413      	add	r3, r2
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff f8a2 	bl	800067c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001540:	4413      	add	r3, r2
 8001542:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001546:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800154c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800154e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001550:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001554:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001558:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800155a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800155c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800155e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001562:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800156c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001570:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff f87b 	bl	800067c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001592:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d10d      	bne.n	80015b8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f241 031c 	movw	r3, #4124	; 0x101c
 80015a4:	4413      	add	r3, r2
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6811      	ldr	r1, [r2, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <ETH_MACDMAConfig+0x390>)
 80015ae:	431a      	orrs	r2, r3
 80015b0:	f241 031c 	movw	r3, #4124	; 0x101c
 80015b4:	440b      	add	r3, r1
 80015b6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	461a      	mov	r2, r3
 80015be:	2100      	movs	r1, #0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f80b 	bl	80015dc <ETH_MACAddressConfig>
}
 80015c6:	bf00      	nop
 80015c8:	37c0      	adds	r7, #192	; 0xc0
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	ff20810f 	.word	0xff20810f
 80015d4:	f8de3f23 	.word	0xf8de3f23
 80015d8:	00010040 	.word	0x00010040

080015dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3305      	adds	r3, #5
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	3204      	adds	r2, #4
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <ETH_MACAddressConfig+0x68>)
 80015fe:	4413      	add	r3, r2
 8001600:	461a      	mov	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3303      	adds	r3, #3
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	061a      	lsls	r2, r3, #24
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3302      	adds	r3, #2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3301      	adds	r3, #1
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	4313      	orrs	r3, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <ETH_MACAddressConfig+0x6c>)
 800162e:	4413      	add	r3, r2
 8001630:	461a      	mov	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	6013      	str	r3, [r2, #0]
}
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40028040 	.word	0x40028040
 8001648:	40028044 	.word	0x40028044

0800164c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0208 	orr.w	r2, r2, #8
 8001666:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff f803 	bl	800067c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0204 	orr.w	r2, r2, #4
 80016a0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7fe ffe6 	bl	800067c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80016d0:	4413      	add	r3, r2
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6811      	ldr	r1, [r2, #0]
 80016d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80016e0:	440b      	add	r3, r1
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8001700:	4413      	add	r3, r2
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6811      	ldr	r1, [r2, #0]
 8001708:	f043 0202 	orr.w	r2, r3, #2
 800170c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001710:	440b      	add	r3, r1
 8001712:	601a      	str	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	f241 0318 	movw	r3, #4120	; 0x1018
 8001734:	4413      	add	r3, r2
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6811      	ldr	r1, [r2, #0]
 800173c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001740:	f241 0318 	movw	r3, #4120	; 0x1018
 8001744:	440b      	add	r3, r1
 8001746:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001750:	4413      	add	r3, r2
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001756:	2001      	movs	r0, #1
 8001758:	f7fe ff90 	bl	800067c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6819      	ldr	r1, [r3, #0]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	f241 0318 	movw	r3, #4120	; 0x1018
 8001766:	440b      	add	r3, r1
 8001768:	601a      	str	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	e175      	b.n	8001a80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f040 8164 	bne.w	8001a7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x4e>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b12      	cmp	r3, #18
 80017c0:	d123      	bne.n	800180a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	69b9      	ldr	r1, [r7, #24]
 8001806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0203 	and.w	r2, r3, #3
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d00b      	beq.n	800185e <HAL_GPIO_Init+0xea>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d007      	beq.n	800185e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001852:	2b11      	cmp	r3, #17
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b12      	cmp	r3, #18
 800185c:	d130      	bne.n	80018c0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80be 	beq.w	8001a7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <HAL_GPIO_Init+0x320>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a64      	ldr	r2, [pc, #400]	; (8001a94 <HAL_GPIO_Init+0x320>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b62      	ldr	r3, [pc, #392]	; (8001a94 <HAL_GPIO_Init+0x320>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001916:	4a60      	ldr	r2, [pc, #384]	; (8001a98 <HAL_GPIO_Init+0x324>)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a57      	ldr	r2, [pc, #348]	; (8001a9c <HAL_GPIO_Init+0x328>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d037      	beq.n	80019b2 <HAL_GPIO_Init+0x23e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a56      	ldr	r2, [pc, #344]	; (8001aa0 <HAL_GPIO_Init+0x32c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d031      	beq.n	80019ae <HAL_GPIO_Init+0x23a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a55      	ldr	r2, [pc, #340]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d02b      	beq.n	80019aa <HAL_GPIO_Init+0x236>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a54      	ldr	r2, [pc, #336]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d025      	beq.n	80019a6 <HAL_GPIO_Init+0x232>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a53      	ldr	r2, [pc, #332]	; (8001aac <HAL_GPIO_Init+0x338>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d01f      	beq.n	80019a2 <HAL_GPIO_Init+0x22e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a52      	ldr	r2, [pc, #328]	; (8001ab0 <HAL_GPIO_Init+0x33c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d019      	beq.n	800199e <HAL_GPIO_Init+0x22a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a51      	ldr	r2, [pc, #324]	; (8001ab4 <HAL_GPIO_Init+0x340>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d013      	beq.n	800199a <HAL_GPIO_Init+0x226>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <HAL_GPIO_Init+0x344>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00d      	beq.n	8001996 <HAL_GPIO_Init+0x222>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4f      	ldr	r2, [pc, #316]	; (8001abc <HAL_GPIO_Init+0x348>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <HAL_GPIO_Init+0x21e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4e      	ldr	r2, [pc, #312]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_GPIO_Init+0x21a>
 800198a:	2309      	movs	r3, #9
 800198c:	e012      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 800198e:	230a      	movs	r3, #10
 8001990:	e010      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 8001992:	2308      	movs	r3, #8
 8001994:	e00e      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 8001996:	2307      	movs	r3, #7
 8001998:	e00c      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 800199a:	2306      	movs	r3, #6
 800199c:	e00a      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 800199e:	2305      	movs	r3, #5
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019a2:	2304      	movs	r3, #4
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019c4:	4934      	ldr	r1, [pc, #208]	; (8001a98 <HAL_GPIO_Init+0x324>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d2:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f6:	4a33      	ldr	r2, [pc, #204]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019fc:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a20:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a74:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f ae86 	bls.w	8001794 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3724      	adds	r7, #36	; 0x24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40021400 	.word	0x40021400
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	40021c00 	.word	0x40021c00
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40022400 	.word	0x40022400
 8001ac4:	40013c00 	.word	0x40013c00

08001ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad8:	787b      	ldrb	r3, [r7, #1]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ae4:	e003      	b.n	8001aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	619a      	str	r2, [r3, #24]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40007000 	.word	0x40007000

08001b1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b4a:	f7fe fd8b 	bl	8000664 <HAL_GetTick>
 8001b4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b50:	e009      	b.n	8001b66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b52:	f7fe fd87 	bl	8000664 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b60:	d901      	bls.n	8001b66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e022      	b.n	8001bac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b72:	d1ee      	bne.n	8001b52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b80:	f7fe fd70 	bl	8000664 <HAL_GetTick>
 8001b84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b86:	e009      	b.n	8001b9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b88:	f7fe fd6c 	bl	8000664 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b96:	d901      	bls.n	8001b9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e007      	b.n	8001bac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ba8:	d1ee      	bne.n	8001b88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40007000 	.word	0x40007000

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e25c      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8087 	beq.w	8001cee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be0:	4b96      	ldr	r3, [pc, #600]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d00c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bec:	4b93      	ldr	r3, [pc, #588]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d112      	bne.n	8001c1e <HAL_RCC_OscConfig+0x62>
 8001bf8:	4b90      	ldr	r3, [pc, #576]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c04:	d10b      	bne.n	8001c1e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c06:	4b8d      	ldr	r3, [pc, #564]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d06c      	beq.n	8001cec <HAL_RCC_OscConfig+0x130>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d168      	bne.n	8001cec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e236      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x7a>
 8001c28:	4b84      	ldr	r3, [pc, #528]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a83      	ldr	r2, [pc, #524]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e02e      	b.n	8001c94 <HAL_RCC_OscConfig+0xd8>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x9c>
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7e      	ldr	r2, [pc, #504]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7b      	ldr	r2, [pc, #492]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0xd8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0xc0>
 8001c62:	4b76      	ldr	r3, [pc, #472]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a75      	ldr	r2, [pc, #468]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a72      	ldr	r2, [pc, #456]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xd8>
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6e      	ldr	r2, [pc, #440]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6b      	ldr	r2, [pc, #428]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7fe fce2 	bl	8000664 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7fe fcde 	bl	8000664 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1ea      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe8>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fcce 	bl	8000664 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7fe fcca 	bl	8000664 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e1d6      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x110>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d069      	beq.n	8001dce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfa:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d06:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d11c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x190>
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d116      	bne.n	8001d4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e1aa      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	493d      	ldr	r1, [pc, #244]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	e040      	b.n	8001dce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d023      	beq.n	8001d9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a38      	ldr	r2, [pc, #224]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7fe fc80 	bl	8000664 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d68:	f7fe fc7c 	bl	8000664 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e188      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4929      	ldr	r1, [pc, #164]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
 8001d9a:	e018      	b.n	8001dce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a26      	ldr	r2, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7fe fc5c 	bl	8000664 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db0:	f7fe fc58 	bl	8000664 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e164      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d038      	beq.n	8001e4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d019      	beq.n	8001e16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de6:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7fe fc39 	bl	8000664 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df6:	f7fe fc35 	bl	8000664 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e141      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x23a>
 8001e14:	e01a      	b.n	8001e4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7fe fc1f 	bl	8000664 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7fe fc1b 	bl	8000664 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d903      	bls.n	8001e40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e127      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
 8001e3c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b94      	ldr	r3, [pc, #592]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a4 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b8e      	ldr	r3, [pc, #568]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b8b      	ldr	r3, [pc, #556]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a8a      	ldr	r2, [pc, #552]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b88      	ldr	r3, [pc, #544]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e82:	4b85      	ldr	r3, [pc, #532]	; (8002098 <HAL_RCC_OscConfig+0x4dc>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d118      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e8e:	4b82      	ldr	r3, [pc, #520]	; (8002098 <HAL_RCC_OscConfig+0x4dc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a81      	ldr	r2, [pc, #516]	; (8002098 <HAL_RCC_OscConfig+0x4dc>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9a:	f7fe fbe3 	bl	8000664 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ea2:	f7fe fbdf 	bl	8000664 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	; 0x64
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0eb      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb4:	4b78      	ldr	r3, [pc, #480]	; (8002098 <HAL_RCC_OscConfig+0x4dc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x31a>
 8001ec8:	4b72      	ldr	r3, [pc, #456]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	4a71      	ldr	r2, [pc, #452]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed4:	e02d      	b.n	8001f32 <HAL_RCC_OscConfig+0x376>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x33c>
 8001ede:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a6c      	ldr	r2, [pc, #432]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eea:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	4a69      	ldr	r2, [pc, #420]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef6:	e01c      	b.n	8001f32 <HAL_RCC_OscConfig+0x376>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d10c      	bne.n	8001f1a <HAL_RCC_OscConfig+0x35e>
 8001f00:	4b64      	ldr	r3, [pc, #400]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	4a63      	ldr	r2, [pc, #396]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0c:	4b61      	ldr	r3, [pc, #388]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	4a60      	ldr	r2, [pc, #384]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
 8001f18:	e00b      	b.n	8001f32 <HAL_RCC_OscConfig+0x376>
 8001f1a:	4b5e      	ldr	r3, [pc, #376]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
 8001f26:	4b5b      	ldr	r3, [pc, #364]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	4a5a      	ldr	r2, [pc, #360]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d015      	beq.n	8001f66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fb93 	bl	8000664 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe fb8f 	bl	8000664 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e099      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ee      	beq.n	8001f42 <HAL_RCC_OscConfig+0x386>
 8001f64:	e014      	b.n	8001f90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7fe fb7d 	bl	8000664 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7fe fb79 	bl	8000664 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e083      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d105      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d06f      	beq.n	800208a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d067      	beq.n	8002086 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d149      	bne.n	8002052 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbe:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a34      	ldr	r2, [pc, #208]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7fe fb4b 	bl	8000664 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7fe fb47 	bl	8000664 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e053      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	019b      	lsls	r3, r3, #6
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	041b      	lsls	r3, r3, #16
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	061b      	lsls	r3, r3, #24
 8002014:	4313      	orrs	r3, r2
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8002018:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800201c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8002024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7fe fb1b 	bl	8000664 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002032:	f7fe fb17 	bl	8000664 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e023      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x476>
 8002050:	e01b      	b.n	800208a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 8002058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800205c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7fe fb01 	bl	8000664 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002066:	f7fe fafd 	bl	8000664 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e009      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_RCC_OscConfig+0x4d8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0x4aa>
 8002084:	e001      	b.n	800208a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	40007000 	.word	0x40007000

0800209c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0ce      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b69      	ldr	r3, [pc, #420]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b66      	ldr	r3, [pc, #408]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 020f 	bic.w	r2, r3, #15
 80020ca:	4964      	ldr	r1, [pc, #400]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b62      	ldr	r3, [pc, #392]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b6      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b58      	ldr	r3, [pc, #352]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a57      	ldr	r2, [pc, #348]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b52      	ldr	r3, [pc, #328]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800211e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494c      	ldr	r1, [pc, #304]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d040      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b46      	ldr	r3, [pc, #280]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07d      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b40      	ldr	r3, [pc, #256]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e071      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b3c      	ldr	r3, [pc, #240]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e069      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4935      	ldr	r1, [pc, #212]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002190:	f7fe fa68 	bl	8000664 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7fe fa64 	bl	8000664 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e051      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d210      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	4921      	ldr	r1, [pc, #132]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e030      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4915      	ldr	r1, [pc, #84]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490d      	ldr	r1, [pc, #52]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f81d 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8002232:	4601      	mov	r1, r0
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	fa21 f303 	lsr.w	r3, r1, r3
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_RCC_ClockConfig+0x1cc>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800224a:	2000      	movs	r0, #0
 800224c:	f7fe f9c6 	bl	80005dc <HAL_InitTick>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023c00 	.word	0x40023c00
 8002260:	40023800 	.word	0x40023800
 8002264:	08010ee8 	.word	0x08010ee8
 8002268:	20000010 	.word	0x20000010

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	2300      	movs	r3, #0
 800227c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b04      	cmp	r3, #4
 800228c:	d007      	beq.n	800229e <HAL_RCC_GetSysClockFreq+0x32>
 800228e:	2b08      	cmp	r3, #8
 8002290:	d008      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x38>
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 80b4 	bne.w	8002400 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800229a:	60bb      	str	r3, [r7, #8]
       break;
 800229c:	e0b3      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800229e:	4b5e      	ldr	r3, [pc, #376]	; (8002418 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80022a0:	60bb      	str	r3, [r7, #8]
      break;
 80022a2:	e0b0      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a4:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022ae:	4b58      	ldr	r3, [pc, #352]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d04a      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ba:	4b55      	ldr	r3, [pc, #340]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	099b      	lsrs	r3, r3, #6
 80022c0:	f04f 0400 	mov.w	r4, #0
 80022c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	ea03 0501 	and.w	r5, r3, r1
 80022d0:	ea04 0602 	and.w	r6, r4, r2
 80022d4:	4629      	mov	r1, r5
 80022d6:	4632      	mov	r2, r6
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	f04f 0400 	mov.w	r4, #0
 80022e0:	0154      	lsls	r4, r2, #5
 80022e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022e6:	014b      	lsls	r3, r1, #5
 80022e8:	4619      	mov	r1, r3
 80022ea:	4622      	mov	r2, r4
 80022ec:	1b49      	subs	r1, r1, r5
 80022ee:	eb62 0206 	sbc.w	r2, r2, r6
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	f04f 0400 	mov.w	r4, #0
 80022fa:	0194      	lsls	r4, r2, #6
 80022fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002300:	018b      	lsls	r3, r1, #6
 8002302:	1a5b      	subs	r3, r3, r1
 8002304:	eb64 0402 	sbc.w	r4, r4, r2
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	00e2      	lsls	r2, r4, #3
 8002312:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002316:	00d9      	lsls	r1, r3, #3
 8002318:	460b      	mov	r3, r1
 800231a:	4614      	mov	r4, r2
 800231c:	195b      	adds	r3, r3, r5
 800231e:	eb44 0406 	adc.w	r4, r4, r6
 8002322:	f04f 0100 	mov.w	r1, #0
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	0262      	lsls	r2, r4, #9
 800232c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002330:	0259      	lsls	r1, r3, #9
 8002332:	460b      	mov	r3, r1
 8002334:	4614      	mov	r4, r2
 8002336:	4618      	mov	r0, r3
 8002338:	4621      	mov	r1, r4
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f04f 0400 	mov.w	r4, #0
 8002340:	461a      	mov	r2, r3
 8002342:	4623      	mov	r3, r4
 8002344:	f7fd ffbc 	bl	80002c0 <__aeabi_uldivmod>
 8002348:	4603      	mov	r3, r0
 800234a:	460c      	mov	r4, r1
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	e049      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	f04f 0400 	mov.w	r4, #0
 800235a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	ea03 0501 	and.w	r5, r3, r1
 8002366:	ea04 0602 	and.w	r6, r4, r2
 800236a:	4629      	mov	r1, r5
 800236c:	4632      	mov	r2, r6
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	f04f 0400 	mov.w	r4, #0
 8002376:	0154      	lsls	r4, r2, #5
 8002378:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800237c:	014b      	lsls	r3, r1, #5
 800237e:	4619      	mov	r1, r3
 8002380:	4622      	mov	r2, r4
 8002382:	1b49      	subs	r1, r1, r5
 8002384:	eb62 0206 	sbc.w	r2, r2, r6
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	f04f 0400 	mov.w	r4, #0
 8002390:	0194      	lsls	r4, r2, #6
 8002392:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002396:	018b      	lsls	r3, r1, #6
 8002398:	1a5b      	subs	r3, r3, r1
 800239a:	eb64 0402 	sbc.w	r4, r4, r2
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	00e2      	lsls	r2, r4, #3
 80023a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023ac:	00d9      	lsls	r1, r3, #3
 80023ae:	460b      	mov	r3, r1
 80023b0:	4614      	mov	r4, r2
 80023b2:	195b      	adds	r3, r3, r5
 80023b4:	eb44 0406 	adc.w	r4, r4, r6
 80023b8:	f04f 0100 	mov.w	r1, #0
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	02a2      	lsls	r2, r4, #10
 80023c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023c6:	0299      	lsls	r1, r3, #10
 80023c8:	460b      	mov	r3, r1
 80023ca:	4614      	mov	r4, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	4621      	mov	r1, r4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f04f 0400 	mov.w	r4, #0
 80023d6:	461a      	mov	r2, r3
 80023d8:	4623      	mov	r3, r4
 80023da:	f7fd ff71 	bl	80002c0 <__aeabi_uldivmod>
 80023de:	4603      	mov	r3, r0
 80023e0:	460c      	mov	r4, r1
 80023e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	3301      	adds	r3, #1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	60bb      	str	r3, [r7, #8]
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002402:	60bb      	str	r3, [r7, #8]
      break;
 8002404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002406:	68bb      	ldr	r3, [r7, #8]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002410:	40023800 	.word	0x40023800
 8002414:	00f42400 	.word	0x00f42400
 8002418:	007a1200 	.word	0x007a1200

0800241c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_RCC_GetHCLKFreq+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000010 	.word	0x20000010

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff0 	bl	800241c <HAL_RCC_GetHCLKFreq>
 800243c:	4601      	mov	r1, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0a9b      	lsrs	r3, r3, #10
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	08010ef8 	.word	0x08010ef8

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffdc 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002464:	4601      	mov	r1, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0b5b      	lsrs	r3, r3, #13
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4a03      	ldr	r2, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	08010ef8 	.word	0x08010ef8

08002484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024ac:	4b69      	ldr	r3, [pc, #420]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a68      	ldr	r2, [pc, #416]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024b6:	6093      	str	r3, [r2, #8]
 80024b8:	4b66      	ldr	r3, [pc, #408]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	4964      	ldr	r1, [pc, #400]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d017      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	4959      	ldr	r1, [pc, #356]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fc:	d101      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800250a:	2301      	movs	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d017      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800251a:	4b4e      	ldr	r3, [pc, #312]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	494a      	ldr	r1, [pc, #296]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d101      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800253a:	2301      	movs	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 808b 	beq.w	800267e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a39      	ldr	r2, [pc, #228]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
 8002574:	4b37      	ldr	r3, [pc, #220]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002580:	4b35      	ldr	r3, [pc, #212]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a34      	ldr	r2, [pc, #208]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258c:	f7fe f86a 	bl	8000664 <HAL_GetTick>
 8002590:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7fe f866 	bl	8000664 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e355      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025a6:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d035      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d02e      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025f2:	4a18      	ldr	r2, [pc, #96]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d114      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe f82e 	bl	8000664 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7fe f82a 	bl	8000664 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e317      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0ee      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800263a:	d111      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800264a:	400b      	ands	r3, r1
 800264c:	4901      	ldr	r1, [pc, #4]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
 8002652:	e00b      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000
 800265c:	0ffffcff 	.word	0x0ffffcff
 8002660:	4bb0      	ldr	r3, [pc, #704]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4aaf      	ldr	r2, [pc, #700]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002666:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800266a:	6093      	str	r3, [r2, #8]
 800266c:	4bad      	ldr	r3, [pc, #692]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800266e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	49aa      	ldr	r1, [pc, #680]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800267a:	4313      	orrs	r3, r2
 800267c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800268a:	4ba6      	ldr	r3, [pc, #664]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002690:	4aa4      	ldr	r2, [pc, #656]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002696:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800269a:	4ba2      	ldr	r3, [pc, #648]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800269c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	499f      	ldr	r1, [pc, #636]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b8:	4b9a      	ldr	r3, [pc, #616]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c6:	4997      	ldr	r1, [pc, #604]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026da:	4b92      	ldr	r3, [pc, #584]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e8:	498e      	ldr	r1, [pc, #568]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fc:	4b89      	ldr	r3, [pc, #548]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800270a:	4986      	ldr	r1, [pc, #536]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800271e:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	497d      	ldr	r1, [pc, #500]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002740:	4b78      	ldr	r3, [pc, #480]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4975      	ldr	r1, [pc, #468]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002762:	4b70      	ldr	r3, [pc, #448]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f023 020c 	bic.w	r2, r3, #12
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	496c      	ldr	r1, [pc, #432]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002784:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4964      	ldr	r1, [pc, #400]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a6:	4b5f      	ldr	r3, [pc, #380]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b4:	495b      	ldr	r1, [pc, #364]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027c8:	4b56      	ldr	r3, [pc, #344]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	4953      	ldr	r1, [pc, #332]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	494a      	ldr	r1, [pc, #296]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800280c:	4b45      	ldr	r3, [pc, #276]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	4942      	ldr	r1, [pc, #264]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	4939      	ldr	r1, [pc, #228]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002850:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285e:	4931      	ldr	r1, [pc, #196]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d011      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002872:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002880:	4928      	ldr	r1, [pc, #160]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002890:	d101      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002892:	2301      	movs	r3, #1
 8002894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	4918      	ldr	r1, [pc, #96]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e4:	490f      	ldr	r1, [pc, #60]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d005      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028fa:	f040 80d8 	bne.w	8002aae <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a08      	ldr	r2, [pc, #32]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002904:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290a:	f7fd feab 	bl	8000664 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002912:	f7fd fea7 	bl	8000664 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b64      	cmp	r3, #100	; 0x64
 800291e:	d903      	bls.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e196      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002924:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002928:	4b6c      	ldr	r3, [pc, #432]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ee      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d021      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	2b00      	cmp	r3, #0
 8002946:	d11d      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002948:	4b64      	ldr	r3, [pc, #400]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800294a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002956:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295c:	0e1b      	lsrs	r3, r3, #24
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	019a      	lsls	r2, r3, #6
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	061b      	lsls	r3, r3, #24
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	071b      	lsls	r3, r3, #28
 800297c:	4957      	ldr	r1, [pc, #348]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d02e      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ae:	d129      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029b0:	4b4a      	ldr	r3, [pc, #296]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b6:	0c1b      	lsrs	r3, r3, #16
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029be:	4b47      	ldr	r3, [pc, #284]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c4:	0f1b      	lsrs	r3, r3, #28
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	019a      	lsls	r2, r3, #6
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	431a      	orrs	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	071b      	lsls	r3, r3, #28
 80029e4:	493d      	ldr	r1, [pc, #244]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029ec:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f2:	f023 021f 	bic.w	r2, r3, #31
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	3b01      	subs	r3, #1
 80029fc:	4937      	ldr	r1, [pc, #220]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01d      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a10:	4b32      	ldr	r3, [pc, #200]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a16:	0e1b      	lsrs	r3, r3, #24
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a1e:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a24:	0f1b      	lsrs	r3, r3, #28
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	019a      	lsls	r2, r3, #6
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	071b      	lsls	r3, r3, #28
 8002a44:	4925      	ldr	r1, [pc, #148]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d011      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	019a      	lsls	r2, r3, #6
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	061b      	lsls	r3, r3, #24
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	071b      	lsls	r3, r3, #28
 8002a74:	4919      	ldr	r1, [pc, #100]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a16      	ldr	r2, [pc, #88]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a88:	f7fd fdec 	bl	8000664 <HAL_GetTick>
 8002a8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a90:	f7fd fde8 	bl	8000664 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0d7      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f040 80cd 	bne.w	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a08      	ldr	r2, [pc, #32]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac2:	f7fd fdcf 	bl	8000664 <HAL_GetTick>
 8002ac6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aca:	f7fd fdcb 	bl	8000664 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b64      	cmp	r3, #100	; 0x64
 8002ad6:	d903      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0ba      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002adc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aec:	d0ed      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02e      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d12a      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b16:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b24:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	0f1b      	lsrs	r3, r3, #28
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	019a      	lsls	r2, r3, #6
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	061b      	lsls	r3, r3, #24
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	071b      	lsls	r3, r3, #28
 8002b4a:	4944      	ldr	r1, [pc, #272]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b52:	4b42      	ldr	r3, [pc, #264]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	493d      	ldr	r1, [pc, #244]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d022      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b80:	d11d      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b82:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	0e1b      	lsrs	r3, r3, #24
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b90:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	0f1b      	lsrs	r3, r3, #28
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	019a      	lsls	r2, r3, #6
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	431a      	orrs	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	061b      	lsls	r3, r3, #24
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	071b      	lsls	r3, r3, #28
 8002bb6:	4929      	ldr	r1, [pc, #164]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d028      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	0e1b      	lsrs	r3, r3, #24
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bd8:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	019a      	lsls	r2, r3, #6
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	071b      	lsls	r3, r3, #28
 8002bfe:	4917      	ldr	r1, [pc, #92]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	4911      	ldr	r1, [pc, #68]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c28:	f7fd fd1c 	bl	8000664 <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c30:	f7fd fd18 	bl	8000664 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e007      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4e:	d1ef      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e040      	b.n	8002cf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f00b f99a 	bl	800dfbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0201 	bic.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f82c 	bl	8002cfc <UART_SetConfig>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e022      	b.n	8002cf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fac4 	bl	8003244 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cda:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fb4b 	bl	8003388 <UART_CheckIdleState>
 8002cf2:	4603      	mov	r3, r0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4bb1      	ldr	r3, [pc, #708]	; (8002ff0 <UART_SetConfig+0x2f4>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	6939      	ldr	r1, [r7, #16]
 8002d34:	430b      	orrs	r3, r1
 8002d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a9f      	ldr	r2, [pc, #636]	; (8002ff4 <UART_SetConfig+0x2f8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d121      	bne.n	8002dc0 <UART_SetConfig+0xc4>
 8002d7c:	4b9e      	ldr	r3, [pc, #632]	; (8002ff8 <UART_SetConfig+0x2fc>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d816      	bhi.n	8002db8 <UART_SetConfig+0xbc>
 8002d8a:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <UART_SetConfig+0x94>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002da1 	.word	0x08002da1
 8002d94:	08002dad 	.word	0x08002dad
 8002d98:	08002da7 	.word	0x08002da7
 8002d9c:	08002db3 	.word	0x08002db3
 8002da0:	2301      	movs	r3, #1
 8002da2:	77fb      	strb	r3, [r7, #31]
 8002da4:	e151      	b.n	800304a <UART_SetConfig+0x34e>
 8002da6:	2302      	movs	r3, #2
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e14e      	b.n	800304a <UART_SetConfig+0x34e>
 8002dac:	2304      	movs	r3, #4
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e14b      	b.n	800304a <UART_SetConfig+0x34e>
 8002db2:	2308      	movs	r3, #8
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e148      	b.n	800304a <UART_SetConfig+0x34e>
 8002db8:	2310      	movs	r3, #16
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	bf00      	nop
 8002dbe:	e144      	b.n	800304a <UART_SetConfig+0x34e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a8d      	ldr	r2, [pc, #564]	; (8002ffc <UART_SetConfig+0x300>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d134      	bne.n	8002e34 <UART_SetConfig+0x138>
 8002dca:	4b8b      	ldr	r3, [pc, #556]	; (8002ff8 <UART_SetConfig+0x2fc>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d829      	bhi.n	8002e2c <UART_SetConfig+0x130>
 8002dd8:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <UART_SetConfig+0xe4>)
 8002dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dde:	bf00      	nop
 8002de0:	08002e15 	.word	0x08002e15
 8002de4:	08002e2d 	.word	0x08002e2d
 8002de8:	08002e2d 	.word	0x08002e2d
 8002dec:	08002e2d 	.word	0x08002e2d
 8002df0:	08002e21 	.word	0x08002e21
 8002df4:	08002e2d 	.word	0x08002e2d
 8002df8:	08002e2d 	.word	0x08002e2d
 8002dfc:	08002e2d 	.word	0x08002e2d
 8002e00:	08002e1b 	.word	0x08002e1b
 8002e04:	08002e2d 	.word	0x08002e2d
 8002e08:	08002e2d 	.word	0x08002e2d
 8002e0c:	08002e2d 	.word	0x08002e2d
 8002e10:	08002e27 	.word	0x08002e27
 8002e14:	2300      	movs	r3, #0
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	e117      	b.n	800304a <UART_SetConfig+0x34e>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e114      	b.n	800304a <UART_SetConfig+0x34e>
 8002e20:	2304      	movs	r3, #4
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	e111      	b.n	800304a <UART_SetConfig+0x34e>
 8002e26:	2308      	movs	r3, #8
 8002e28:	77fb      	strb	r3, [r7, #31]
 8002e2a:	e10e      	b.n	800304a <UART_SetConfig+0x34e>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	bf00      	nop
 8002e32:	e10a      	b.n	800304a <UART_SetConfig+0x34e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a71      	ldr	r2, [pc, #452]	; (8003000 <UART_SetConfig+0x304>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d120      	bne.n	8002e80 <UART_SetConfig+0x184>
 8002e3e:	4b6e      	ldr	r3, [pc, #440]	; (8002ff8 <UART_SetConfig+0x2fc>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d00f      	beq.n	8002e6c <UART_SetConfig+0x170>
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d802      	bhi.n	8002e56 <UART_SetConfig+0x15a>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <UART_SetConfig+0x164>
 8002e54:	e010      	b.n	8002e78 <UART_SetConfig+0x17c>
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d005      	beq.n	8002e66 <UART_SetConfig+0x16a>
 8002e5a:	2b30      	cmp	r3, #48	; 0x30
 8002e5c:	d009      	beq.n	8002e72 <UART_SetConfig+0x176>
 8002e5e:	e00b      	b.n	8002e78 <UART_SetConfig+0x17c>
 8002e60:	2300      	movs	r3, #0
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e0f1      	b.n	800304a <UART_SetConfig+0x34e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e0ee      	b.n	800304a <UART_SetConfig+0x34e>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	e0eb      	b.n	800304a <UART_SetConfig+0x34e>
 8002e72:	2308      	movs	r3, #8
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e0e8      	b.n	800304a <UART_SetConfig+0x34e>
 8002e78:	2310      	movs	r3, #16
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	bf00      	nop
 8002e7e:	e0e4      	b.n	800304a <UART_SetConfig+0x34e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5f      	ldr	r2, [pc, #380]	; (8003004 <UART_SetConfig+0x308>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d120      	bne.n	8002ecc <UART_SetConfig+0x1d0>
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <UART_SetConfig+0x2fc>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d00f      	beq.n	8002eb8 <UART_SetConfig+0x1bc>
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d802      	bhi.n	8002ea2 <UART_SetConfig+0x1a6>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <UART_SetConfig+0x1b0>
 8002ea0:	e010      	b.n	8002ec4 <UART_SetConfig+0x1c8>
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d005      	beq.n	8002eb2 <UART_SetConfig+0x1b6>
 8002ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ea8:	d009      	beq.n	8002ebe <UART_SetConfig+0x1c2>
 8002eaa:	e00b      	b.n	8002ec4 <UART_SetConfig+0x1c8>
 8002eac:	2300      	movs	r3, #0
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e0cb      	b.n	800304a <UART_SetConfig+0x34e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e0c8      	b.n	800304a <UART_SetConfig+0x34e>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e0c5      	b.n	800304a <UART_SetConfig+0x34e>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e0c2      	b.n	800304a <UART_SetConfig+0x34e>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	bf00      	nop
 8002eca:	e0be      	b.n	800304a <UART_SetConfig+0x34e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a4d      	ldr	r2, [pc, #308]	; (8003008 <UART_SetConfig+0x30c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d124      	bne.n	8002f20 <UART_SetConfig+0x224>
 8002ed6:	4b48      	ldr	r3, [pc, #288]	; (8002ff8 <UART_SetConfig+0x2fc>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee4:	d012      	beq.n	8002f0c <UART_SetConfig+0x210>
 8002ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eea:	d802      	bhi.n	8002ef2 <UART_SetConfig+0x1f6>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <UART_SetConfig+0x204>
 8002ef0:	e012      	b.n	8002f18 <UART_SetConfig+0x21c>
 8002ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef6:	d006      	beq.n	8002f06 <UART_SetConfig+0x20a>
 8002ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002efc:	d009      	beq.n	8002f12 <UART_SetConfig+0x216>
 8002efe:	e00b      	b.n	8002f18 <UART_SetConfig+0x21c>
 8002f00:	2300      	movs	r3, #0
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e0a1      	b.n	800304a <UART_SetConfig+0x34e>
 8002f06:	2302      	movs	r3, #2
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e09e      	b.n	800304a <UART_SetConfig+0x34e>
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e09b      	b.n	800304a <UART_SetConfig+0x34e>
 8002f12:	2308      	movs	r3, #8
 8002f14:	77fb      	strb	r3, [r7, #31]
 8002f16:	e098      	b.n	800304a <UART_SetConfig+0x34e>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	bf00      	nop
 8002f1e:	e094      	b.n	800304a <UART_SetConfig+0x34e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a39      	ldr	r2, [pc, #228]	; (800300c <UART_SetConfig+0x310>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d124      	bne.n	8002f74 <UART_SetConfig+0x278>
 8002f2a:	4b33      	ldr	r3, [pc, #204]	; (8002ff8 <UART_SetConfig+0x2fc>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f38:	d012      	beq.n	8002f60 <UART_SetConfig+0x264>
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3e:	d802      	bhi.n	8002f46 <UART_SetConfig+0x24a>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <UART_SetConfig+0x258>
 8002f44:	e012      	b.n	8002f6c <UART_SetConfig+0x270>
 8002f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4a:	d006      	beq.n	8002f5a <UART_SetConfig+0x25e>
 8002f4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x26a>
 8002f52:	e00b      	b.n	8002f6c <UART_SetConfig+0x270>
 8002f54:	2301      	movs	r3, #1
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e077      	b.n	800304a <UART_SetConfig+0x34e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	77fb      	strb	r3, [r7, #31]
 8002f5e:	e074      	b.n	800304a <UART_SetConfig+0x34e>
 8002f60:	2304      	movs	r3, #4
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e071      	b.n	800304a <UART_SetConfig+0x34e>
 8002f66:	2308      	movs	r3, #8
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	e06e      	b.n	800304a <UART_SetConfig+0x34e>
 8002f6c:	2310      	movs	r3, #16
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	bf00      	nop
 8002f72:	e06a      	b.n	800304a <UART_SetConfig+0x34e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a25      	ldr	r2, [pc, #148]	; (8003010 <UART_SetConfig+0x314>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d124      	bne.n	8002fc8 <UART_SetConfig+0x2cc>
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <UART_SetConfig+0x2fc>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8c:	d012      	beq.n	8002fb4 <UART_SetConfig+0x2b8>
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f92:	d802      	bhi.n	8002f9a <UART_SetConfig+0x29e>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <UART_SetConfig+0x2ac>
 8002f98:	e012      	b.n	8002fc0 <UART_SetConfig+0x2c4>
 8002f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9e:	d006      	beq.n	8002fae <UART_SetConfig+0x2b2>
 8002fa0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fa4:	d009      	beq.n	8002fba <UART_SetConfig+0x2be>
 8002fa6:	e00b      	b.n	8002fc0 <UART_SetConfig+0x2c4>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e04d      	b.n	800304a <UART_SetConfig+0x34e>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	e04a      	b.n	800304a <UART_SetConfig+0x34e>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e047      	b.n	800304a <UART_SetConfig+0x34e>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e044      	b.n	800304a <UART_SetConfig+0x34e>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	bf00      	nop
 8002fc6:	e040      	b.n	800304a <UART_SetConfig+0x34e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a11      	ldr	r2, [pc, #68]	; (8003014 <UART_SetConfig+0x318>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d139      	bne.n	8003046 <UART_SetConfig+0x34a>
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <UART_SetConfig+0x2fc>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fe0:	d027      	beq.n	8003032 <UART_SetConfig+0x336>
 8002fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fe6:	d817      	bhi.n	8003018 <UART_SetConfig+0x31c>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01c      	beq.n	8003026 <UART_SetConfig+0x32a>
 8002fec:	e027      	b.n	800303e <UART_SetConfig+0x342>
 8002fee:	bf00      	nop
 8002ff0:	efff69f3 	.word	0xefff69f3
 8002ff4:	40011000 	.word	0x40011000
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40004400 	.word	0x40004400
 8003000:	40004800 	.word	0x40004800
 8003004:	40004c00 	.word	0x40004c00
 8003008:	40005000 	.word	0x40005000
 800300c:	40011400 	.word	0x40011400
 8003010:	40007800 	.word	0x40007800
 8003014:	40007c00 	.word	0x40007c00
 8003018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301c:	d006      	beq.n	800302c <UART_SetConfig+0x330>
 800301e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003022:	d009      	beq.n	8003038 <UART_SetConfig+0x33c>
 8003024:	e00b      	b.n	800303e <UART_SetConfig+0x342>
 8003026:	2300      	movs	r3, #0
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e00e      	b.n	800304a <UART_SetConfig+0x34e>
 800302c:	2302      	movs	r3, #2
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e00b      	b.n	800304a <UART_SetConfig+0x34e>
 8003032:	2304      	movs	r3, #4
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e008      	b.n	800304a <UART_SetConfig+0x34e>
 8003038:	2308      	movs	r3, #8
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e005      	b.n	800304a <UART_SetConfig+0x34e>
 800303e:	2310      	movs	r3, #16
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	bf00      	nop
 8003044:	e001      	b.n	800304a <UART_SetConfig+0x34e>
 8003046:	2310      	movs	r3, #16
 8003048:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003052:	d17c      	bne.n	800314e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003054:	7ffb      	ldrb	r3, [r7, #31]
 8003056:	2b08      	cmp	r3, #8
 8003058:	d859      	bhi.n	800310e <UART_SetConfig+0x412>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <UART_SetConfig+0x364>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003085 	.word	0x08003085
 8003064:	080030a3 	.word	0x080030a3
 8003068:	080030c1 	.word	0x080030c1
 800306c:	0800310f 	.word	0x0800310f
 8003070:	080030d9 	.word	0x080030d9
 8003074:	0800310f 	.word	0x0800310f
 8003078:	0800310f 	.word	0x0800310f
 800307c:	0800310f 	.word	0x0800310f
 8003080:	080030f7 	.word	0x080030f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003084:	f7ff f9d6 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003088:	4603      	mov	r3, r0
 800308a:	005a      	lsls	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	441a      	add	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	b29b      	uxth	r3, r3
 800309e:	61bb      	str	r3, [r7, #24]
        break;
 80030a0:	e038      	b.n	8003114 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030a2:	f7ff f9db 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 80030a6:	4603      	mov	r3, r0
 80030a8:	005a      	lsls	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	441a      	add	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	61bb      	str	r3, [r7, #24]
        break;
 80030be:	e029      	b.n	8003114 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	085a      	lsrs	r2, r3, #1
 80030c6:	4b5d      	ldr	r3, [pc, #372]	; (800323c <UART_SetConfig+0x540>)
 80030c8:	4413      	add	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6852      	ldr	r2, [r2, #4]
 80030ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	61bb      	str	r3, [r7, #24]
        break;
 80030d6:	e01d      	b.n	8003114 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030d8:	f7ff f8c8 	bl	800226c <HAL_RCC_GetSysClockFreq>
 80030dc:	4603      	mov	r3, r0
 80030de:	005a      	lsls	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	441a      	add	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	61bb      	str	r3, [r7, #24]
        break;
 80030f4:	e00e      	b.n	8003114 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	b29b      	uxth	r3, r3
 800310a:	61bb      	str	r3, [r7, #24]
        break;
 800310c:	e002      	b.n	8003114 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
        break;
 8003112:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b0f      	cmp	r3, #15
 8003118:	d916      	bls.n	8003148 <UART_SetConfig+0x44c>
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d212      	bcs.n	8003148 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	b29b      	uxth	r3, r3
 8003126:	f023 030f 	bic.w	r3, r3, #15
 800312a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	b29b      	uxth	r3, r3
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	b29a      	uxth	r2, r3
 8003138:	89fb      	ldrh	r3, [r7, #14]
 800313a:	4313      	orrs	r3, r2
 800313c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	89fa      	ldrh	r2, [r7, #14]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	e06e      	b.n	8003226 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	75fb      	strb	r3, [r7, #23]
 800314c:	e06b      	b.n	8003226 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800314e:	7ffb      	ldrb	r3, [r7, #31]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d857      	bhi.n	8003204 <UART_SetConfig+0x508>
 8003154:	a201      	add	r2, pc, #4	; (adr r2, 800315c <UART_SetConfig+0x460>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	08003181 	.word	0x08003181
 8003160:	0800319d 	.word	0x0800319d
 8003164:	080031b9 	.word	0x080031b9
 8003168:	08003205 	.word	0x08003205
 800316c:	080031d1 	.word	0x080031d1
 8003170:	08003205 	.word	0x08003205
 8003174:	08003205 	.word	0x08003205
 8003178:	08003205 	.word	0x08003205
 800317c:	080031ed 	.word	0x080031ed
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003180:	f7ff f958 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003184:	4602      	mov	r2, r0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	441a      	add	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	b29b      	uxth	r3, r3
 8003198:	61bb      	str	r3, [r7, #24]
        break;
 800319a:	e036      	b.n	800320a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800319c:	f7ff f95e 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	441a      	add	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	61bb      	str	r3, [r7, #24]
        break;
 80031b6:	e028      	b.n	800320a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	085a      	lsrs	r2, r3, #1
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <UART_SetConfig+0x544>)
 80031c0:	4413      	add	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6852      	ldr	r2, [r2, #4]
 80031c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	61bb      	str	r3, [r7, #24]
        break;
 80031ce:	e01c      	b.n	800320a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031d0:	f7ff f84c 	bl	800226c <HAL_RCC_GetSysClockFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	441a      	add	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	61bb      	str	r3, [r7, #24]
        break;
 80031ea:	e00e      	b.n	800320a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	b29b      	uxth	r3, r3
 8003200:	61bb      	str	r3, [r7, #24]
        break;
 8003202:	e002      	b.n	800320a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	75fb      	strb	r3, [r7, #23]
        break;
 8003208:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d908      	bls.n	8003222 <UART_SetConfig+0x526>
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003216:	d204      	bcs.n	8003222 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	e001      	b.n	8003226 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	01e84800 	.word	0x01e84800
 8003240:	00f42400 	.word	0x00f42400

08003244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01a      	beq.n	800335a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003342:	d10a      	bne.n	800335a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003396:	f7fd f965 	bl	8000664 <HAL_GetTick>
 800339a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d10e      	bne.n	80033c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f814 	bl	80033e6 <UART_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e00a      	b.n	80033de <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f6:	e02a      	b.n	800344e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d026      	beq.n	800344e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003400:	f7fd f930 	bl	8000664 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <UART_WaitOnFlagUntilTimeout+0x30>
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11b      	bne.n	800344e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003424:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e00f      	b.n	800346e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4013      	ands	r3, r2
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	429a      	cmp	r2, r3
 800346a:	d0c5      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	ba5b      	rev16	r3, r3
 8003484:	b29b      	uxth	r3, r3
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	061a      	lsls	r2, r3, #24
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	0e1b      	lsrs	r3, r3, #24
 80034b6:	4313      	orrs	r3, r2
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80034ce:	f000 f8a7 	bl	8003620 <mem_init>
  memp_init();
 80034d2:	f000 fb3b 	bl	8003b4c <memp_init>
  pbuf_init();
  netif_init();
 80034d6:	f000 fbf3 	bl	8003cc0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80034da:	f006 fed5 	bl	800a288 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80034de:	f001 fbfb 	bl	8004cd8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80034e2:	f006 fdb3 	bl	800a04c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80034f8:	4b40      	ldr	r3, [pc, #256]	; (80035fc <plug_holes+0x10c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d206      	bcs.n	8003510 <plug_holes+0x20>
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <plug_holes+0x110>)
 8003504:	f240 125d 	movw	r2, #349	; 0x15d
 8003508:	493e      	ldr	r1, [pc, #248]	; (8003604 <plug_holes+0x114>)
 800350a:	483f      	ldr	r0, [pc, #252]	; (8003608 <plug_holes+0x118>)
 800350c:	f00a fe0a 	bl	800e124 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003510:	4b3e      	ldr	r3, [pc, #248]	; (800360c <plug_holes+0x11c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	429a      	cmp	r2, r3
 8003518:	d306      	bcc.n	8003528 <plug_holes+0x38>
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <plug_holes+0x110>)
 800351c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003520:	493b      	ldr	r1, [pc, #236]	; (8003610 <plug_holes+0x120>)
 8003522:	4839      	ldr	r0, [pc, #228]	; (8003608 <plug_holes+0x118>)
 8003524:	f00a fdfe 	bl	800e124 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	791b      	ldrb	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <plug_holes+0x4e>
 8003530:	4b33      	ldr	r3, [pc, #204]	; (8003600 <plug_holes+0x110>)
 8003532:	f240 125f 	movw	r2, #351	; 0x15f
 8003536:	4937      	ldr	r1, [pc, #220]	; (8003614 <plug_holes+0x124>)
 8003538:	4833      	ldr	r0, [pc, #204]	; (8003608 <plug_holes+0x118>)
 800353a:	f00a fdf3 	bl	800e124 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003546:	d906      	bls.n	8003556 <plug_holes+0x66>
 8003548:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <plug_holes+0x110>)
 800354a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800354e:	4932      	ldr	r1, [pc, #200]	; (8003618 <plug_holes+0x128>)
 8003550:	482d      	ldr	r0, [pc, #180]	; (8003608 <plug_holes+0x118>)
 8003552:	f00a fde7 	bl	800e124 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8003556:	4b29      	ldr	r3, [pc, #164]	; (80035fc <plug_holes+0x10c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	8812      	ldrh	r2, [r2, #0]
 800355e:	4413      	add	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	429a      	cmp	r2, r3
 8003568:	d01f      	beq.n	80035aa <plug_holes+0xba>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	791b      	ldrb	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d11b      	bne.n	80035aa <plug_holes+0xba>
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <plug_holes+0x11c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	429a      	cmp	r2, r3
 800357a:	d016      	beq.n	80035aa <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <plug_holes+0x12c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	429a      	cmp	r2, r3
 8003584:	d102      	bne.n	800358c <plug_holes+0x9c>
      lfree = mem;
 8003586:	4a25      	ldr	r2, [pc, #148]	; (800361c <plug_holes+0x12c>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a19      	ldr	r2, [pc, #100]	; (80035fc <plug_holes+0x10c>)
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	1a99      	subs	r1, r3, r2
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <plug_holes+0x10c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	8812      	ldrh	r2, [r2, #0]
 80035a4:	4413      	add	r3, r2
 80035a6:	b28a      	uxth	r2, r1
 80035a8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <plug_holes+0x10c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	8852      	ldrh	r2, [r2, #2]
 80035b2:	4413      	add	r3, r2
 80035b4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d01a      	beq.n	80035f4 <plug_holes+0x104>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	791b      	ldrb	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d116      	bne.n	80035f4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <plug_holes+0x12c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d102      	bne.n	80035d6 <plug_holes+0xe6>
      lfree = pmem;
 80035d0:	4a12      	ldr	r2, [pc, #72]	; (800361c <plug_holes+0x12c>)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4a06      	ldr	r2, [pc, #24]	; (80035fc <plug_holes+0x10c>)
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	1a99      	subs	r1, r3, r2
 80035e6:	4b05      	ldr	r3, [pc, #20]	; (80035fc <plug_holes+0x10c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	8812      	ldrh	r2, [r2, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	b28a      	uxth	r2, r1
 80035f2:	805a      	strh	r2, [r3, #2]
  }
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000094 	.word	0x20000094
 8003600:	0800f060 	.word	0x0800f060
 8003604:	0800f090 	.word	0x0800f090
 8003608:	0800f0a8 	.word	0x0800f0a8
 800360c:	20000098 	.word	0x20000098
 8003610:	0800f0d0 	.word	0x0800f0d0
 8003614:	0800f0ec 	.word	0x0800f0ec
 8003618:	0800f108 	.word	0x0800f108
 800361c:	2000009c 	.word	0x2000009c

08003620 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <mem_init+0x6c>)
 8003628:	3303      	adds	r3, #3
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	461a      	mov	r2, r3
 8003630:	4b17      	ldr	r3, [pc, #92]	; (8003690 <mem_init+0x70>)
 8003632:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <mem_init+0x70>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003640:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <mem_init+0x70>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8003656:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <mem_init+0x74>)
 8003658:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <mem_init+0x74>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <mem_init+0x74>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800366a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <mem_init+0x74>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003674:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <mem_init+0x70>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a07      	ldr	r2, [pc, #28]	; (8003698 <mem_init+0x78>)
 800367c:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000230 	.word	0x20000230
 8003690:	20000094 	.word	0x20000094
 8003694:	20000098 	.word	0x20000098
 8003698:	2000009c 	.word	0x2000009c

0800369c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d043      	beq.n	8003732 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d006      	beq.n	80036c2 <mem_free+0x26>
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <mem_free+0xa4>)
 80036b6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80036ba:	4922      	ldr	r1, [pc, #136]	; (8003744 <mem_free+0xa8>)
 80036bc:	4822      	ldr	r0, [pc, #136]	; (8003748 <mem_free+0xac>)
 80036be:	f00a fd31 	bl	800e124 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <mem_free+0xb0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d304      	bcc.n	80036d6 <mem_free+0x3a>
 80036cc:	4b20      	ldr	r3, [pc, #128]	; (8003750 <mem_free+0xb4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d306      	bcc.n	80036e4 <mem_free+0x48>
 80036d6:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <mem_free+0xa4>)
 80036d8:	f240 12af 	movw	r2, #431	; 0x1af
 80036dc:	491d      	ldr	r1, [pc, #116]	; (8003754 <mem_free+0xb8>)
 80036de:	481a      	ldr	r0, [pc, #104]	; (8003748 <mem_free+0xac>)
 80036e0:	f00a fd20 	bl	800e124 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <mem_free+0xb0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d323      	bcc.n	8003736 <mem_free+0x9a>
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <mem_free+0xb4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d21e      	bcs.n	8003736 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3b08      	subs	r3, #8
 80036fc:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	791b      	ldrb	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <mem_free+0x78>
 8003706:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <mem_free+0xa4>)
 8003708:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800370c:	4912      	ldr	r1, [pc, #72]	; (8003758 <mem_free+0xbc>)
 800370e:	480e      	ldr	r0, [pc, #56]	; (8003748 <mem_free+0xac>)
 8003710:	f00a fd08 	bl	800e124 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <mem_free+0xc0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	429a      	cmp	r2, r3
 8003722:	d202      	bcs.n	800372a <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003724:	4a0d      	ldr	r2, [pc, #52]	; (800375c <mem_free+0xc0>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff fee0 	bl	80034f0 <plug_holes>
 8003730:	e002      	b.n	8003738 <mem_free+0x9c>
    return;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <mem_free+0x9c>
    return;
 8003736:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	0800f060 	.word	0x0800f060
 8003744:	0800f134 	.word	0x0800f134
 8003748:	0800f0a8 	.word	0x0800f0a8
 800374c:	20000094 	.word	0x20000094
 8003750:	20000098 	.word	0x20000098
 8003754:	0800f158 	.word	0x0800f158
 8003758:	0800f170 	.word	0x0800f170
 800375c:	2000009c 	.word	0x2000009c

08003760 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	3303      	adds	r3, #3
 8003770:	b29b      	uxth	r3, r3
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	2b0b      	cmp	r3, #11
 800377c:	d801      	bhi.n	8003782 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800377e:	230c      	movs	r3, #12
 8003780:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003788:	d901      	bls.n	800378e <mem_trim+0x2e>
    return NULL;
 800378a:	2300      	movs	r3, #0
 800378c:	e0b1      	b.n	80038f2 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800378e:	4b5b      	ldr	r3, [pc, #364]	; (80038fc <mem_trim+0x19c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d304      	bcc.n	80037a2 <mem_trim+0x42>
 8003798:	4b59      	ldr	r3, [pc, #356]	; (8003900 <mem_trim+0x1a0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d306      	bcc.n	80037b0 <mem_trim+0x50>
 80037a2:	4b58      	ldr	r3, [pc, #352]	; (8003904 <mem_trim+0x1a4>)
 80037a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037a8:	4957      	ldr	r1, [pc, #348]	; (8003908 <mem_trim+0x1a8>)
 80037aa:	4858      	ldr	r0, [pc, #352]	; (800390c <mem_trim+0x1ac>)
 80037ac:	f00a fcba 	bl	800e124 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80037b0:	4b52      	ldr	r3, [pc, #328]	; (80038fc <mem_trim+0x19c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d304      	bcc.n	80037c4 <mem_trim+0x64>
 80037ba:	4b51      	ldr	r3, [pc, #324]	; (8003900 <mem_trim+0x1a0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d301      	bcc.n	80037c8 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	e094      	b.n	80038f2 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b08      	subs	r3, #8
 80037cc:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4a4a      	ldr	r2, [pc, #296]	; (80038fc <mem_trim+0x19c>)
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	881a      	ldrh	r2, [r3, #0]
 80037dc:	8a7b      	ldrh	r3, [r7, #18]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b08      	subs	r3, #8
 80037e4:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	8a3b      	ldrh	r3, [r7, #16]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d906      	bls.n	80037fc <mem_trim+0x9c>
 80037ee:	4b45      	ldr	r3, [pc, #276]	; (8003904 <mem_trim+0x1a4>)
 80037f0:	f240 2206 	movw	r2, #518	; 0x206
 80037f4:	4946      	ldr	r1, [pc, #280]	; (8003910 <mem_trim+0x1b0>)
 80037f6:	4845      	ldr	r0, [pc, #276]	; (800390c <mem_trim+0x1ac>)
 80037f8:	f00a fc94 	bl	800e124 <iprintf>
  if (newsize > size) {
 80037fc:	887a      	ldrh	r2, [r7, #2]
 80037fe:	8a3b      	ldrh	r3, [r7, #16]
 8003800:	429a      	cmp	r2, r3
 8003802:	d901      	bls.n	8003808 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	e074      	b.n	80038f2 <mem_trim+0x192>
  }
  if (newsize == size) {
 8003808:	887a      	ldrh	r2, [r7, #2]
 800380a:	8a3b      	ldrh	r3, [r7, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d101      	bne.n	8003814 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	e06e      	b.n	80038f2 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8003814:	4b39      	ldr	r3, [pc, #228]	; (80038fc <mem_trim+0x19c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	8812      	ldrh	r2, [r2, #0]
 800381c:	4413      	add	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	791b      	ldrb	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d131      	bne.n	800388c <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800382e:	8a7a      	ldrh	r2, [r7, #18]
 8003830:	887b      	ldrh	r3, [r7, #2]
 8003832:	4413      	add	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	3308      	adds	r3, #8
 8003838:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800383a:	4b36      	ldr	r3, [pc, #216]	; (8003914 <mem_trim+0x1b4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d105      	bne.n	8003850 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8003844:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <mem_trim+0x19c>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	897b      	ldrh	r3, [r7, #10]
 800384a:	4413      	add	r3, r2
 800384c:	4a31      	ldr	r2, [pc, #196]	; (8003914 <mem_trim+0x1b4>)
 800384e:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003850:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <mem_trim+0x19c>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	897b      	ldrh	r3, [r7, #10]
 8003856:	4413      	add	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	893a      	ldrh	r2, [r7, #8]
 8003864:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8a7a      	ldrh	r2, [r7, #18]
 800386a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	897a      	ldrh	r2, [r7, #10]
 8003870:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800387a:	d039      	beq.n	80038f0 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800387c:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <mem_trim+0x19c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	8812      	ldrh	r2, [r2, #0]
 8003884:	4413      	add	r3, r2
 8003886:	897a      	ldrh	r2, [r7, #10]
 8003888:	805a      	strh	r2, [r3, #2]
 800388a:	e031      	b.n	80038f0 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	f103 0214 	add.w	r2, r3, #20
 8003892:	8a3b      	ldrh	r3, [r7, #16]
 8003894:	429a      	cmp	r2, r3
 8003896:	d82b      	bhi.n	80038f0 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003898:	8a7a      	ldrh	r2, [r7, #18]
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	4413      	add	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3308      	adds	r3, #8
 80038a2:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80038a4:	4b15      	ldr	r3, [pc, #84]	; (80038fc <mem_trim+0x19c>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	897b      	ldrh	r3, [r7, #10]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 80038ae:	4b19      	ldr	r3, [pc, #100]	; (8003914 <mem_trim+0x1b4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d202      	bcs.n	80038be <mem_trim+0x15e>
      lfree = mem2;
 80038b8:	4a16      	ldr	r2, [pc, #88]	; (8003914 <mem_trim+0x1b4>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	881a      	ldrh	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8a7a      	ldrh	r2, [r7, #18]
 80038d0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	897a      	ldrh	r2, [r7, #10]
 80038d6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80038e0:	d006      	beq.n	80038f0 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <mem_trim+0x19c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	4413      	add	r3, r2
 80038ec:	897a      	ldrh	r2, [r7, #10]
 80038ee:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80038f0:	687b      	ldr	r3, [r7, #4]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000094 	.word	0x20000094
 8003900:	20000098 	.word	0x20000098
 8003904:	0800f060 	.word	0x0800f060
 8003908:	0800f184 	.word	0x0800f184
 800390c:	0800f0a8 	.word	0x0800f0a8
 8003910:	0800f19c 	.word	0x0800f19c
 8003914:	2000009c 	.word	0x2000009c

08003918 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <mem_malloc+0x14>
    return NULL;
 8003928:	2300      	movs	r3, #0
 800392a:	e0c8      	b.n	8003abe <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	3303      	adds	r3, #3
 8003930:	b29b      	uxth	r3, r3
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	2b0b      	cmp	r3, #11
 800393c:	d801      	bhi.n	8003942 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800393e:	230c      	movs	r3, #12
 8003940:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003948:	d901      	bls.n	800394e <mem_malloc+0x36>
    return NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	e0b7      	b.n	8003abe <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800394e:	4b5e      	ldr	r3, [pc, #376]	; (8003ac8 <mem_malloc+0x1b0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	4b5d      	ldr	r3, [pc, #372]	; (8003acc <mem_malloc+0x1b4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	83fb      	strh	r3, [r7, #30]
 800395c:	e0a7      	b.n	8003aae <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800395e:	4b5b      	ldr	r3, [pc, #364]	; (8003acc <mem_malloc+0x1b4>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	8bfb      	ldrh	r3, [r7, #30]
 8003964:	4413      	add	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	791b      	ldrb	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f040 8098 	bne.w	8003aa2 <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	8bfb      	ldrh	r3, [r7, #30]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f1a3 0208 	sub.w	r2, r3, #8
 8003980:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8003982:	429a      	cmp	r2, r3
 8003984:	f0c0 808d 	bcc.w	8003aa2 <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	8bfb      	ldrh	r3, [r7, #30]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f1a3 0208 	sub.w	r2, r3, #8
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	3314      	adds	r3, #20
 800399a:	429a      	cmp	r2, r3
 800399c:	d327      	bcc.n	80039ee <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800399e:	8bfa      	ldrh	r2, [r7, #30]
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	4413      	add	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3308      	adds	r3, #8
 80039a8:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80039aa:	4b48      	ldr	r3, [pc, #288]	; (8003acc <mem_malloc+0x1b4>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	8a7b      	ldrh	r3, [r7, #18]
 80039b0:	4413      	add	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	881a      	ldrh	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8bfa      	ldrh	r2, [r7, #30]
 80039c6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	8a7a      	ldrh	r2, [r7, #18]
 80039cc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2201      	movs	r2, #1
 80039d2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80039dc:	d00a      	beq.n	80039f4 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80039de:	4b3b      	ldr	r3, [pc, #236]	; (8003acc <mem_malloc+0x1b4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	8812      	ldrh	r2, [r2, #0]
 80039e6:	4413      	add	r3, r2
 80039e8:	8a7a      	ldrh	r2, [r7, #18]
 80039ea:	805a      	strh	r2, [r3, #2]
 80039ec:	e002      	b.n	80039f4 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2201      	movs	r2, #1
 80039f2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80039f4:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <mem_malloc+0x1b0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d127      	bne.n	8003a4e <mem_malloc+0x136>
          struct mem *cur = lfree;
 80039fe:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <mem_malloc+0x1b0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003a04:	e005      	b.n	8003a12 <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8003a06:	4b31      	ldr	r3, [pc, #196]	; (8003acc <mem_malloc+0x1b4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	8812      	ldrh	r2, [r2, #0]
 8003a0e:	4413      	add	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	791b      	ldrb	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <mem_malloc+0x10c>
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <mem_malloc+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d1f0      	bne.n	8003a06 <mem_malloc+0xee>
          }
          lfree = cur;
 8003a24:	4a28      	ldr	r2, [pc, #160]	; (8003ac8 <mem_malloc+0x1b0>)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003a2a:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <mem_malloc+0x1b0>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <mem_malloc+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d00b      	beq.n	8003a4e <mem_malloc+0x136>
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <mem_malloc+0x1b0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	791b      	ldrb	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <mem_malloc+0x136>
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <mem_malloc+0x1bc>)
 8003a42:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003a46:	4924      	ldr	r1, [pc, #144]	; (8003ad8 <mem_malloc+0x1c0>)
 8003a48:	4824      	ldr	r0, [pc, #144]	; (8003adc <mem_malloc+0x1c4>)
 8003a4a:	f00a fb6b 	bl	800e124 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4413      	add	r3, r2
 8003a54:	3308      	adds	r3, #8
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <mem_malloc+0x1b8>)
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d906      	bls.n	8003a6c <mem_malloc+0x154>
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <mem_malloc+0x1bc>)
 8003a60:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8003a64:	491e      	ldr	r1, [pc, #120]	; (8003ae0 <mem_malloc+0x1c8>)
 8003a66:	481d      	ldr	r0, [pc, #116]	; (8003adc <mem_malloc+0x1c4>)
 8003a68:	f00a fb5c 	bl	800e124 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <mem_malloc+0x16c>
 8003a76:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <mem_malloc+0x1bc>)
 8003a78:	f240 22d6 	movw	r2, #726	; 0x2d6
 8003a7c:	4919      	ldr	r1, [pc, #100]	; (8003ae4 <mem_malloc+0x1cc>)
 8003a7e:	4817      	ldr	r0, [pc, #92]	; (8003adc <mem_malloc+0x1c4>)
 8003a80:	f00a fb50 	bl	800e124 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <mem_malloc+0x184>
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <mem_malloc+0x1bc>)
 8003a90:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8003a94:	4914      	ldr	r1, [pc, #80]	; (8003ae8 <mem_malloc+0x1d0>)
 8003a96:	4811      	ldr	r0, [pc, #68]	; (8003adc <mem_malloc+0x1c4>)
 8003a98:	f00a fb44 	bl	800e124 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	e00d      	b.n	8003abe <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <mem_malloc+0x1b4>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	8bfb      	ldrh	r3, [r7, #30]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003aae:	8bfa      	ldrh	r2, [r7, #30]
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	f4ff af51 	bcc.w	800395e <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	2000009c 	.word	0x2000009c
 8003acc:	20000094 	.word	0x20000094
 8003ad0:	20000098 	.word	0x20000098
 8003ad4:	0800f060 	.word	0x0800f060
 8003ad8:	0800f1bc 	.word	0x0800f1bc
 8003adc:	0800f0a8 	.word	0x0800f0a8
 8003ae0:	0800f1d8 	.word	0x0800f1d8
 8003ae4:	0800f208 	.word	0x0800f208
 8003ae8:	0800f238 	.word	0x0800f238

08003aec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	3303      	adds	r3, #3
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	e011      	b.n	8003b32 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4413      	add	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	885b      	ldrh	r3, [r3, #2]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	dbe7      	blt.n	8003b0e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003b52:	2300      	movs	r3, #0
 8003b54:	80fb      	strh	r3, [r7, #6]
 8003b56:	e009      	b.n	8003b6c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <memp_init+0x30>)
 8003b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ffc3 	bl	8003aec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	80fb      	strh	r3, [r7, #6]
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d9f2      	bls.n	8003b58 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	08010e70 	.word	0x08010e70

08003b80 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d012      	beq.n	8003bbc <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d006      	beq.n	8003bb8 <do_memp_malloc_pool+0x38>
 8003baa:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <do_memp_malloc_pool+0x48>)
 8003bac:	f240 1249 	movw	r2, #329	; 0x149
 8003bb0:	4906      	ldr	r1, [pc, #24]	; (8003bcc <do_memp_malloc_pool+0x4c>)
 8003bb2:	4807      	ldr	r0, [pc, #28]	; (8003bd0 <do_memp_malloc_pool+0x50>)
 8003bb4:	f00a fab6 	bl	800e124 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	e000      	b.n	8003bbe <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	0800f25c 	.word	0x0800f25c
 8003bcc:	0800f28c 	.word	0x0800f28c
 8003bd0:	0800f2b0 	.word	0x0800f2b0

08003bd4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d908      	bls.n	8003bf6 <memp_malloc+0x22>
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <memp_malloc+0x3c>)
 8003be6:	f240 1287 	movw	r2, #391	; 0x187
 8003bea:	490a      	ldr	r1, [pc, #40]	; (8003c14 <memp_malloc+0x40>)
 8003bec:	480a      	ldr	r0, [pc, #40]	; (8003c18 <memp_malloc+0x44>)
 8003bee:	f00a fa99 	bl	800e124 <iprintf>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e008      	b.n	8003c08 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <memp_malloc+0x48>)
 8003bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ffbe 	bl	8003b80 <do_memp_malloc_pool>
 8003c04:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003c06:	68fb      	ldr	r3, [r7, #12]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	0800f25c 	.word	0x0800f25c
 8003c14:	0800f2ec 	.word	0x0800f2ec
 8003c18:	0800f2b0 	.word	0x0800f2b0
 8003c1c:	08010e70 	.word	0x08010e70

08003c20 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d006      	beq.n	8003c42 <do_memp_free_pool+0x22>
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <do_memp_free_pool+0x40>)
 8003c36:	f240 129d 	movw	r2, #413	; 0x19d
 8003c3a:	490a      	ldr	r1, [pc, #40]	; (8003c64 <do_memp_free_pool+0x44>)
 8003c3c:	480a      	ldr	r0, [pc, #40]	; (8003c68 <do_memp_free_pool+0x48>)
 8003c3e:	f00a fa71 	bl	800e124 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	0800f25c 	.word	0x0800f25c
 8003c64:	0800f30c 	.word	0x0800f30c
 8003c68:	0800f2b0 	.word	0x0800f2b0

08003c6c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d907      	bls.n	8003c8e <memp_free+0x22>
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <memp_free+0x44>)
 8003c80:	f240 12db 	movw	r2, #475	; 0x1db
 8003c84:	490b      	ldr	r1, [pc, #44]	; (8003cb4 <memp_free+0x48>)
 8003c86:	480c      	ldr	r0, [pc, #48]	; (8003cb8 <memp_free+0x4c>)
 8003c88:	f00a fa4c 	bl	800e124 <iprintf>
 8003c8c:	e00c      	b.n	8003ca8 <memp_free+0x3c>

  if (mem == NULL) {
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <memp_free+0x50>)
 8003c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9c:	6839      	ldr	r1, [r7, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff ffbe 	bl	8003c20 <do_memp_free_pool>
 8003ca4:	e000      	b.n	8003ca8 <memp_free+0x3c>
    return;
 8003ca6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	0800f25c 	.word	0x0800f25c
 8003cb4:	0800f32c 	.word	0x0800f32c
 8003cb8:	0800f2b0 	.word	0x0800f2b0
 8003cbc:	08010e70 	.word	0x08010e70

08003cc0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <netif_add+0x20>
 8003ce4:	4b1f      	ldr	r3, [pc, #124]	; (8003d64 <netif_add+0x94>)
 8003ce6:	22fb      	movs	r2, #251	; 0xfb
 8003ce8:	491f      	ldr	r1, [pc, #124]	; (8003d68 <netif_add+0x98>)
 8003cea:	4820      	ldr	r0, [pc, #128]	; (8003d6c <netif_add+0x9c>)
 8003cec:	f00a fa1a 	bl	800e124 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <netif_add+0xa0>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	b2d1      	uxtb	r1, r2
 8003d20:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <netif_add+0xa0>)
 8003d22:	7011      	strb	r1, [r2, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f81e 	bl	8003d78 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	4798      	blx	r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <netif_add+0x7c>
    return NULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e007      	b.n	8003d5c <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <netif_add+0xa4>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8003d54:	4a07      	ldr	r2, [pc, #28]	; (8003d74 <netif_add+0xa4>)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	0800f348 	.word	0x0800f348
 8003d68:	0800f37c 	.word	0x0800f37c
 8003d6c:	0800f394 	.word	0x0800f394
 8003d70:	200000c4 	.word	0x200000c4
 8003d74:	20003738 	.word	0x20003738

08003d78 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <netif_set_addr+0x1c>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10c      	bne.n	8003dae <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f81a 	bl	8003dd0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f862 	bl	8003e68 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f84a 	bl	8003e40 <netif_set_gw>
 8003dac:	e00b      	b.n	8003dc6 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f859 	bl	8003e68 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003db6:	6839      	ldr	r1, [r7, #0]
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f841 	bl	8003e40 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f805 	bl	8003dd0 <netif_set_ipaddr>
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <netif_set_ipaddr+0x18>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	e002      	b.n	8003dee <netif_set_ipaddr+0x1e>
 8003de8:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <netif_set_ipaddr+0x6c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d01c      	beq.n	8003e34 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	f107 020c 	add.w	r2, r7, #12
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f002 fae9 	bl	80063dc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	f107 020c 	add.w	r2, r7, #12
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f006 fdd5 	bl	800a9c4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <netif_set_ipaddr+0x56>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	e000      	b.n	8003e28 <netif_set_ipaddr+0x58>
 8003e26:	2300      	movs	r3, #0
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f861 	bl	8003ef6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	08010ed4 	.word	0x08010ed4

08003e40 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <netif_set_gw+0x16>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	e000      	b.n	8003e58 <netif_set_gw+0x18>
 8003e56:	2300      	movs	r3, #0
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <netif_set_netmask+0x16>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	e000      	b.n	8003e80 <netif_set_netmask+0x18>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8003e98:	4a04      	ldr	r2, [pc, #16]	; (8003eac <netif_set_default+0x1c>)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	2000373c 	.word	0x2000373c

08003eb0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f804 	bl	8003ef6 <netif_issue_reports>
    }
  }
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d011      	beq.n	8003f30 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00c      	beq.n	8003f30 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f007 fc7e 	bl	800b82c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d012      	beq.n	8003f74 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f007 f822 	bl	800afb8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <pbuf_free_ooseq+0x40>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <pbuf_free_ooseq+0x44>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	e00f      	b.n	8003fb0 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 ff2e 	bl	8005dfe <tcp_segs_free>
      pcb->ooseq = NULL;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8003fa8:	e005      	b.n	8003fb6 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ec      	bne.n	8003f90 <pbuf_free_ooseq+0x14>
    }
  }
}
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20003740 	.word	0x20003740
 8003fc0:	20003748 	.word	0x20003748

08003fc4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <pbuf_pool_is_empty+0x14>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	20003740 	.word	0x20003740

08003fdc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	71fb      	strb	r3, [r7, #7]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	80bb      	strh	r3, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d81c      	bhi.n	800402e <pbuf_alloc+0x52>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <pbuf_alloc+0x20>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	08004011 	.word	0x08004011
 8004000:	08004017 	.word	0x08004017
 8004004:	0800401d 	.word	0x0800401d
 8004008:	08004023 	.word	0x08004023
 800400c:	08004029 	.word	0x08004029
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004010:	2336      	movs	r3, #54	; 0x36
 8004012:	82fb      	strh	r3, [r7, #22]
    break;
 8004014:	e014      	b.n	8004040 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004016:	2322      	movs	r3, #34	; 0x22
 8004018:	82fb      	strh	r3, [r7, #22]
    break;
 800401a:	e011      	b.n	8004040 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800401c:	230e      	movs	r3, #14
 800401e:	82fb      	strh	r3, [r7, #22]
    break;
 8004020:	e00e      	b.n	8004040 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004022:	2300      	movs	r3, #0
 8004024:	82fb      	strh	r3, [r7, #22]
    break;
 8004026:	e00b      	b.n	8004040 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	82fb      	strh	r3, [r7, #22]
    break;
 800402c:	e008      	b.n	8004040 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800402e:	4ba5      	ldr	r3, [pc, #660]	; (80042c4 <pbuf_alloc+0x2e8>)
 8004030:	f44f 728b 	mov.w	r2, #278	; 0x116
 8004034:	49a4      	ldr	r1, [pc, #656]	; (80042c8 <pbuf_alloc+0x2ec>)
 8004036:	48a5      	ldr	r0, [pc, #660]	; (80042cc <pbuf_alloc+0x2f0>)
 8004038:	f00a f874 	bl	800e124 <iprintf>
    return NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	e15d      	b.n	80042fc <pbuf_alloc+0x320>
  }

  switch (type) {
 8004040:	79bb      	ldrb	r3, [r7, #6]
 8004042:	2b03      	cmp	r3, #3
 8004044:	f200 8134 	bhi.w	80042b0 <pbuf_alloc+0x2d4>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <pbuf_alloc+0x74>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	080041f1 	.word	0x080041f1
 8004054:	0800427d 	.word	0x0800427d
 8004058:	0800427d 	.word	0x0800427d
 800405c:	08004061 	.word	0x08004061
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004060:	2008      	movs	r0, #8
 8004062:	f7ff fdb7 	bl	8003bd4 <memp_malloc>
 8004066:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800406e:	f7ff ffa9 	bl	8003fc4 <pbuf_pool_is_empty>
      return NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	e142      	b.n	80042fc <pbuf_alloc+0x320>
    }
    p->type = type;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	79ba      	ldrb	r2, [r7, #6]
 800407a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004082:	8afb      	ldrh	r3, [r7, #22]
 8004084:	3310      	adds	r3, #16
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	3303      	adds	r3, #3
 800408c:	f023 0303 	bic.w	r3, r3, #3
 8004090:	461a      	mov	r2, r3
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <pbuf_alloc+0xd4>
 80040a2:	4b88      	ldr	r3, [pc, #544]	; (80042c4 <pbuf_alloc+0x2e8>)
 80040a4:	f240 1229 	movw	r2, #297	; 0x129
 80040a8:	4989      	ldr	r1, [pc, #548]	; (80042d0 <pbuf_alloc+0x2f4>)
 80040aa:	4888      	ldr	r0, [pc, #544]	; (80042cc <pbuf_alloc+0x2f0>)
 80040ac:	f00a f83a 	bl	800e124 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	88ba      	ldrh	r2, [r7, #4]
 80040b4:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80040b6:	8afb      	ldrh	r3, [r7, #22]
 80040b8:	3303      	adds	r3, #3
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80040c2:	88bb      	ldrh	r3, [r7, #4]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bf28      	it	cs
 80040c8:	4613      	movcs	r3, r2
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	8952      	ldrh	r2, [r2, #10]
 80040d8:	441a      	add	r2, r3
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d906      	bls.n	80040f2 <pbuf_alloc+0x116>
 80040e4:	4b77      	ldr	r3, [pc, #476]	; (80042c4 <pbuf_alloc+0x2e8>)
 80040e6:	f44f 7298 	mov.w	r2, #304	; 0x130
 80040ea:	497a      	ldr	r1, [pc, #488]	; (80042d4 <pbuf_alloc+0x2f8>)
 80040ec:	4877      	ldr	r0, [pc, #476]	; (80042cc <pbuf_alloc+0x2f0>)
 80040ee:	f00a f819 	bl	800e124 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80040f2:	8afb      	ldrh	r3, [r7, #22]
 80040f4:	3303      	adds	r3, #3
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80040fe:	d106      	bne.n	800410e <pbuf_alloc+0x132>
 8004100:	4b70      	ldr	r3, [pc, #448]	; (80042c4 <pbuf_alloc+0x2e8>)
 8004102:	f44f 7299 	mov.w	r2, #306	; 0x132
 8004106:	4974      	ldr	r1, [pc, #464]	; (80042d8 <pbuf_alloc+0x2fc>)
 8004108:	4870      	ldr	r0, [pc, #448]	; (80042cc <pbuf_alloc+0x2f0>)
 800410a:	f00a f80b 	bl	800e124 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2201      	movs	r2, #1
 8004112:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8004118:	88bb      	ldrh	r3, [r7, #4]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	8952      	ldrh	r2, [r2, #10]
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8004122:	e061      	b.n	80041e8 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004124:	2008      	movs	r0, #8
 8004126:	f7ff fd55 	bl	8003bd4 <memp_malloc>
 800412a:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8004132:	f7ff ff47 	bl	8003fc4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8004136:	69f8      	ldr	r0, [r7, #28]
 8004138:	f000 fac2 	bl	80046c0 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800413c:	2300      	movs	r3, #0
 800413e:	e0dd      	b.n	80042fc <pbuf_alloc+0x320>
      }
      q->type = type;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	79ba      	ldrb	r2, [r7, #6]
 8004144:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800415e:	4293      	cmp	r3, r2
 8004160:	dd06      	ble.n	8004170 <pbuf_alloc+0x194>
 8004162:	4b58      	ldr	r3, [pc, #352]	; (80042c4 <pbuf_alloc+0x2e8>)
 8004164:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8004168:	495c      	ldr	r1, [pc, #368]	; (80042dc <pbuf_alloc+0x300>)
 800416a:	4858      	ldr	r0, [pc, #352]	; (80042cc <pbuf_alloc+0x2f0>)
 800416c:	f009 ffda 	bl	800e124 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004180:	bf28      	it	cs
 8004182:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f103 0210 	add.w	r2, r3, #16
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d006      	beq.n	80041b0 <pbuf_alloc+0x1d4>
 80041a2:	4b48      	ldr	r3, [pc, #288]	; (80042c4 <pbuf_alloc+0x2e8>)
 80041a4:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80041a8:	494d      	ldr	r1, [pc, #308]	; (80042e0 <pbuf_alloc+0x304>)
 80041aa:	4848      	ldr	r0, [pc, #288]	; (80042cc <pbuf_alloc+0x2f0>)
 80041ac:	f009 ffba 	bl	800e124 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	8952      	ldrh	r2, [r2, #10]
 80041b8:	441a      	add	r2, r3
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d906      	bls.n	80041d2 <pbuf_alloc+0x1f6>
 80041c4:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <pbuf_alloc+0x2e8>)
 80041c6:	f240 1255 	movw	r2, #341	; 0x155
 80041ca:	4942      	ldr	r1, [pc, #264]	; (80042d4 <pbuf_alloc+0x2f8>)
 80041cc:	483f      	ldr	r0, [pc, #252]	; (80042cc <pbuf_alloc+0x2f0>)
 80041ce:	f009 ffa9 	bl	800e124 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	895b      	ldrh	r3, [r3, #10]
 80041dc:	461a      	mov	r2, r3
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	dc9a      	bgt.n	8004124 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80041ee:	e07e      	b.n	80042ee <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80041f0:	8afb      	ldrh	r3, [r7, #22]
 80041f2:	3313      	adds	r3, #19
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	88bb      	ldrh	r3, [r7, #4]
 80041fe:	3303      	adds	r3, #3
 8004200:	b29b      	uxth	r3, r3
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	b29b      	uxth	r3, r3
 8004208:	4413      	add	r3, r2
 800420a:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800420c:	897a      	ldrh	r2, [r7, #10]
 800420e:	88bb      	ldrh	r3, [r7, #4]
 8004210:	3303      	adds	r3, #3
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	429a      	cmp	r2, r3
 8004218:	d201      	bcs.n	800421e <pbuf_alloc+0x242>
        return NULL;
 800421a:	2300      	movs	r3, #0
 800421c:	e06e      	b.n	80042fc <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800421e:	897b      	ldrh	r3, [r7, #10]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fb79 	bl	8003918 <mem_malloc>
 8004226:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <pbuf_alloc+0x256>
      return NULL;
 800422e:	2300      	movs	r3, #0
 8004230:	e064      	b.n	80042fc <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8004232:	8afb      	ldrh	r3, [r7, #22]
 8004234:	3310      	adds	r3, #16
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	3303      	adds	r3, #3
 800423c:	f023 0303 	bic.w	r3, r3, #3
 8004240:	461a      	mov	r2, r3
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	88ba      	ldrh	r2, [r7, #4]
 800424a:	811a      	strh	r2, [r3, #8]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	891a      	ldrh	r2, [r3, #8]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
    p->type = type;
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	79ba      	ldrb	r2, [r7, #6]
 800425e:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d03f      	beq.n	80042ec <pbuf_alloc+0x310>
 800426c:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <pbuf_alloc+0x2e8>)
 800426e:	f240 1277 	movw	r2, #375	; 0x177
 8004272:	491c      	ldr	r1, [pc, #112]	; (80042e4 <pbuf_alloc+0x308>)
 8004274:	4815      	ldr	r0, [pc, #84]	; (80042cc <pbuf_alloc+0x2f0>)
 8004276:	f009 ff55 	bl	800e124 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800427a:	e037      	b.n	80042ec <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800427c:	2007      	movs	r0, #7
 800427e:	f7ff fca9 	bl	8003bd4 <memp_malloc>
 8004282:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	e036      	b.n	80042fc <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	2200      	movs	r2, #0
 8004292:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	88ba      	ldrh	r2, [r7, #4]
 8004298:	811a      	strh	r2, [r3, #8]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	891a      	ldrh	r2, [r3, #8]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
    p->type = type;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	79ba      	ldrb	r2, [r7, #6]
 80042ac:	731a      	strb	r2, [r3, #12]
    break;
 80042ae:	e01e      	b.n	80042ee <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <pbuf_alloc+0x2e8>)
 80042b2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80042b6:	490c      	ldr	r1, [pc, #48]	; (80042e8 <pbuf_alloc+0x30c>)
 80042b8:	4804      	ldr	r0, [pc, #16]	; (80042cc <pbuf_alloc+0x2f0>)
 80042ba:	f009 ff33 	bl	800e124 <iprintf>
    return NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	e01c      	b.n	80042fc <pbuf_alloc+0x320>
 80042c2:	bf00      	nop
 80042c4:	0800f3bc 	.word	0x0800f3bc
 80042c8:	0800f3ec 	.word	0x0800f3ec
 80042cc:	0800f408 	.word	0x0800f408
 80042d0:	0800f430 	.word	0x0800f430
 80042d4:	0800f460 	.word	0x0800f460
 80042d8:	0800f494 	.word	0x0800f494
 80042dc:	0800f4c8 	.word	0x0800f4c8
 80042e0:	0800f4dc 	.word	0x0800f4dc
 80042e4:	0800f50c 	.word	0x0800f50c
 80042e8:	0800f538 	.word	0x0800f538
    break;
 80042ec:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2201      	movs	r2, #1
 80042f2:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2200      	movs	r2, #0
 80042f8:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80042fa:	69fb      	ldr	r3, [r7, #28]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4603      	mov	r3, r0
 800430e:	71fb      	strb	r3, [r7, #7]
 8004310:	460b      	mov	r3, r1
 8004312:	80bb      	strh	r3, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	2b04      	cmp	r3, #4
 800431c:	d81b      	bhi.n	8004356 <pbuf_alloced_custom+0x52>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <pbuf_alloced_custom+0x20>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004339 	.word	0x08004339
 8004328:	0800433f 	.word	0x0800433f
 800432c:	08004345 	.word	0x08004345
 8004330:	0800434b 	.word	0x0800434b
 8004334:	08004351 	.word	0x08004351
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004338:	2336      	movs	r3, #54	; 0x36
 800433a:	81fb      	strh	r3, [r7, #14]
    break;
 800433c:	e014      	b.n	8004368 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800433e:	2322      	movs	r3, #34	; 0x22
 8004340:	81fb      	strh	r3, [r7, #14]
    break;
 8004342:	e011      	b.n	8004368 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004344:	230e      	movs	r3, #14
 8004346:	81fb      	strh	r3, [r7, #14]
    break;
 8004348:	e00e      	b.n	8004368 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800434a:	2300      	movs	r3, #0
 800434c:	81fb      	strh	r3, [r7, #14]
    break;
 800434e:	e00b      	b.n	8004368 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	81fb      	strh	r3, [r7, #14]
    break;
 8004354:	e008      	b.n	8004368 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <pbuf_alloced_custom+0xc8>)
 8004358:	f240 12c5 	movw	r2, #453	; 0x1c5
 800435c:	491c      	ldr	r1, [pc, #112]	; (80043d0 <pbuf_alloced_custom+0xcc>)
 800435e:	481d      	ldr	r0, [pc, #116]	; (80043d4 <pbuf_alloced_custom+0xd0>)
 8004360:	f009 fee0 	bl	800e124 <iprintf>
    return NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	e02d      	b.n	80043c4 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004368:	89fb      	ldrh	r3, [r7, #14]
 800436a:	3303      	adds	r3, #3
 800436c:	f023 0203 	bic.w	r2, r3, #3
 8004370:	88bb      	ldrh	r3, [r7, #4]
 8004372:	441a      	add	r2, r3
 8004374:	8bbb      	ldrh	r3, [r7, #28]
 8004376:	429a      	cmp	r2, r3
 8004378:	d901      	bls.n	800437e <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	e022      	b.n	80043c4 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800438a:	89fb      	ldrh	r3, [r7, #14]
 800438c:	3303      	adds	r3, #3
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	441a      	add	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	e002      	b.n	80043a2 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2200      	movs	r2, #0
 80043a0:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2202      	movs	r2, #2
 80043a6:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	88ba      	ldrh	r2, [r7, #4]
 80043ac:	811a      	strh	r2, [r3, #8]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	891a      	ldrh	r2, [r3, #8]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	79ba      	ldrb	r2, [r7, #6]
 80043ba:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2201      	movs	r2, #1
 80043c0:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80043c2:	683b      	ldr	r3, [r7, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	0800f3bc 	.word	0x0800f3bc
 80043d0:	0800f554 	.word	0x0800f554
 80043d4:	0800f408 	.word	0x0800f408

080043d8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <pbuf_realloc+0x20>
 80043ea:	4b4b      	ldr	r3, [pc, #300]	; (8004518 <pbuf_realloc+0x140>)
 80043ec:	f240 12f3 	movw	r2, #499	; 0x1f3
 80043f0:	494a      	ldr	r1, [pc, #296]	; (800451c <pbuf_realloc+0x144>)
 80043f2:	484b      	ldr	r0, [pc, #300]	; (8004520 <pbuf_realloc+0x148>)
 80043f4:	f009 fe96 	bl	800e124 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	7b1b      	ldrb	r3, [r3, #12]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d012      	beq.n	8004426 <pbuf_realloc+0x4e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	7b1b      	ldrb	r3, [r3, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d00e      	beq.n	8004426 <pbuf_realloc+0x4e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	7b1b      	ldrb	r3, [r3, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <pbuf_realloc+0x4e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7b1b      	ldrb	r3, [r3, #12]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d006      	beq.n	8004426 <pbuf_realloc+0x4e>
 8004418:	4b3f      	ldr	r3, [pc, #252]	; (8004518 <pbuf_realloc+0x140>)
 800441a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800441e:	4941      	ldr	r1, [pc, #260]	; (8004524 <pbuf_realloc+0x14c>)
 8004420:	483f      	ldr	r0, [pc, #252]	; (8004520 <pbuf_realloc+0x148>)
 8004422:	f009 fe7f 	bl	800e124 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	891b      	ldrh	r3, [r3, #8]
 800442a:	887a      	ldrh	r2, [r7, #2]
 800442c:	429a      	cmp	r2, r3
 800442e:	d26f      	bcs.n	8004510 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8004430:	887b      	ldrh	r3, [r7, #2]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	8912      	ldrh	r2, [r2, #8]
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800443a:	887b      	ldrh	r3, [r7, #2]
 800443c:	827b      	strh	r3, [r7, #18]
  q = p;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004442:	e025      	b.n	8004490 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	895b      	ldrh	r3, [r3, #10]
 8004448:	8a7a      	ldrh	r2, [r7, #18]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004454:	4293      	cmp	r3, r2
 8004456:	dd06      	ble.n	8004466 <pbuf_realloc+0x8e>
 8004458:	4b2f      	ldr	r3, [pc, #188]	; (8004518 <pbuf_realloc+0x140>)
 800445a:	f240 220b 	movw	r2, #523	; 0x20b
 800445e:	4932      	ldr	r1, [pc, #200]	; (8004528 <pbuf_realloc+0x150>)
 8004460:	482f      	ldr	r0, [pc, #188]	; (8004520 <pbuf_realloc+0x148>)
 8004462:	f009 fe5f 	bl	800e124 <iprintf>
    q->tot_len += (u16_t)grow;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	891a      	ldrh	r2, [r3, #8]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	b29b      	uxth	r3, r3
 800446e:	4413      	add	r3, r2
 8004470:	b29a      	uxth	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <pbuf_realloc+0xb8>
 8004482:	4b25      	ldr	r3, [pc, #148]	; (8004518 <pbuf_realloc+0x140>)
 8004484:	f240 220f 	movw	r2, #527	; 0x20f
 8004488:	4928      	ldr	r1, [pc, #160]	; (800452c <pbuf_realloc+0x154>)
 800448a:	4825      	ldr	r0, [pc, #148]	; (8004520 <pbuf_realloc+0x148>)
 800448c:	f009 fe4a 	bl	800e124 <iprintf>
  while (rem_len > q->len) {
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	895b      	ldrh	r3, [r3, #10]
 8004494:	8a7a      	ldrh	r2, [r7, #18]
 8004496:	429a      	cmp	r2, r3
 8004498:	d8d4      	bhi.n	8004444 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	7b1b      	ldrb	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d122      	bne.n	80044e8 <pbuf_realloc+0x110>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	895b      	ldrh	r3, [r3, #10]
 80044a6:	8a7a      	ldrh	r2, [r7, #18]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d01d      	beq.n	80044e8 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	7b5b      	ldrb	r3, [r3, #13]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d117      	bne.n	80044e8 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	461a      	mov	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	8a7b      	ldrh	r3, [r7, #18]
 80044c6:	4413      	add	r3, r2
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	4619      	mov	r1, r3
 80044cc:	6978      	ldr	r0, [r7, #20]
 80044ce:	f7ff f947 	bl	8003760 <mem_trim>
 80044d2:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <pbuf_realloc+0x110>
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <pbuf_realloc+0x140>)
 80044dc:	f240 221d 	movw	r2, #541	; 0x21d
 80044e0:	4913      	ldr	r1, [pc, #76]	; (8004530 <pbuf_realloc+0x158>)
 80044e2:	480f      	ldr	r0, [pc, #60]	; (8004520 <pbuf_realloc+0x148>)
 80044e4:	f009 fe1e 	bl	800e124 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	8a7a      	ldrh	r2, [r7, #18]
 80044ec:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	895a      	ldrh	r2, [r3, #10]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f8dc 	bl	80046c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	e000      	b.n	8004512 <pbuf_realloc+0x13a>
    return;
 8004510:	bf00      	nop

}
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	0800f3bc 	.word	0x0800f3bc
 800451c:	0800f578 	.word	0x0800f578
 8004520:	0800f408 	.word	0x0800f408
 8004524:	0800f590 	.word	0x0800f590
 8004528:	0800f5ac 	.word	0x0800f5ac
 800452c:	0800f5c0 	.word	0x0800f5c0
 8004530:	0800f5d8 	.word	0x0800f5d8

08004534 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	807b      	strh	r3, [r7, #2]
 8004540:	4613      	mov	r3, r2
 8004542:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <pbuf_header_impl+0x24>
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <pbuf_header_impl+0x130>)
 800454c:	f240 223f 	movw	r2, #575	; 0x23f
 8004550:	4945      	ldr	r1, [pc, #276]	; (8004668 <pbuf_header_impl+0x134>)
 8004552:	4846      	ldr	r0, [pc, #280]	; (800466c <pbuf_header_impl+0x138>)
 8004554:	f009 fde6 	bl	800e124 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8004558:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <pbuf_header_impl+0x32>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <pbuf_header_impl+0x36>
    return 0;
 8004566:	2300      	movs	r3, #0
 8004568:	e078      	b.n	800465c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800456a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800456e:	2b00      	cmp	r3, #0
 8004570:	da10      	bge.n	8004594 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8004572:	887b      	ldrh	r3, [r7, #2]
 8004574:	425b      	negs	r3, r3
 8004576:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	895b      	ldrh	r3, [r3, #10]
 800457c:	89fa      	ldrh	r2, [r7, #14]
 800457e:	429a      	cmp	r2, r3
 8004580:	d90a      	bls.n	8004598 <pbuf_header_impl+0x64>
 8004582:	4b38      	ldr	r3, [pc, #224]	; (8004664 <pbuf_header_impl+0x130>)
 8004584:	f240 2247 	movw	r2, #583	; 0x247
 8004588:	4939      	ldr	r1, [pc, #228]	; (8004670 <pbuf_header_impl+0x13c>)
 800458a:	4838      	ldr	r0, [pc, #224]	; (800466c <pbuf_header_impl+0x138>)
 800458c:	f009 fdca 	bl	800e124 <iprintf>
 8004590:	2301      	movs	r3, #1
 8004592:	e063      	b.n	800465c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8004594:	887b      	ldrh	r3, [r7, #2]
 8004596:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	7b1b      	ldrb	r3, [r3, #12]
 800459c:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80045a4:	89bb      	ldrh	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <pbuf_header_impl+0x7c>
 80045aa:	89bb      	ldrh	r3, [r7, #12]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d112      	bne.n	80045d6 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045b8:	425b      	negs	r3, r3
 80045ba:	441a      	add	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3310      	adds	r3, #16
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d238      	bcs.n	800463e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e042      	b.n	800465c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80045d6:	89bb      	ldrh	r3, [r7, #12]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d002      	beq.n	80045e2 <pbuf_header_impl+0xae>
 80045dc:	89bb      	ldrh	r3, [r7, #12]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d124      	bne.n	800462c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80045e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	da0d      	bge.n	8004606 <pbuf_header_impl+0xd2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	895b      	ldrh	r3, [r3, #10]
 80045ee:	89fa      	ldrh	r2, [r7, #14]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d808      	bhi.n	8004606 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045fc:	425b      	negs	r3, r3
 80045fe:	441a      	add	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	e011      	b.n	800462a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8004606:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800460a:	2b00      	cmp	r3, #0
 800460c:	dd0b      	ble.n	8004626 <pbuf_header_impl+0xf2>
 800460e:	787b      	ldrb	r3, [r7, #1]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800461c:	425b      	negs	r3, r3
 800461e:	441a      	add	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	e001      	b.n	800462a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004626:	2301      	movs	r3, #1
 8004628:	e018      	b.n	800465c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800462a:	e008      	b.n	800463e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <pbuf_header_impl+0x130>)
 800462e:	f240 2277 	movw	r2, #631	; 0x277
 8004632:	4910      	ldr	r1, [pc, #64]	; (8004674 <pbuf_header_impl+0x140>)
 8004634:	480d      	ldr	r0, [pc, #52]	; (800466c <pbuf_header_impl+0x138>)
 8004636:	f009 fd75 	bl	800e124 <iprintf>
    return 1;
 800463a:	2301      	movs	r3, #1
 800463c:	e00e      	b.n	800465c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	895a      	ldrh	r2, [r3, #10]
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	4413      	add	r3, r2
 8004646:	b29a      	uxth	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	891a      	ldrh	r2, [r3, #8]
 8004650:	887b      	ldrh	r3, [r7, #2]
 8004652:	4413      	add	r3, r2
 8004654:	b29a      	uxth	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	0800f3bc 	.word	0x0800f3bc
 8004668:	0800f5f4 	.word	0x0800f5f4
 800466c:	0800f408 	.word	0x0800f408
 8004670:	0800f600 	.word	0x0800f600
 8004674:	0800f620 	.word	0x0800f620

08004678 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8004684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004688:	2200      	movs	r2, #0
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff51 	bl	8004534 <pbuf_header_impl>
 8004692:	4603      	mov	r3, r0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80046a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046ac:	2201      	movs	r2, #1
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ff3f 	bl	8004534 <pbuf_header_impl>
 80046b6:	4603      	mov	r3, r0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <pbuf_free+0x22>
 80046d4:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <pbuf_free+0x110>)
 80046d6:	f240 22d2 	movw	r2, #722	; 0x2d2
 80046da:	493e      	ldr	r1, [pc, #248]	; (80047d4 <pbuf_free+0x114>)
 80046dc:	483e      	ldr	r0, [pc, #248]	; (80047d8 <pbuf_free+0x118>)
 80046de:	f009 fd21 	bl	800e124 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e070      	b.n	80047c8 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	7b1b      	ldrb	r3, [r3, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d012      	beq.n	8004714 <pbuf_free+0x54>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	7b1b      	ldrb	r3, [r3, #12]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d00e      	beq.n	8004714 <pbuf_free+0x54>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	7b1b      	ldrb	r3, [r3, #12]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d00a      	beq.n	8004714 <pbuf_free+0x54>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	7b1b      	ldrb	r3, [r3, #12]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d006      	beq.n	8004714 <pbuf_free+0x54>
 8004706:	4b32      	ldr	r3, [pc, #200]	; (80047d0 <pbuf_free+0x110>)
 8004708:	f240 22de 	movw	r2, #734	; 0x2de
 800470c:	4933      	ldr	r1, [pc, #204]	; (80047dc <pbuf_free+0x11c>)
 800470e:	4832      	ldr	r0, [pc, #200]	; (80047d8 <pbuf_free+0x118>)
 8004710:	f009 fd08 	bl	800e124 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004718:	e052      	b.n	80047c0 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	89db      	ldrh	r3, [r3, #14]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <pbuf_free+0x70>
 8004722:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <pbuf_free+0x110>)
 8004724:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004728:	492d      	ldr	r1, [pc, #180]	; (80047e0 <pbuf_free+0x120>)
 800472a:	482b      	ldr	r0, [pc, #172]	; (80047d8 <pbuf_free+0x118>)
 800472c:	f009 fcfa 	bl	800e124 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	89db      	ldrh	r3, [r3, #14]
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	81da      	strh	r2, [r3, #14]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	89db      	ldrh	r3, [r3, #14]
 8004740:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004742:	8abb      	ldrh	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d139      	bne.n	80047bc <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	7b1b      	ldrb	r3, [r3, #12]
 8004752:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7b5b      	ldrb	r3, [r3, #13]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d011      	beq.n	8004784 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <pbuf_free+0xba>
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <pbuf_free+0x110>)
 800476e:	f240 22f9 	movw	r2, #761	; 0x2f9
 8004772:	491c      	ldr	r1, [pc, #112]	; (80047e4 <pbuf_free+0x124>)
 8004774:	4818      	ldr	r0, [pc, #96]	; (80047d8 <pbuf_free+0x118>)
 8004776:	f009 fcd5 	bl	800e124 <iprintf>
        pc->custom_free_function(p);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
 8004782:	e015      	b.n	80047b0 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8004784:	89fb      	ldrh	r3, [r7, #14]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d104      	bne.n	8004794 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	2008      	movs	r0, #8
 800478e:	f7ff fa6d 	bl	8003c6c <memp_free>
 8004792:	e00d      	b.n	80047b0 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004794:	89fb      	ldrh	r3, [r7, #14]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d002      	beq.n	80047a0 <pbuf_free+0xe0>
 800479a:	89fb      	ldrh	r3, [r7, #14]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d104      	bne.n	80047aa <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	2007      	movs	r0, #7
 80047a4:	f7ff fa62 	bl	8003c6c <memp_free>
 80047a8:	e002      	b.n	80047b0 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fe ff76 	bl	800369c <mem_free>
        }
      }
      count++;
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	3301      	adds	r3, #1
 80047b4:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	e001      	b.n	80047c0 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1a9      	bne.n	800471a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80047c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	0800f3bc 	.word	0x0800f3bc
 80047d4:	0800f5f4 	.word	0x0800f5f4
 80047d8:	0800f408 	.word	0x0800f408
 80047dc:	0800f630 	.word	0x0800f630
 80047e0:	0800f648 	.word	0x0800f648
 80047e4:	0800f660 	.word	0x0800f660

080047e8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80047f4:	e005      	b.n	8004802 <pbuf_clen+0x1a>
    ++len;
 80047f6:	89fb      	ldrh	r3, [r7, #14]
 80047f8:	3301      	adds	r3, #1
 80047fa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f6      	bne.n	80047f6 <pbuf_clen+0xe>
  }
  return len;
 8004808:	89fb      	ldrh	r3, [r7, #14]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	89db      	ldrh	r3, [r3, #14]
 800482a:	3301      	adds	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	89db      	ldrh	r3, [r3, #14]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <pbuf_ref+0x30>
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <pbuf_ref+0x38>)
 800483c:	f240 3239 	movw	r2, #825	; 0x339
 8004840:	4904      	ldr	r1, [pc, #16]	; (8004854 <pbuf_ref+0x3c>)
 8004842:	4805      	ldr	r0, [pc, #20]	; (8004858 <pbuf_ref+0x40>)
 8004844:	f009 fc6e 	bl	800e124 <iprintf>
  }
}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	0800f3bc 	.word	0x0800f3bc
 8004854:	0800f684 	.word	0x0800f684
 8004858:	0800f408 	.word	0x0800f408

0800485c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <pbuf_cat+0x16>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d107      	bne.n	8004882 <pbuf_cat+0x26>
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <pbuf_cat+0x98>)
 8004874:	f240 324d 	movw	r2, #845	; 0x34d
 8004878:	491f      	ldr	r1, [pc, #124]	; (80048f8 <pbuf_cat+0x9c>)
 800487a:	4820      	ldr	r0, [pc, #128]	; (80048fc <pbuf_cat+0xa0>)
 800487c:	f009 fc52 	bl	800e124 <iprintf>
 8004880:	e034      	b.n	80048ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e00a      	b.n	800489e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	891a      	ldrh	r2, [r3, #8]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	891b      	ldrh	r3, [r3, #8]
 8004890:	4413      	add	r3, r2
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	891a      	ldrh	r2, [r3, #8]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	895b      	ldrh	r3, [r3, #10]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d006      	beq.n	80048c0 <pbuf_cat+0x64>
 80048b2:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <pbuf_cat+0x98>)
 80048b4:	f240 3255 	movw	r2, #853	; 0x355
 80048b8:	4911      	ldr	r1, [pc, #68]	; (8004900 <pbuf_cat+0xa4>)
 80048ba:	4810      	ldr	r0, [pc, #64]	; (80048fc <pbuf_cat+0xa0>)
 80048bc:	f009 fc32 	bl	800e124 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d006      	beq.n	80048d6 <pbuf_cat+0x7a>
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <pbuf_cat+0x98>)
 80048ca:	f240 3256 	movw	r2, #854	; 0x356
 80048ce:	490d      	ldr	r1, [pc, #52]	; (8004904 <pbuf_cat+0xa8>)
 80048d0:	480a      	ldr	r0, [pc, #40]	; (80048fc <pbuf_cat+0xa0>)
 80048d2:	f009 fc27 	bl	800e124 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	891a      	ldrh	r2, [r3, #8]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	891b      	ldrh	r3, [r3, #8]
 80048de:	4413      	add	r3, r2
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	0800f3bc 	.word	0x0800f3bc
 80048f8:	0800f698 	.word	0x0800f698
 80048fc:	0800f408 	.word	0x0800f408
 8004900:	0800f6d0 	.word	0x0800f6d0
 8004904:	0800f700 	.word	0x0800f700

08004908 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8004912:	6839      	ldr	r1, [r7, #0]
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff ffa1 	bl	800485c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800491a:	6838      	ldr	r0, [r7, #0]
 800491c:	f7ff ff7c 	bl	8004818 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8004932:	2300      	movs	r3, #0
 8004934:	81fb      	strh	r3, [r7, #14]
 8004936:	2300      	movs	r3, #0
 8004938:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <pbuf_copy+0x2a>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <pbuf_copy+0x2a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	891a      	ldrh	r2, [r3, #8]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	891b      	ldrh	r3, [r3, #8]
 800494e:	429a      	cmp	r2, r3
 8004950:	d209      	bcs.n	8004966 <pbuf_copy+0x3e>
 8004952:	4b54      	ldr	r3, [pc, #336]	; (8004aa4 <pbuf_copy+0x17c>)
 8004954:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004958:	4953      	ldr	r1, [pc, #332]	; (8004aa8 <pbuf_copy+0x180>)
 800495a:	4854      	ldr	r0, [pc, #336]	; (8004aac <pbuf_copy+0x184>)
 800495c:	f009 fbe2 	bl	800e124 <iprintf>
 8004960:	f06f 030f 	mvn.w	r3, #15
 8004964:	e099      	b.n	8004a9a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	895b      	ldrh	r3, [r3, #10]
 800496a:	461a      	mov	r2, r3
 800496c:	89fb      	ldrh	r3, [r7, #14]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	895b      	ldrh	r3, [r3, #10]
 8004974:	4619      	mov	r1, r3
 8004976:	89bb      	ldrh	r3, [r7, #12]
 8004978:	1acb      	subs	r3, r1, r3
 800497a:	429a      	cmp	r2, r3
 800497c:	db05      	blt.n	800498a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	895a      	ldrh	r2, [r3, #10]
 8004982:	89bb      	ldrh	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	817b      	strh	r3, [r7, #10]
 8004988:	e004      	b.n	8004994 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	895a      	ldrh	r2, [r3, #10]
 800498e:	89fb      	ldrh	r3, [r7, #14]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	89fb      	ldrh	r3, [r7, #14]
 800499a:	18d0      	adds	r0, r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	89bb      	ldrh	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	897a      	ldrh	r2, [r7, #10]
 80049a6:	4619      	mov	r1, r3
 80049a8:	f009 fba9 	bl	800e0fe <memcpy>
    offset_to += len;
 80049ac:	89fa      	ldrh	r2, [r7, #14]
 80049ae:	897b      	ldrh	r3, [r7, #10]
 80049b0:	4413      	add	r3, r2
 80049b2:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80049b4:	89ba      	ldrh	r2, [r7, #12]
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	4413      	add	r3, r2
 80049ba:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	895b      	ldrh	r3, [r3, #10]
 80049c0:	89fa      	ldrh	r2, [r7, #14]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d906      	bls.n	80049d4 <pbuf_copy+0xac>
 80049c6:	4b37      	ldr	r3, [pc, #220]	; (8004aa4 <pbuf_copy+0x17c>)
 80049c8:	f240 32cd 	movw	r2, #973	; 0x3cd
 80049cc:	4938      	ldr	r1, [pc, #224]	; (8004ab0 <pbuf_copy+0x188>)
 80049ce:	4837      	ldr	r0, [pc, #220]	; (8004aac <pbuf_copy+0x184>)
 80049d0:	f009 fba8 	bl	800e124 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	895b      	ldrh	r3, [r3, #10]
 80049d8:	89ba      	ldrh	r2, [r7, #12]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d906      	bls.n	80049ec <pbuf_copy+0xc4>
 80049de:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <pbuf_copy+0x17c>)
 80049e0:	f240 32ce 	movw	r2, #974	; 0x3ce
 80049e4:	4933      	ldr	r1, [pc, #204]	; (8004ab4 <pbuf_copy+0x18c>)
 80049e6:	4831      	ldr	r0, [pc, #196]	; (8004aac <pbuf_copy+0x184>)
 80049e8:	f009 fb9c 	bl	800e124 <iprintf>
    if (offset_from >= p_from->len) {
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	895b      	ldrh	r3, [r3, #10]
 80049f0:	89ba      	ldrh	r2, [r7, #12]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d304      	bcc.n	8004a00 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	895b      	ldrh	r3, [r3, #10]
 8004a04:	89fa      	ldrh	r2, [r7, #14]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d114      	bne.n	8004a34 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10c      	bne.n	8004a34 <pbuf_copy+0x10c>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <pbuf_copy+0x10c>
 8004a20:	4b20      	ldr	r3, [pc, #128]	; (8004aa4 <pbuf_copy+0x17c>)
 8004a22:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8004a26:	4924      	ldr	r1, [pc, #144]	; (8004ab8 <pbuf_copy+0x190>)
 8004a28:	4820      	ldr	r0, [pc, #128]	; (8004aac <pbuf_copy+0x184>)
 8004a2a:	f009 fb7b 	bl	800e124 <iprintf>
 8004a2e:	f06f 030f 	mvn.w	r3, #15
 8004a32:	e032      	b.n	8004a9a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d013      	beq.n	8004a62 <pbuf_copy+0x13a>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	895a      	ldrh	r2, [r3, #10]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	891b      	ldrh	r3, [r3, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d10d      	bne.n	8004a62 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <pbuf_copy+0x13a>
 8004a4e:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <pbuf_copy+0x17c>)
 8004a50:	f240 32de 	movw	r2, #990	; 0x3de
 8004a54:	4919      	ldr	r1, [pc, #100]	; (8004abc <pbuf_copy+0x194>)
 8004a56:	4815      	ldr	r0, [pc, #84]	; (8004aac <pbuf_copy+0x184>)
 8004a58:	f009 fb64 	bl	800e124 <iprintf>
 8004a5c:	f06f 0305 	mvn.w	r3, #5
 8004a60:	e01b      	b.n	8004a9a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d013      	beq.n	8004a90 <pbuf_copy+0x168>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	895a      	ldrh	r2, [r3, #10]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	891b      	ldrh	r3, [r3, #8]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d10d      	bne.n	8004a90 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d009      	beq.n	8004a90 <pbuf_copy+0x168>
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <pbuf_copy+0x17c>)
 8004a7e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8004a82:	490e      	ldr	r1, [pc, #56]	; (8004abc <pbuf_copy+0x194>)
 8004a84:	4809      	ldr	r0, [pc, #36]	; (8004aac <pbuf_copy+0x184>)
 8004a86:	f009 fb4d 	bl	800e124 <iprintf>
 8004a8a:	f06f 0305 	mvn.w	r3, #5
 8004a8e:	e004      	b.n	8004a9a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f47f af67 	bne.w	8004966 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	0800f3bc 	.word	0x0800f3bc
 8004aa8:	0800f74c 	.word	0x0800f74c
 8004aac:	0800f408 	.word	0x0800f408
 8004ab0:	0800f77c 	.word	0x0800f77c
 8004ab4:	0800f794 	.word	0x0800f794
 8004ab8:	0800f7b0 	.word	0x0800f7b0
 8004abc:	0800f7c0 	.word	0x0800f7c0

08004ac0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	4611      	mov	r1, r2
 8004acc:	461a      	mov	r2, r3
 8004ace:	460b      	mov	r3, r1
 8004ad0:	80fb      	strh	r3, [r7, #6]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d108      	bne.n	8004af2 <pbuf_copy_partial+0x32>
 8004ae0:	4b30      	ldr	r3, [pc, #192]	; (8004ba4 <pbuf_copy_partial+0xe4>)
 8004ae2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004ae6:	4930      	ldr	r1, [pc, #192]	; (8004ba8 <pbuf_copy_partial+0xe8>)
 8004ae8:	4830      	ldr	r0, [pc, #192]	; (8004bac <pbuf_copy_partial+0xec>)
 8004aea:	f009 fb1b 	bl	800e124 <iprintf>
 8004aee:	2300      	movs	r3, #0
 8004af0:	e054      	b.n	8004b9c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d108      	bne.n	8004b0a <pbuf_copy_partial+0x4a>
 8004af8:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <pbuf_copy_partial+0xe4>)
 8004afa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004afe:	492c      	ldr	r1, [pc, #176]	; (8004bb0 <pbuf_copy_partial+0xf0>)
 8004b00:	482a      	ldr	r0, [pc, #168]	; (8004bac <pbuf_copy_partial+0xec>)
 8004b02:	f009 fb0f 	bl	800e124 <iprintf>
 8004b06:	2300      	movs	r3, #0
 8004b08:	e048      	b.n	8004b9c <pbuf_copy_partial+0xdc>

  left = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <pbuf_copy_partial+0x5a>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <pbuf_copy_partial+0x5e>
    return 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e03e      	b.n	8004b9c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	e034      	b.n	8004b8e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8004b24:	88bb      	ldrh	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <pbuf_copy_partial+0x80>
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	895b      	ldrh	r3, [r3, #10]
 8004b2e:	88ba      	ldrh	r2, [r7, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d305      	bcc.n	8004b40 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	895b      	ldrh	r3, [r3, #10]
 8004b38:	88ba      	ldrh	r2, [r7, #4]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	80bb      	strh	r3, [r7, #4]
 8004b3e:	e023      	b.n	8004b88 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	895a      	ldrh	r2, [r3, #10]
 8004b44:	88bb      	ldrh	r3, [r7, #4]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8004b4a:	8b3a      	ldrh	r2, [r7, #24]
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d901      	bls.n	8004b56 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8004b56:	8b7b      	ldrh	r3, [r7, #26]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	18d0      	adds	r0, r2, r3
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	88bb      	ldrh	r3, [r7, #4]
 8004b62:	4413      	add	r3, r2
 8004b64:	8b3a      	ldrh	r2, [r7, #24]
 8004b66:	4619      	mov	r1, r3
 8004b68:	f009 fac9 	bl	800e0fe <memcpy>
      copied_total += buf_copy_len;
 8004b6c:	8afa      	ldrh	r2, [r7, #22]
 8004b6e:	8b3b      	ldrh	r3, [r7, #24]
 8004b70:	4413      	add	r3, r2
 8004b72:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8004b74:	8b7a      	ldrh	r2, [r7, #26]
 8004b76:	8b3b      	ldrh	r3, [r7, #24]
 8004b78:	4413      	add	r3, r2
 8004b7a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	8b3b      	ldrh	r3, [r7, #24]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <pbuf_copy_partial+0xda>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1c4      	bne.n	8004b24 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8004b9a:	8afb      	ldrh	r3, [r7, #22]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	0800f3bc 	.word	0x0800f3bc
 8004ba8:	0800f7ec 	.word	0x0800f7ec
 8004bac:	0800f408 	.word	0x0800f408
 8004bb0:	0800f80c 	.word	0x0800f80c

08004bb4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d109      	bne.n	8004be4 <pbuf_take+0x30>
 8004bd0:	4b3a      	ldr	r3, [pc, #232]	; (8004cbc <pbuf_take+0x108>)
 8004bd2:	f240 4284 	movw	r2, #1156	; 0x484
 8004bd6:	493a      	ldr	r1, [pc, #232]	; (8004cc0 <pbuf_take+0x10c>)
 8004bd8:	483a      	ldr	r0, [pc, #232]	; (8004cc4 <pbuf_take+0x110>)
 8004bda:	f009 faa3 	bl	800e124 <iprintf>
 8004bde:	f06f 030f 	mvn.w	r3, #15
 8004be2:	e066      	b.n	8004cb2 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <pbuf_take+0x4a>
 8004bea:	4b34      	ldr	r3, [pc, #208]	; (8004cbc <pbuf_take+0x108>)
 8004bec:	f240 4285 	movw	r2, #1157	; 0x485
 8004bf0:	4935      	ldr	r1, [pc, #212]	; (8004cc8 <pbuf_take+0x114>)
 8004bf2:	4834      	ldr	r0, [pc, #208]	; (8004cc4 <pbuf_take+0x110>)
 8004bf4:	f009 fa96 	bl	800e124 <iprintf>
 8004bf8:	f06f 030f 	mvn.w	r3, #15
 8004bfc:	e059      	b.n	8004cb2 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	891b      	ldrh	r3, [r3, #8]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d909      	bls.n	8004c1c <pbuf_take+0x68>
 8004c08:	4b2c      	ldr	r3, [pc, #176]	; (8004cbc <pbuf_take+0x108>)
 8004c0a:	f240 4286 	movw	r2, #1158	; 0x486
 8004c0e:	492f      	ldr	r1, [pc, #188]	; (8004ccc <pbuf_take+0x118>)
 8004c10:	482c      	ldr	r0, [pc, #176]	; (8004cc4 <pbuf_take+0x110>)
 8004c12:	f009 fa87 	bl	800e124 <iprintf>
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	e04a      	b.n	8004cb2 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <pbuf_take+0x7e>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <pbuf_take+0x7e>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	891b      	ldrh	r3, [r3, #8]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d902      	bls.n	8004c38 <pbuf_take+0x84>
    return ERR_ARG;
 8004c32:	f06f 030f 	mvn.w	r3, #15
 8004c36:	e03c      	b.n	8004cb2 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	e027      	b.n	8004c8e <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <pbuf_take+0x9e>
 8004c44:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <pbuf_take+0x108>)
 8004c46:	f240 428e 	movw	r2, #1166	; 0x48e
 8004c4a:	4921      	ldr	r1, [pc, #132]	; (8004cd0 <pbuf_take+0x11c>)
 8004c4c:	481d      	ldr	r0, [pc, #116]	; (8004cc4 <pbuf_take+0x110>)
 8004c4e:	f009 fa69 	bl	800e124 <iprintf>
    buf_copy_len = total_copy_len;
 8004c52:	8b3b      	ldrh	r3, [r7, #24]
 8004c54:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	895b      	ldrh	r3, [r3, #10]
 8004c5a:	8b7a      	ldrh	r2, [r7, #26]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d902      	bls.n	8004c66 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	895b      	ldrh	r3, [r3, #10]
 8004c64:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	6858      	ldr	r0, [r3, #4]
 8004c6a:	8afb      	ldrh	r3, [r7, #22]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	4413      	add	r3, r2
 8004c70:	8b7a      	ldrh	r2, [r7, #26]
 8004c72:	4619      	mov	r1, r3
 8004c74:	f009 fa43 	bl	800e0fe <memcpy>
    total_copy_len -= buf_copy_len;
 8004c78:	8b3a      	ldrh	r2, [r7, #24]
 8004c7a:	8b7b      	ldrh	r3, [r7, #26]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8004c80:	8afa      	ldrh	r2, [r7, #22]
 8004c82:	8b7b      	ldrh	r3, [r7, #26]
 8004c84:	4413      	add	r3, r2
 8004c86:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	8b3b      	ldrh	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1d4      	bne.n	8004c3e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8004c94:	8b3b      	ldrh	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <pbuf_take+0xee>
 8004c9a:	8afa      	ldrh	r2, [r7, #22]
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d006      	beq.n	8004cb0 <pbuf_take+0xfc>
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <pbuf_take+0x108>)
 8004ca4:	f240 4299 	movw	r2, #1177	; 0x499
 8004ca8:	490a      	ldr	r1, [pc, #40]	; (8004cd4 <pbuf_take+0x120>)
 8004caa:	4806      	ldr	r0, [pc, #24]	; (8004cc4 <pbuf_take+0x110>)
 8004cac:	f009 fa3a 	bl	800e124 <iprintf>
  return ERR_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	0800f3bc 	.word	0x0800f3bc
 8004cc0:	0800f830 	.word	0x0800f830
 8004cc4:	0800f408 	.word	0x0800f408
 8004cc8:	0800f848 	.word	0x0800f848
 8004ccc:	0800f864 	.word	0x0800f864
 8004cd0:	0800f884 	.word	0x0800f884
 8004cd4:	0800f89c 	.word	0x0800f89c

08004cd8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8004cdc:	bf00      	nop
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8004cec:	f000 ffba 	bl	8005c64 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <tcp_tmr+0x28>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <tcp_tmr+0x28>)
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <tcp_tmr+0x28>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004d08:	f000 fcec 	bl	80056e4 <tcp_slowtmr>
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	200000c5 	.word	0x200000c5

08004d14 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e00a      	b.n	8004d3a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d102      	bne.n	8004d34 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f1      	bne.n	8004d24 <tcp_remove_listener+0x10>
      }
   }
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d105      	bne.n	8004d66 <tcp_listen_closed+0x1a>
 8004d5a:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <tcp_listen_closed+0x5c>)
 8004d5c:	22c0      	movs	r2, #192	; 0xc0
 8004d5e:	4913      	ldr	r1, [pc, #76]	; (8004dac <tcp_listen_closed+0x60>)
 8004d60:	4813      	ldr	r0, [pc, #76]	; (8004db0 <tcp_listen_closed+0x64>)
 8004d62:	f009 f9df 	bl	800e124 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7d1b      	ldrb	r3, [r3, #20]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d005      	beq.n	8004d7a <tcp_listen_closed+0x2e>
 8004d6e:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <tcp_listen_closed+0x5c>)
 8004d70:	22c1      	movs	r2, #193	; 0xc1
 8004d72:	4910      	ldr	r1, [pc, #64]	; (8004db4 <tcp_listen_closed+0x68>)
 8004d74:	480e      	ldr	r0, [pc, #56]	; (8004db0 <tcp_listen_closed+0x64>)
 8004d76:	f009 f9d5 	bl	800e124 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e00b      	b.n	8004d98 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8004d80:	4a0d      	ldr	r2, [pc, #52]	; (8004db8 <tcp_listen_closed+0x6c>)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff ffc1 	bl	8004d14 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d9f0      	bls.n	8004d80 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	0800f940 	.word	0x0800f940
 8004dac:	0800f970 	.word	0x0800f970
 8004db0:	0800f97c 	.word	0x0800f97c
 8004db4:	0800f9a4 	.word	0x0800f9a4
 8004db8:	08010eac 	.word	0x08010eac

08004dbc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d075      	beq.n	8004eba <tcp_close_shutdown+0xfe>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	7d1b      	ldrb	r3, [r3, #20]
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d003      	beq.n	8004dde <tcp_close_shutdown+0x22>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	7d1b      	ldrb	r3, [r3, #20]
 8004dda:	2b07      	cmp	r3, #7
 8004ddc:	d16d      	bne.n	8004eba <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <tcp_close_shutdown+0x34>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8004dee:	d064      	beq.n	8004eba <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	7e9b      	ldrb	r3, [r3, #26]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <tcp_close_shutdown+0x4e>
 8004dfc:	4b59      	ldr	r3, [pc, #356]	; (8004f64 <tcp_close_shutdown+0x1a8>)
 8004dfe:	f240 120f 	movw	r2, #271	; 0x10f
 8004e02:	4959      	ldr	r1, [pc, #356]	; (8004f68 <tcp_close_shutdown+0x1ac>)
 8004e04:	4859      	ldr	r0, [pc, #356]	; (8004f6c <tcp_close_shutdown+0x1b0>)
 8004e06:	f009 f98d 	bl	800e124 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e12:	687c      	ldr	r4, [r7, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	1d1d      	adds	r5, r3, #4
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8adb      	ldrh	r3, [r3, #22]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	8b12      	ldrh	r2, [r2, #24]
 8004e20:	9201      	str	r2, [sp, #4]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	462b      	mov	r3, r5
 8004e26:	4622      	mov	r2, r4
 8004e28:	f004 fe88 	bl	8009b3c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 f9b9 	bl	80061a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8004e32:	4b4f      	ldr	r3, [pc, #316]	; (8004f70 <tcp_close_shutdown+0x1b4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d105      	bne.n	8004e48 <tcp_close_shutdown+0x8c>
 8004e3c:	4b4c      	ldr	r3, [pc, #304]	; (8004f70 <tcp_close_shutdown+0x1b4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	4a4b      	ldr	r2, [pc, #300]	; (8004f70 <tcp_close_shutdown+0x1b4>)
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e013      	b.n	8004e70 <tcp_close_shutdown+0xb4>
 8004e48:	4b49      	ldr	r3, [pc, #292]	; (8004f70 <tcp_close_shutdown+0x1b4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e00c      	b.n	8004e6a <tcp_close_shutdown+0xae>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d104      	bne.n	8004e64 <tcp_close_shutdown+0xa8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e005      	b.n	8004e70 <tcp_close_shutdown+0xb4>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ef      	bne.n	8004e50 <tcp_close_shutdown+0x94>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	4b3f      	ldr	r3, [pc, #252]	; (8004f74 <tcp_close_shutdown+0x1b8>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	7d1b      	ldrb	r3, [r3, #20]
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d10c      	bne.n	8004e9e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	220a      	movs	r2, #10
 8004e88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8004e8a:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <tcp_close_shutdown+0x1bc>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	4a39      	ldr	r2, [pc, #228]	; (8004f78 <tcp_close_shutdown+0x1bc>)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	f005 f8a2 	bl	8009fe0 <tcp_timer_needed>
 8004e9c:	e00b      	b.n	8004eb6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8004e9e:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <tcp_close_shutdown+0x1c0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d102      	bne.n	8004eae <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8004ea8:	f003 fce0 	bl	800886c <tcp_trigger_input_pcb_close>
 8004eac:	e003      	b.n	8004eb6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	f7fe fedb 	bl	8003c6c <memp_free>
        }
      }
      return ERR_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e050      	b.n	8004f5c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	7d1b      	ldrb	r3, [r3, #20]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d02e      	beq.n	8004f20 <tcp_close_shutdown+0x164>
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d038      	beq.n	8004f38 <tcp_close_shutdown+0x17c>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d142      	bne.n	8004f50 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8adb      	ldrh	r3, [r3, #22]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d021      	beq.n	8004f16 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8004ed2:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <tcp_close_shutdown+0x1c4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d105      	bne.n	8004ee8 <tcp_close_shutdown+0x12c>
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <tcp_close_shutdown+0x1c4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	4a27      	ldr	r2, [pc, #156]	; (8004f80 <tcp_close_shutdown+0x1c4>)
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e013      	b.n	8004f10 <tcp_close_shutdown+0x154>
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <tcp_close_shutdown+0x1c4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	e00c      	b.n	8004f0a <tcp_close_shutdown+0x14e>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d104      	bne.n	8004f04 <tcp_close_shutdown+0x148>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	e005      	b.n	8004f10 <tcp_close_shutdown+0x154>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ef      	bne.n	8004ef0 <tcp_close_shutdown+0x134>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	2001      	movs	r0, #1
 8004f1a:	f7fe fea7 	bl	8003c6c <memp_free>
    break;
 8004f1e:	e01c      	b.n	8004f5a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff13 	bl	8004d4c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4816      	ldr	r0, [pc, #88]	; (8004f84 <tcp_close_shutdown+0x1c8>)
 8004f2a:	f001 f97d 	bl	8006228 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	2002      	movs	r0, #2
 8004f32:	f7fe fe9b 	bl	8003c6c <memp_free>
    break;
 8004f36:	e010      	b.n	8004f5a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	480d      	ldr	r0, [pc, #52]	; (8004f70 <tcp_close_shutdown+0x1b4>)
 8004f3c:	f001 f974 	bl	8006228 <tcp_pcb_remove>
 8004f40:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <tcp_close_shutdown+0x1b8>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	2001      	movs	r0, #1
 8004f4a:	f7fe fe8f 	bl	8003c6c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8004f4e:	e004      	b.n	8004f5a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f819 	bl	8004f88 <tcp_close_shutdown_fin>
 8004f56:	4603      	mov	r3, r0
 8004f58:	e000      	b.n	8004f5c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bdb0      	pop	{r4, r5, r7, pc}
 8004f64:	0800f940 	.word	0x0800f940
 8004f68:	0800f9bc 	.word	0x0800f9bc
 8004f6c:	0800f97c 	.word	0x0800f97c
 8004f70:	20003748 	.word	0x20003748
 8004f74:	20003744 	.word	0x20003744
 8004f78:	20003758 	.word	0x20003758
 8004f7c:	2000375c 	.word	0x2000375c
 8004f80:	20003754 	.word	0x20003754
 8004f84:	20003750 	.word	0x20003750

08004f88 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <tcp_close_shutdown_fin+0x1c>
 8004f96:	4b2c      	ldr	r3, [pc, #176]	; (8005048 <tcp_close_shutdown_fin+0xc0>)
 8004f98:	f240 124d 	movw	r2, #333	; 0x14d
 8004f9c:	492b      	ldr	r1, [pc, #172]	; (800504c <tcp_close_shutdown_fin+0xc4>)
 8004f9e:	482c      	ldr	r0, [pc, #176]	; (8005050 <tcp_close_shutdown_fin+0xc8>)
 8004fa0:	f009 f8c0 	bl	800e124 <iprintf>

  switch (pcb->state) {
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	7d1b      	ldrb	r3, [r3, #20]
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d010      	beq.n	8004fce <tcp_close_shutdown_fin+0x46>
 8004fac:	2b07      	cmp	r3, #7
 8004fae:	d01b      	beq.n	8004fe8 <tcp_close_shutdown_fin+0x60>
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d126      	bne.n	8005002 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f003 fce5 	bl	8008984 <tcp_send_fin>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11f      	bne.n	8005006 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2205      	movs	r2, #5
 8004fca:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004fcc:	e01b      	b.n	8005006 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f003 fcd8 	bl	8008984 <tcp_send_fin>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d114      	bne.n	800500a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2205      	movs	r2, #5
 8004fe4:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004fe6:	e010      	b.n	800500a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f003 fccb 	bl	8008984 <tcp_send_fin>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2209      	movs	r2, #9
 8004ffe:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005000:	e005      	b.n	800500e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	e01c      	b.n	8005040 <tcp_close_shutdown_fin+0xb8>
    break;
 8005006:	bf00      	nop
 8005008:	e002      	b.n	8005010 <tcp_close_shutdown_fin+0x88>
    break;
 800500a:	bf00      	nop
 800500c:	e000      	b.n	8005010 <tcp_close_shutdown_fin+0x88>
    break;
 800500e:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f004 fb05 	bl	8009628 <tcp_output>
 800501e:	e00d      	b.n	800503c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d108      	bne.n	800503c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	7e9b      	ldrb	r3, [r3, #26]
 800502e:	f043 0308 	orr.w	r3, r3, #8
 8005032:	b2da      	uxtb	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	e001      	b.n	8005040 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800503c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	0800f940 	.word	0x0800f940
 800504c:	0800f970 	.word	0x0800f970
 8005050:	0800f97c 	.word	0x0800f97c

08005054 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	7d1b      	ldrb	r3, [r3, #20]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d006      	beq.n	8005072 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	7e9b      	ldrb	r3, [r3, #26]
 8005068:	f043 0310 	orr.w	r3, r3, #16
 800506c:	b2da      	uxtb	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005072:	2101      	movs	r1, #1
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fea1 	bl	8004dbc <tcp_close_shutdown>
 800507a:	4603      	mov	r3, r0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08c      	sub	sp, #48	; 0x30
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	7d1b      	ldrb	r3, [r3, #20]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d106      	bne.n	80050a4 <tcp_abandon+0x20>
 8005096:	4b4d      	ldr	r3, [pc, #308]	; (80051cc <tcp_abandon+0x148>)
 8005098:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800509c:	494c      	ldr	r1, [pc, #304]	; (80051d0 <tcp_abandon+0x14c>)
 800509e:	484d      	ldr	r0, [pc, #308]	; (80051d4 <tcp_abandon+0x150>)
 80050a0:	f009 f840 	bl	800e124 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7d1b      	ldrb	r3, [r3, #20]
 80050a8:	2b0a      	cmp	r3, #10
 80050aa:	d108      	bne.n	80050be <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	484a      	ldr	r0, [pc, #296]	; (80051d8 <tcp_abandon+0x154>)
 80050b0:	f001 f8ba 	bl	8006228 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	2001      	movs	r0, #1
 80050b8:	f7fe fdd8 	bl	8003c6c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80050bc:	e081      	b.n	80051c2 <tcp_abandon+0x13e>
    int send_rst = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	7d1b      	ldrb	r3, [r3, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d126      	bne.n	8005136 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8adb      	ldrh	r3, [r3, #22]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02e      	beq.n	800514e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80050f0:	4b3a      	ldr	r3, [pc, #232]	; (80051dc <tcp_abandon+0x158>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d105      	bne.n	8005106 <tcp_abandon+0x82>
 80050fa:	4b38      	ldr	r3, [pc, #224]	; (80051dc <tcp_abandon+0x158>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a36      	ldr	r2, [pc, #216]	; (80051dc <tcp_abandon+0x158>)
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e013      	b.n	800512e <tcp_abandon+0xaa>
 8005106:	4b35      	ldr	r3, [pc, #212]	; (80051dc <tcp_abandon+0x158>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	e00c      	b.n	8005128 <tcp_abandon+0xa4>
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	d104      	bne.n	8005122 <tcp_abandon+0x9e>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	60da      	str	r2, [r3, #12]
 8005120:	e005      	b.n	800512e <tcp_abandon+0xaa>
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ef      	bne.n	800510e <tcp_abandon+0x8a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	60da      	str	r2, [r3, #12]
 8005134:	e00b      	b.n	800514e <tcp_abandon+0xca>
      send_rst = reset;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8adb      	ldrh	r3, [r3, #22]
 800513e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4827      	ldr	r0, [pc, #156]	; (80051e0 <tcp_abandon+0x15c>)
 8005144:	f001 f870 	bl	8006228 <tcp_pcb_remove>
 8005148:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <tcp_abandon+0x160>)
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d004      	beq.n	8005160 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fe4f 	bl	8005dfe <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fe46 	bl	8005dfe <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fe3d 	bl	8005dfe <tcp_segs_free>
    if (send_rst) {
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1d19      	adds	r1, r3, #4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8b1b      	ldrh	r3, [r3, #24]
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	460b      	mov	r3, r1
 800519c:	6979      	ldr	r1, [r7, #20]
 800519e:	69b8      	ldr	r0, [r7, #24]
 80051a0:	f004 fccc 	bl	8009b3c <tcp_rst>
    last_state = pcb->state;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	7d1b      	ldrb	r3, [r3, #20]
 80051a8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	2001      	movs	r0, #1
 80051ae:	f7fe fd5d 	bl	8003c6c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <tcp_abandon+0x13e>
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f06f 010c 	mvn.w	r1, #12
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	4798      	blx	r3
}
 80051c2:	bf00      	nop
 80051c4:	3728      	adds	r7, #40	; 0x28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	0800f940 	.word	0x0800f940
 80051d0:	0800f9d8 	.word	0x0800f9d8
 80051d4:	0800f97c 	.word	0x0800f97c
 80051d8:	20003758 	.word	0x20003758
 80051dc:	20003754 	.word	0x20003754
 80051e0:	20003748 	.word	0x20003748
 80051e4:	20003744 	.word	0x20003744

080051e8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80051f0:	2101      	movs	r1, #1
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff ff46 	bl	8005084 <tcp_abandon>
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	4613      	mov	r3, r2
 800520c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800520e:	2304      	movs	r3, #4
 8005210:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8005218:	4b3c      	ldr	r3, [pc, #240]	; (800530c <tcp_bind+0x10c>)
 800521a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <tcp_bind+0x28>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <tcp_bind+0x2e>
    return ERR_VAL;
 8005228:	f06f 0305 	mvn.w	r3, #5
 800522c:	e06a      	b.n	8005304 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	7d1b      	ldrb	r3, [r3, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <tcp_bind+0x4a>
 8005236:	4b36      	ldr	r3, [pc, #216]	; (8005310 <tcp_bind+0x110>)
 8005238:	f44f 7211 	mov.w	r2, #580	; 0x244
 800523c:	4935      	ldr	r1, [pc, #212]	; (8005314 <tcp_bind+0x114>)
 800523e:	4836      	ldr	r0, [pc, #216]	; (8005318 <tcp_bind+0x118>)
 8005240:	f008 ff70 	bl	800e124 <iprintf>
 8005244:	f06f 0305 	mvn.w	r3, #5
 8005248:	e05c      	b.n	8005304 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <tcp_bind+0x64>
    port = tcp_new_port();
 8005250:	f000 f910 	bl	8005474 <tcp_new_port>
 8005254:	4603      	mov	r3, r0
 8005256:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d135      	bne.n	80052ca <tcp_bind+0xca>
      return ERR_BUF;
 800525e:	f06f 0301 	mvn.w	r3, #1
 8005262:	e04f      	b.n	8005304 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	e02b      	b.n	80052c2 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800526a:	4a2c      	ldr	r2, [pc, #176]	; (800531c <tcp_bind+0x11c>)
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	e01e      	b.n	80052b6 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	8adb      	ldrh	r3, [r3, #22]
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	429a      	cmp	r2, r3
 8005280:	d116      	bne.n	80052b0 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8005282:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <tcp_bind+0xaa>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d102      	bne.n	80052b0 <tcp_bind+0xb0>
              return ERR_USE;
 80052aa:	f06f 0307 	mvn.w	r3, #7
 80052ae:	e029      	b.n	8005304 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1dd      	bne.n	8005278 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	3301      	adds	r3, #1
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	dbcf      	blt.n	800526a <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00c      	beq.n	80052ea <tcp_bind+0xea>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <tcp_bind+0xe4>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	e000      	b.n	80052e6 <tcp_bind+0xe6>
 80052e4:	2300      	movs	r3, #0
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <tcp_bind+0x120>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	60da      	str	r2, [r3, #12]
 80052f8:	4a09      	ldr	r2, [pc, #36]	; (8005320 <tcp_bind+0x120>)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	f004 fe6f 	bl	8009fe0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	08010ed4 	.word	0x08010ed4
 8005310:	0800f940 	.word	0x0800f940
 8005314:	0800fa0c 	.word	0x0800fa0c
 8005318:	0800f97c 	.word	0x0800f97c
 800531c:	08010eac 	.word	0x08010eac
 8005320:	20003754 	.word	0x20003754

08005324 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005334:	4413      	add	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005340:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005344:	bf28      	it	cs
 8005346:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800534a:	b292      	uxth	r2, r2
 800534c:	4413      	add	r3, r2
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	db08      	blt.n	8005368 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	e020      	b.n	80053aa <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	dd03      	ble.n	800537e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800537c:	e014      	b.n	80053a8 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005390:	d306      	bcc.n	80053a0 <tcp_update_rcv_ann_wnd+0x7c>
 8005392:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <tcp_update_rcv_ann_wnd+0x90>)
 8005394:	f44f 7242 	mov.w	r2, #776	; 0x308
 8005398:	4907      	ldr	r1, [pc, #28]	; (80053b8 <tcp_update_rcv_ann_wnd+0x94>)
 800539a:	4808      	ldr	r0, [pc, #32]	; (80053bc <tcp_update_rcv_ann_wnd+0x98>)
 800539c:	f008 fec2 	bl	800e124 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80053a8:	2300      	movs	r3, #0
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	0800f940 	.word	0x0800f940
 80053b8:	0800fa58 	.word	0x0800fa58
 80053bc:	0800f97c 	.word	0x0800f97c

080053c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	7d1b      	ldrb	r3, [r3, #20]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d106      	bne.n	80053e2 <tcp_recved+0x22>
 80053d4:	4b23      	ldr	r3, [pc, #140]	; (8005464 <tcp_recved+0xa4>)
 80053d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80053da:	4923      	ldr	r1, [pc, #140]	; (8005468 <tcp_recved+0xa8>)
 80053dc:	4823      	ldr	r0, [pc, #140]	; (800546c <tcp_recved+0xac>)
 80053de:	f008 fea1 	bl	800e124 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80053e6:	887b      	ldrh	r3, [r7, #2]
 80053e8:	4413      	add	r3, r2
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80053f8:	d904      	bls.n	8005404 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005400:	851a      	strh	r2, [r3, #40]	; 0x28
 8005402:	e017      	b.n	8005434 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	2b00      	cmp	r3, #0
 800540a:	d113      	bne.n	8005434 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	7d1b      	ldrb	r3, [r3, #20]
 8005410:	2b07      	cmp	r3, #7
 8005412:	d003      	beq.n	800541c <tcp_recved+0x5c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	7d1b      	ldrb	r3, [r3, #20]
 8005418:	2b09      	cmp	r3, #9
 800541a:	d104      	bne.n	8005426 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005422:	851a      	strh	r2, [r3, #40]	; 0x28
 8005424:	e006      	b.n	8005434 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <tcp_recved+0xa4>)
 8005428:	f240 322d 	movw	r2, #813	; 0x32d
 800542c:	4910      	ldr	r1, [pc, #64]	; (8005470 <tcp_recved+0xb0>)
 800542e:	480f      	ldr	r0, [pc, #60]	; (800546c <tcp_recved+0xac>)
 8005430:	f008 fe78 	bl	800e124 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff ff75 	bl	8005324 <tcp_update_rcv_ann_wnd>
 800543a:	4603      	mov	r3, r0
 800543c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005444:	db09      	blt.n	800545a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	7e9b      	ldrb	r3, [r3, #26]
 800544a:	f043 0302 	orr.w	r3, r3, #2
 800544e:	b2da      	uxtb	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f004 f8e7 	bl	8009628 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	0800f940 	.word	0x0800f940
 8005468:	0800fa74 	.word	0x0800fa74
 800546c:	0800f97c 	.word	0x0800f97c
 8005470:	0800fa9c 	.word	0x0800fa9c

08005474 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800547e:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <tcp_new_port+0x80>)
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	b291      	uxth	r1, r2
 8005486:	4a1b      	ldr	r2, [pc, #108]	; (80054f4 <tcp_new_port+0x80>)
 8005488:	8011      	strh	r1, [r2, #0]
 800548a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800548e:	4293      	cmp	r3, r2
 8005490:	d103      	bne.n	800549a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8005492:	4b18      	ldr	r3, [pc, #96]	; (80054f4 <tcp_new_port+0x80>)
 8005494:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005498:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800549a:	2300      	movs	r3, #0
 800549c:	71fb      	strb	r3, [r7, #7]
 800549e:	e01e      	b.n	80054de <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <tcp_new_port+0x84>)
 80054a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	e011      	b.n	80054d2 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	8ada      	ldrh	r2, [r3, #22]
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <tcp_new_port+0x80>)
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d108      	bne.n	80054cc <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80054ba:	88bb      	ldrh	r3, [r7, #4]
 80054bc:	3301      	adds	r3, #1
 80054be:	80bb      	strh	r3, [r7, #4]
 80054c0:	88bb      	ldrh	r3, [r7, #4]
 80054c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c6:	d3da      	bcc.n	800547e <tcp_new_port+0xa>
          return 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e00d      	b.n	80054e8 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	603b      	str	r3, [r7, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1ea      	bne.n	80054ae <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	3301      	adds	r3, #1
 80054dc:	71fb      	strb	r3, [r7, #7]
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d9dd      	bls.n	80054a0 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80054e4:	4b03      	ldr	r3, [pc, #12]	; (80054f4 <tcp_new_port+0x80>)
 80054e6:	881b      	ldrh	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	20000006 	.word	0x20000006
 80054f8:	08010eac 	.word	0x08010eac

080054fc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <tcp_connect+0x1c>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <tcp_connect+0x22>
    return ERR_VAL;
 8005518:	f06f 0305 	mvn.w	r3, #5
 800551c:	e0d1      	b.n	80056c2 <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	7d1b      	ldrb	r3, [r3, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <tcp_connect+0x3e>
 8005526:	4b69      	ldr	r3, [pc, #420]	; (80056cc <tcp_connect+0x1d0>)
 8005528:	f44f 725e 	mov.w	r2, #888	; 0x378
 800552c:	4968      	ldr	r1, [pc, #416]	; (80056d0 <tcp_connect+0x1d4>)
 800552e:	4869      	ldr	r0, [pc, #420]	; (80056d4 <tcp_connect+0x1d8>)
 8005530:	f008 fdf8 	bl	800e124 <iprintf>
 8005534:	f06f 0309 	mvn.w	r3, #9
 8005538:	e0c3      	b.n	80056c2 <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <tcp_connect+0x4a>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	e000      	b.n	8005548 <tcp_connect+0x4c>
 8005546:	2300      	movs	r3, #0
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <tcp_connect+0x64>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d11a      	bne.n	8005596 <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3304      	adds	r3, #4
 8005564:	4618      	mov	r0, r3
 8005566:	f006 fb01 	bl	800bb6c <ip4_route>
 800556a:	6238      	str	r0, [r7, #32]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <tcp_connect+0x7c>
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	3304      	adds	r3, #4
 8005576:	e000      	b.n	800557a <tcp_connect+0x7e>
 8005578:	2300      	movs	r3, #0
 800557a:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <tcp_connect+0x8c>
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 8005588:	f06f 0303 	mvn.w	r3, #3
 800558c:	e099      	b.n	80056c2 <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8adb      	ldrh	r3, [r3, #22]
 800559a:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8adb      	ldrh	r3, [r3, #22]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10c      	bne.n	80055be <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 80055a4:	f7ff ff66 	bl	8005474 <tcp_new_port>
 80055a8:	4603      	mov	r3, r0
 80055aa:	461a      	mov	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8adb      	ldrh	r3, [r3, #22]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <tcp_connect+0xc2>
      return ERR_BUF;
 80055b8:	f06f 0301 	mvn.w	r3, #1
 80055bc:	e081      	b.n	80056c2 <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 feae 	bl	8006320 <tcp_next_iss>
 80055c4:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->lastack = iss - 1;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	1e5a      	subs	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	1e5a      	subs	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	655a      	str	r2, [r3, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	1e5a      	subs	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	659a      	str	r2, [r3, #88]	; 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80055f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005612:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3304      	adds	r3, #4
 800561c:	4619      	mov	r1, r3
 800561e:	4610      	mov	r0, r2
 8005620:	f000 fe96 	bl	8006350 <tcp_eff_send_mss_impl>
 8005624:	4603      	mov	r3, r0
 8005626:	461a      	mov	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800563c:	2102      	movs	r1, #2
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f003 fe9a 	bl	8009378 <tcp_enqueue_flags>
 8005644:	4603      	mov	r3, r0
 8005646:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8005648:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d136      	bne.n	80056be <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2202      	movs	r2, #2
 8005654:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8005656:	8b7b      	ldrh	r3, [r7, #26]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d021      	beq.n	80056a0 <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800565c:	4b1e      	ldr	r3, [pc, #120]	; (80056d8 <tcp_connect+0x1dc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	429a      	cmp	r2, r3
 8005664:	d105      	bne.n	8005672 <tcp_connect+0x176>
 8005666:	4b1c      	ldr	r3, [pc, #112]	; (80056d8 <tcp_connect+0x1dc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a1a      	ldr	r2, [pc, #104]	; (80056d8 <tcp_connect+0x1dc>)
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e013      	b.n	800569a <tcp_connect+0x19e>
 8005672:	4b19      	ldr	r3, [pc, #100]	; (80056d8 <tcp_connect+0x1dc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
 8005678:	e00c      	b.n	8005694 <tcp_connect+0x198>
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	429a      	cmp	r2, r3
 8005682:	d104      	bne.n	800568e <tcp_connect+0x192>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	60da      	str	r2, [r3, #12]
 800568c:	e005      	b.n	800569a <tcp_connect+0x19e>
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1ef      	bne.n	800567a <tcp_connect+0x17e>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80056a0:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <tcp_connect+0x1e0>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	4a0c      	ldr	r2, [pc, #48]	; (80056dc <tcp_connect+0x1e0>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	f004 fc97 	bl	8009fe0 <tcp_timer_needed>
 80056b2:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <tcp_connect+0x1e4>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f003 ffb5 	bl	8009628 <tcp_output>
  }
  return ret;
 80056be:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3728      	adds	r7, #40	; 0x28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	0800f940 	.word	0x0800f940
 80056d0:	0800fac0 	.word	0x0800fac0
 80056d4:	0800f97c 	.word	0x0800f97c
 80056d8:	20003754 	.word	0x20003754
 80056dc:	20003748 	.word	0x20003748
 80056e0:	20003744 	.word	0x20003744

080056e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80056e4:	b5b0      	push	{r4, r5, r7, lr}
 80056e6:	b08c      	sub	sp, #48	; 0x30
 80056e8:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80056ee:	4b96      	ldr	r3, [pc, #600]	; (8005948 <tcp_slowtmr+0x264>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	4a94      	ldr	r2, [pc, #592]	; (8005948 <tcp_slowtmr+0x264>)
 80056f6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80056f8:	4b94      	ldr	r3, [pc, #592]	; (800594c <tcp_slowtmr+0x268>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	4b92      	ldr	r3, [pc, #584]	; (800594c <tcp_slowtmr+0x268>)
 8005702:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8005708:	4b91      	ldr	r3, [pc, #580]	; (8005950 <tcp_slowtmr+0x26c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800570e:	e227      	b.n	8005b60 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	7d1b      	ldrb	r3, [r3, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <tcp_slowtmr+0x42>
 8005718:	4b8e      	ldr	r3, [pc, #568]	; (8005954 <tcp_slowtmr+0x270>)
 800571a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800571e:	498e      	ldr	r1, [pc, #568]	; (8005958 <tcp_slowtmr+0x274>)
 8005720:	488e      	ldr	r0, [pc, #568]	; (800595c <tcp_slowtmr+0x278>)
 8005722:	f008 fcff 	bl	800e124 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	7d1b      	ldrb	r3, [r3, #20]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d106      	bne.n	800573c <tcp_slowtmr+0x58>
 800572e:	4b89      	ldr	r3, [pc, #548]	; (8005954 <tcp_slowtmr+0x270>)
 8005730:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005734:	498a      	ldr	r1, [pc, #552]	; (8005960 <tcp_slowtmr+0x27c>)
 8005736:	4889      	ldr	r0, [pc, #548]	; (800595c <tcp_slowtmr+0x278>)
 8005738:	f008 fcf4 	bl	800e124 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	7d1b      	ldrb	r3, [r3, #20]
 8005740:	2b0a      	cmp	r3, #10
 8005742:	d106      	bne.n	8005752 <tcp_slowtmr+0x6e>
 8005744:	4b83      	ldr	r3, [pc, #524]	; (8005954 <tcp_slowtmr+0x270>)
 8005746:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800574a:	4986      	ldr	r1, [pc, #536]	; (8005964 <tcp_slowtmr+0x280>)
 800574c:	4883      	ldr	r0, [pc, #524]	; (800595c <tcp_slowtmr+0x278>)
 800574e:	f008 fce9 	bl	800e124 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	7f5a      	ldrb	r2, [r3, #29]
 8005756:	4b7d      	ldr	r3, [pc, #500]	; (800594c <tcp_slowtmr+0x268>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d103      	bne.n	8005766 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8005764:	e1fc      	b.n	8005b60 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005766:	4b79      	ldr	r3, [pc, #484]	; (800594c <tcp_slowtmr+0x268>)
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	7d1b      	ldrb	r3, [r3, #20]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d108      	bne.n	8005790 <tcp_slowtmr+0xac>
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005784:	2b05      	cmp	r3, #5
 8005786:	d903      	bls.n	8005790 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8005788:	7ffb      	ldrb	r3, [r7, #31]
 800578a:	3301      	adds	r3, #1
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e0a2      	b.n	80058d6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005796:	2b0b      	cmp	r3, #11
 8005798:	d903      	bls.n	80057a2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800579a:	7ffb      	ldrb	r3, [r7, #31]
 800579c:	3301      	adds	r3, #1
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e099      	b.n	80058d6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d032      	beq.n	8005812 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80057b2:	3b01      	subs	r3, #1
 80057b4:	4a6c      	ldr	r2, [pc, #432]	; (8005968 <tcp_slowtmr+0x284>)
 80057b6:	5cd3      	ldrb	r3, [r2, r3]
 80057b8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80057c0:	7cfa      	ldrb	r2, [r7, #19]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d907      	bls.n	80057d6 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80057cc:	3301      	adds	r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80057dc:	7cfa      	ldrb	r2, [r7, #19]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d879      	bhi.n	80058d6 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80057e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057e4:	f004 fb3c 	bl	8009e60 <tcp_zero_window_probe>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d173      	bne.n	80058d6 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80057fc:	2b06      	cmp	r3, #6
 80057fe:	d86a      	bhi.n	80058d6 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005806:	3301      	adds	r3, #1
 8005808:	b2da      	uxtb	r2, r3
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8005810:	e061      	b.n	80058d6 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005818:	2b00      	cmp	r3, #0
 800581a:	db08      	blt.n	800582e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005822:	b29b      	uxth	r3, r3
 8005824:	3301      	adds	r3, #1
 8005826:	b29b      	uxth	r3, r3
 8005828:	b21a      	sxth	r2, r3
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d04f      	beq.n	80058d6 <tcp_slowtmr+0x1f2>
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005842:	429a      	cmp	r2, r3
 8005844:	db47      	blt.n	80058d6 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	7d1b      	ldrb	r3, [r3, #20]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d018      	beq.n	8005880 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005854:	2b0c      	cmp	r3, #12
 8005856:	bf28      	it	cs
 8005858:	230c      	movcs	r3, #12
 800585a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005862:	10db      	asrs	r3, r3, #3
 8005864:	b21b      	sxth	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800586e:	4413      	add	r3, r2
 8005870:	7dfa      	ldrb	r2, [r7, #23]
 8005872:	493e      	ldr	r1, [pc, #248]	; (800596c <tcp_slowtmr+0x288>)
 8005874:	5c8a      	ldrb	r2, [r1, r2]
 8005876:	4093      	lsls	r3, r2
 8005878:	b21a      	sxth	r2, r3
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	2200      	movs	r2, #0
 8005884:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005892:	4293      	cmp	r3, r2
 8005894:	bf28      	it	cs
 8005896:	4613      	movcs	r3, r2
 8005898:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800589a:	8abb      	ldrh	r3, [r7, #20]
 800589c:	085b      	lsrs	r3, r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d206      	bcs.n	80058c6 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 80058d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058d2:	f004 f9a9 	bl	8009c28 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	7d1b      	ldrb	r3, [r3, #20]
 80058da:	2b06      	cmp	r3, #6
 80058dc:	d10f      	bne.n	80058fe <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	7e9b      	ldrb	r3, [r3, #26]
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80058ea:	4b17      	ldr	r3, [pc, #92]	; (8005948 <tcp_slowtmr+0x264>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b28      	cmp	r3, #40	; 0x28
 80058f6:	d902      	bls.n	80058fe <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80058f8:	7ffb      	ldrb	r3, [r7, #31]
 80058fa:	3301      	adds	r3, #1
 80058fc:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	7a1b      	ldrb	r3, [r3, #8]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d05d      	beq.n	80059c6 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800590e:	2b04      	cmp	r3, #4
 8005910:	d003      	beq.n	800591a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8005916:	2b07      	cmp	r3, #7
 8005918:	d155      	bne.n	80059c6 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <tcp_slowtmr+0x264>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800592a:	4b11      	ldr	r3, [pc, #68]	; (8005970 <tcp_slowtmr+0x28c>)
 800592c:	440b      	add	r3, r1
 800592e:	4911      	ldr	r1, [pc, #68]	; (8005974 <tcp_slowtmr+0x290>)
 8005930:	fba1 1303 	umull	r1, r3, r1, r3
 8005934:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005936:	429a      	cmp	r2, r3
 8005938:	d91e      	bls.n	8005978 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800593a:	7ffb      	ldrb	r3, [r7, #31]
 800593c:	3301      	adds	r3, #1
 800593e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8005940:	7fbb      	ldrb	r3, [r7, #30]
 8005942:	3301      	adds	r3, #1
 8005944:	77bb      	strb	r3, [r7, #30]
 8005946:	e03e      	b.n	80059c6 <tcp_slowtmr+0x2e2>
 8005948:	2000374c 	.word	0x2000374c
 800594c:	200000c6 	.word	0x200000c6
 8005950:	20003748 	.word	0x20003748
 8005954:	0800f940 	.word	0x0800f940
 8005958:	0800faf0 	.word	0x0800faf0
 800595c:	0800f97c 	.word	0x0800f97c
 8005960:	0800fb1c 	.word	0x0800fb1c
 8005964:	0800fb48 	.word	0x0800fb48
 8005968:	08010ea4 	.word	0x08010ea4
 800596c:	08010e94 	.word	0x08010e94
 8005970:	000a4cb8 	.word	0x000a4cb8
 8005974:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005978:	4b97      	ldr	r3, [pc, #604]	; (8005bd8 <tcp_slowtmr+0x4f4>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800598e:	4618      	mov	r0, r3
 8005990:	4b92      	ldr	r3, [pc, #584]	; (8005bdc <tcp_slowtmr+0x4f8>)
 8005992:	fb03 f300 	mul.w	r3, r3, r0
 8005996:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8005998:	4991      	ldr	r1, [pc, #580]	; (8005be0 <tcp_slowtmr+0x4fc>)
 800599a:	fba1 1303 	umull	r1, r3, r1, r3
 800599e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d910      	bls.n	80059c6 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80059a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059a6:	f004 fa1e 	bl	8009de6 <tcp_keepalive>
 80059aa:	4603      	mov	r3, r0
 80059ac:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80059ae:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d107      	bne.n	80059c6 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80059bc:	3301      	adds	r3, #1
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80059ce:	4b82      	ldr	r3, [pc, #520]	; (8005bd8 <tcp_slowtmr+0x4f4>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	1ad2      	subs	r2, r2, r3
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80059de:	4619      	mov	r1, r3
 80059e0:	460b      	mov	r3, r1
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	440b      	add	r3, r1
 80059e6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d307      	bcc.n	80059fc <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fa04 	bl	8005dfe <tcp_segs_free>
      pcb->ooseq = NULL;
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	2200      	movs	r2, #0
 80059fa:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	7d1b      	ldrb	r3, [r3, #20]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d109      	bne.n	8005a18 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005a04:	4b74      	ldr	r3, [pc, #464]	; (8005bd8 <tcp_slowtmr+0x4f4>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b28      	cmp	r3, #40	; 0x28
 8005a10:	d902      	bls.n	8005a18 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005a12:	7ffb      	ldrb	r3, [r7, #31]
 8005a14:	3301      	adds	r3, #1
 8005a16:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	7d1b      	ldrb	r3, [r3, #20]
 8005a1c:	2b09      	cmp	r3, #9
 8005a1e:	d109      	bne.n	8005a34 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005a20:	4b6d      	ldr	r3, [pc, #436]	; (8005bd8 <tcp_slowtmr+0x4f4>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2bf0      	cmp	r3, #240	; 0xf0
 8005a2c:	d902      	bls.n	8005a34 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8005a2e:	7ffb      	ldrb	r3, [r7, #31]
 8005a30:	3301      	adds	r3, #1
 8005a32:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005a34:	7ffb      	ldrb	r3, [r7, #31]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d05d      	beq.n	8005af6 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a40:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005a42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a44:	f000 fbae 	bl	80061a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d010      	beq.n	8005a70 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005a4e:	4b65      	ldr	r3, [pc, #404]	; (8005be4 <tcp_slowtmr+0x500>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d106      	bne.n	8005a66 <tcp_slowtmr+0x382>
 8005a58:	4b63      	ldr	r3, [pc, #396]	; (8005be8 <tcp_slowtmr+0x504>)
 8005a5a:	f240 4289 	movw	r2, #1161	; 0x489
 8005a5e:	4963      	ldr	r1, [pc, #396]	; (8005bec <tcp_slowtmr+0x508>)
 8005a60:	4863      	ldr	r0, [pc, #396]	; (8005bf0 <tcp_slowtmr+0x50c>)
 8005a62:	f008 fb5f 	bl	800e124 <iprintf>
        prev->next = pcb->next;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	60da      	str	r2, [r3, #12]
 8005a6e:	e00f      	b.n	8005a90 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005a70:	4b5c      	ldr	r3, [pc, #368]	; (8005be4 <tcp_slowtmr+0x500>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d006      	beq.n	8005a88 <tcp_slowtmr+0x3a4>
 8005a7a:	4b5b      	ldr	r3, [pc, #364]	; (8005be8 <tcp_slowtmr+0x504>)
 8005a7c:	f240 428d 	movw	r2, #1165	; 0x48d
 8005a80:	495c      	ldr	r1, [pc, #368]	; (8005bf4 <tcp_slowtmr+0x510>)
 8005a82:	485b      	ldr	r0, [pc, #364]	; (8005bf0 <tcp_slowtmr+0x50c>)
 8005a84:	f008 fb4e 	bl	800e124 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4a55      	ldr	r2, [pc, #340]	; (8005be4 <tcp_slowtmr+0x500>)
 8005a8e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005a90:	7fbb      	ldrb	r3, [r7, #30]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d010      	beq.n	8005ab8 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005a9e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	1d1d      	adds	r5, r3, #4
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	8adb      	ldrh	r3, [r3, #22]
 8005aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aaa:	8b12      	ldrh	r2, [r2, #24]
 8005aac:	9201      	str	r2, [sp, #4]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	f004 f842 	bl	8009b3c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	7d1b      	ldrb	r3, [r3, #20]
 8005ac2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	f7fe f8cb 	bl	8003c6c <memp_free>

      tcp_active_pcbs_changed = 0;
 8005ad6:	4b48      	ldr	r3, [pc, #288]	; (8005bf8 <tcp_slowtmr+0x514>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <tcp_slowtmr+0x408>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f06f 010c 	mvn.w	r1, #12
 8005ae8:	68b8      	ldr	r0, [r7, #8]
 8005aea:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005aec:	4b42      	ldr	r3, [pc, #264]	; (8005bf8 <tcp_slowtmr+0x514>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d035      	beq.n	8005b60 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8005af4:	e606      	b.n	8005704 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	7edb      	ldrb	r3, [r3, #27]
 8005b04:	3301      	adds	r3, #1
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	7eda      	ldrb	r2, [r3, #27]
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	7f1b      	ldrb	r3, [r3, #28]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d323      	bcc.n	8005b60 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005b1e:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <tcp_slowtmr+0x514>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <tcp_slowtmr+0x460>
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	6912      	ldr	r2, [r2, #16]
 8005b38:	6a39      	ldr	r1, [r7, #32]
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	4798      	blx	r3
 8005b3e:	4603      	mov	r3, r0
 8005b40:	777b      	strb	r3, [r7, #29]
 8005b42:	e001      	b.n	8005b48 <tcp_slowtmr+0x464>
 8005b44:	2300      	movs	r3, #0
 8005b46:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8005b48:	4b2b      	ldr	r3, [pc, #172]	; (8005bf8 <tcp_slowtmr+0x514>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d000      	beq.n	8005b52 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8005b50:	e5d8      	b.n	8005704 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005b52:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8005b5a:	6a38      	ldr	r0, [r7, #32]
 8005b5c:	f003 fd64 	bl	8009628 <tcp_output>
  while (pcb != NULL) {
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f47f add4 	bne.w	8005710 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8005b6c:	4b23      	ldr	r3, [pc, #140]	; (8005bfc <tcp_slowtmr+0x518>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005b72:	e068      	b.n	8005c46 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	7d1b      	ldrb	r3, [r3, #20]
 8005b78:	2b0a      	cmp	r3, #10
 8005b7a:	d006      	beq.n	8005b8a <tcp_slowtmr+0x4a6>
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <tcp_slowtmr+0x504>)
 8005b7e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005b82:	491f      	ldr	r1, [pc, #124]	; (8005c00 <tcp_slowtmr+0x51c>)
 8005b84:	481a      	ldr	r0, [pc, #104]	; (8005bf0 <tcp_slowtmr+0x50c>)
 8005b86:	f008 facd 	bl	800e124 <iprintf>
    pcb_remove = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005b8e:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <tcp_slowtmr+0x4f4>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2bf0      	cmp	r3, #240	; 0xf0
 8005b9a:	d902      	bls.n	8005ba2 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8005b9c:	7ffb      	ldrb	r3, [r7, #31]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005ba2:	7ffb      	ldrb	r3, [r7, #31]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d049      	beq.n	8005c3c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005baa:	f000 fafb 	bl	80061a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d029      	beq.n	8005c08 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005bb4:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <tcp_slowtmr+0x518>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d106      	bne.n	8005bcc <tcp_slowtmr+0x4e8>
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <tcp_slowtmr+0x504>)
 8005bc0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8005bc4:	490f      	ldr	r1, [pc, #60]	; (8005c04 <tcp_slowtmr+0x520>)
 8005bc6:	480a      	ldr	r0, [pc, #40]	; (8005bf0 <tcp_slowtmr+0x50c>)
 8005bc8:	f008 faac 	bl	800e124 <iprintf>
        prev->next = pcb->next;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	60da      	str	r2, [r3, #12]
 8005bd4:	e028      	b.n	8005c28 <tcp_slowtmr+0x544>
 8005bd6:	bf00      	nop
 8005bd8:	2000374c 	.word	0x2000374c
 8005bdc:	000124f8 	.word	0x000124f8
 8005be0:	10624dd3 	.word	0x10624dd3
 8005be4:	20003748 	.word	0x20003748
 8005be8:	0800f940 	.word	0x0800f940
 8005bec:	0800fb78 	.word	0x0800fb78
 8005bf0:	0800f97c 	.word	0x0800f97c
 8005bf4:	0800fba4 	.word	0x0800fba4
 8005bf8:	20003744 	.word	0x20003744
 8005bfc:	20003758 	.word	0x20003758
 8005c00:	0800fbd0 	.word	0x0800fbd0
 8005c04:	0800fc00 	.word	0x0800fc00
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005c08:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <tcp_slowtmr+0x570>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d006      	beq.n	8005c20 <tcp_slowtmr+0x53c>
 8005c12:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <tcp_slowtmr+0x574>)
 8005c14:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8005c18:	4910      	ldr	r1, [pc, #64]	; (8005c5c <tcp_slowtmr+0x578>)
 8005c1a:	4811      	ldr	r0, [pc, #68]	; (8005c60 <tcp_slowtmr+0x57c>)
 8005c1c:	f008 fa82 	bl	800e124 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	4a0b      	ldr	r2, [pc, #44]	; (8005c54 <tcp_slowtmr+0x570>)
 8005c26:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005c32:	69b9      	ldr	r1, [r7, #24]
 8005c34:	2001      	movs	r0, #1
 8005c36:	f7fe f819 	bl	8003c6c <memp_free>
 8005c3a:	e004      	b.n	8005c46 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d193      	bne.n	8005b74 <tcp_slowtmr+0x490>
    }
  }
}
 8005c4c:	bf00      	nop
 8005c4e:	3728      	adds	r7, #40	; 0x28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bdb0      	pop	{r4, r5, r7, pc}
 8005c54:	20003758 	.word	0x20003758
 8005c58:	0800f940 	.word	0x0800f940
 8005c5c:	0800fc28 	.word	0x0800fc28
 8005c60:	0800f97c 	.word	0x0800f97c

08005c64 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8005c6a:	4b2d      	ldr	r3, [pc, #180]	; (8005d20 <tcp_fasttmr+0xbc>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	4b2b      	ldr	r3, [pc, #172]	; (8005d20 <tcp_fasttmr+0xbc>)
 8005c74:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8005c76:	4b2b      	ldr	r3, [pc, #172]	; (8005d24 <tcp_fasttmr+0xc0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005c7c:	e048      	b.n	8005d10 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	7f5a      	ldrb	r2, [r3, #29]
 8005c82:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <tcp_fasttmr+0xbc>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d03f      	beq.n	8005d0a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8005c8a:	4b25      	ldr	r3, [pc, #148]	; (8005d20 <tcp_fasttmr+0xbc>)
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	7e9b      	ldrb	r3, [r3, #26]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d010      	beq.n	8005cc0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	7e9b      	ldrb	r3, [r3, #26]
 8005ca2:	f043 0302 	orr.w	r3, r3, #2
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f003 fcbb 	bl	8009628 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	7e9b      	ldrb	r3, [r3, #26]
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	7e9b      	ldrb	r3, [r3, #26]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7e9b      	ldrb	r3, [r3, #26]
 8005cd0:	f023 0308 	bic.w	r3, r3, #8
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff f954 	bl	8004f88 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8005cee:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <tcp_fasttmr+0xc4>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f819 	bl	8005d2c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <tcp_fasttmr+0xc4>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d000      	beq.n	8005d04 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8005d02:	e7b8      	b.n	8005c76 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	e002      	b.n	8005d10 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1b3      	bne.n	8005c7e <tcp_fasttmr+0x1a>
    }
  }
}
 8005d16:	bf00      	nop
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200000c6 	.word	0x200000c6
 8005d24:	20003748 	.word	0x20003748
 8005d28:	20003744 	.word	0x20003744

08005d2c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d38:	7b5b      	ldrb	r3, [r3, #13]
 8005d3a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d40:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <tcp_process_refused_data+0x3e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6918      	ldr	r0, [r3, #16]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	47a0      	blx	r4
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]
 8005d68:	e007      	b.n	8005d7a <tcp_process_refused_data+0x4e>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	2000      	movs	r0, #0
 8005d72:	f000 f88c 	bl	8005e8e <tcp_recv_null>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d12a      	bne.n	8005dd8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d033      	beq.n	8005df4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005d94:	d005      	beq.n	8005da2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00b      	beq.n	8005dc4 <tcp_process_refused_data+0x98>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6918      	ldr	r0, [r3, #16]
 8005db6:	2300      	movs	r3, #0
 8005db8:	2200      	movs	r2, #0
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	47a0      	blx	r4
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
 8005dc2:	e001      	b.n	8005dc8 <tcp_process_refused_data+0x9c>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8005dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dcc:	f113 0f0d 	cmn.w	r3, #13
 8005dd0:	d110      	bne.n	8005df4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8005dd2:	f06f 030c 	mvn.w	r3, #12
 8005dd6:	e00e      	b.n	8005df6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8005dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ddc:	f113 0f0d 	cmn.w	r3, #13
 8005de0:	d102      	bne.n	8005de8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8005de2:	f06f 030c 	mvn.w	r3, #12
 8005de6:	e006      	b.n	8005df6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8005dee:	f06f 0304 	mvn.w	r3, #4
 8005df2:	e000      	b.n	8005df6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd90      	pop	{r4, r7, pc}

08005dfe <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8005e06:	e007      	b.n	8005e18 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f809 	bl	8005e26 <tcp_seg_free>
    seg = next;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f4      	bne.n	8005e08 <tcp_segs_free+0xa>
  }
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00c      	beq.n	8005e4e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d004      	beq.n	8005e46 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fc3d 	bl	80046c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	2003      	movs	r0, #3
 8005e4a:	f7fd ff0f 	bl	8003c6c <memp_free>
  }
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005e5e:	2003      	movs	r0, #3
 8005e60:	f7fd feb8 	bl	8003bd4 <memp_malloc>
 8005e64:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <tcp_seg_copy+0x1a>
    return NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e00a      	b.n	8005e86 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005e70:	2210      	movs	r2, #16
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f008 f942 	bl	800e0fe <memcpy>
  pbuf_ref(cseg->p);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe fcca 	bl	8004818 <pbuf_ref>
  return cseg;
 8005e84:	68fb      	ldr	r3, [r7, #12]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	891b      	ldrh	r3, [r3, #8]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	68b8      	ldr	r0, [r7, #8]
 8005eaa:	f7ff fa89 	bl	80053c0 <tcp_recved>
    pbuf_free(p);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fe fc06 	bl	80046c0 <pbuf_free>
 8005eb4:	e008      	b.n	8005ec8 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8005eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8005ebe:	68b8      	ldr	r0, [r7, #8]
 8005ec0:	f7ff f8c8 	bl	8005054 <tcp_close>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	e000      	b.n	8005eca <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8005ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	db01      	blt.n	8005eea <tcp_kill_prio+0x16>
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	e000      	b.n	8005eec <tcp_kill_prio+0x18>
 8005eea:	237f      	movs	r3, #127	; 0x7f
 8005eec:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005ef6:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <tcp_kill_prio+0x7c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e01a      	b.n	8005f34 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	7d5b      	ldrb	r3, [r3, #21]
 8005f02:	7afa      	ldrb	r2, [r7, #11]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d312      	bcc.n	8005f2e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005f08:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <tcp_kill_prio+0x80>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d80a      	bhi.n	8005f2e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8005f18:	4b0e      	ldr	r3, [pc, #56]	; (8005f54 <tcp_kill_prio+0x80>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	7d5b      	ldrb	r3, [r3, #21]
 8005f2c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e1      	bne.n	8005efe <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005f40:	6938      	ldr	r0, [r7, #16]
 8005f42:	f7ff f951 	bl	80051e8 <tcp_abort>
  }
}
 8005f46:	bf00      	nop
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20003748 	.word	0x20003748
 8005f54:	2000374c 	.word	0x2000374c

08005f58 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d009      	beq.n	8005f7c <tcp_kill_state+0x24>
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d006      	beq.n	8005f7c <tcp_kill_state+0x24>
 8005f6e:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <tcp_kill_state+0x80>)
 8005f70:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005f74:	4919      	ldr	r1, [pc, #100]	; (8005fdc <tcp_kill_state+0x84>)
 8005f76:	481a      	ldr	r0, [pc, #104]	; (8005fe0 <tcp_kill_state+0x88>)
 8005f78:	f008 f8d4 	bl	800e124 <iprintf>

  inactivity = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005f84:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <tcp_kill_state+0x8c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	e017      	b.n	8005fbc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	7d1b      	ldrb	r3, [r3, #20]
 8005f90:	79fa      	ldrb	r2, [r7, #7]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d10f      	bne.n	8005fb6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005f96:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <tcp_kill_state+0x90>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d807      	bhi.n	8005fb6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8005fa6:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <tcp_kill_state+0x90>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e4      	bne.n	8005f8c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8005fc8:	2100      	movs	r1, #0
 8005fca:	6938      	ldr	r0, [r7, #16]
 8005fcc:	f7ff f85a 	bl	8005084 <tcp_abandon>
  }
}
 8005fd0:	bf00      	nop
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	0800f940 	.word	0x0800f940
 8005fdc:	0800fc50 	.word	0x0800fc50
 8005fe0:	0800f97c 	.word	0x0800f97c
 8005fe4:	20003748 	.word	0x20003748
 8005fe8:	2000374c 	.word	0x2000374c

08005fec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005ffa:	4b12      	ldr	r3, [pc, #72]	; (8006044 <tcp_kill_timewait+0x58>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	e012      	b.n	8006028 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006002:	4b11      	ldr	r3, [pc, #68]	; (8006048 <tcp_kill_timewait+0x5c>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	429a      	cmp	r2, r3
 8006010:	d807      	bhi.n	8006022 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006012:	4b0d      	ldr	r3, [pc, #52]	; (8006048 <tcp_kill_timewait+0x5c>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e9      	bne.n	8006002 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006034:	68b8      	ldr	r0, [r7, #8]
 8006036:	f7ff f8d7 	bl	80051e8 <tcp_abort>
  }
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20003758 	.word	0x20003758
 8006048:	2000374c 	.word	0x2000374c

0800604c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006056:	2001      	movs	r0, #1
 8006058:	f7fd fdbc 	bl	8003bd4 <memp_malloc>
 800605c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d124      	bne.n	80060ae <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006064:	f7ff ffc2 	bl	8005fec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006068:	2001      	movs	r0, #1
 800606a:	f7fd fdb3 	bl	8003bd4 <memp_malloc>
 800606e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d11b      	bne.n	80060ae <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006076:	2009      	movs	r0, #9
 8006078:	f7ff ff6e 	bl	8005f58 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800607c:	2001      	movs	r0, #1
 800607e:	f7fd fda9 	bl	8003bd4 <memp_malloc>
 8006082:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d111      	bne.n	80060ae <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800608a:	2008      	movs	r0, #8
 800608c:	f7ff ff64 	bl	8005f58 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006090:	2001      	movs	r0, #1
 8006092:	f7fd fd9f 	bl	8003bd4 <memp_malloc>
 8006096:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d107      	bne.n	80060ae <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff ff17 	bl	8005ed4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80060a6:	2001      	movs	r0, #1
 80060a8:	f7fd fd94 	bl	8003bd4 <memp_malloc>
 80060ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d03f      	beq.n	8006134 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80060b4:	2298      	movs	r2, #152	; 0x98
 80060b6:	2100      	movs	r1, #0
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f008 f82b 	bl	800e114 <memset>
    pcb->prio = prio;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	79fa      	ldrb	r2, [r7, #7]
 80060c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80060ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80060d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	22ff      	movs	r2, #255	; 0xff
 80060e2:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80060ea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2206      	movs	r2, #6
 80060f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2206      	movs	r2, #6
 80060f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006100:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800610a:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <tcp_alloc+0xf4>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006112:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <tcp_alloc+0xf8>)
 8006114:	781a      	ldrb	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006120:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a08      	ldr	r2, [pc, #32]	; (8006148 <tcp_alloc+0xfc>)
 8006128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4a07      	ldr	r2, [pc, #28]	; (800614c <tcp_alloc+0x100>)
 8006130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	2000374c 	.word	0x2000374c
 8006144:	200000c6 	.word	0x200000c6
 8006148:	08005e8f 	.word	0x08005e8f
 800614c:	006ddd00 	.word	0x006ddd00

08006150 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006154:	2040      	movs	r0, #64	; 0x40
 8006156:	f7ff ff79 	bl	800604c <tcp_alloc>
 800615a:	4603      	mov	r3, r0
}
 800615c:	4618      	mov	r0, r3
 800615e:	bd80      	pop	{r7, pc}

08006160 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00e      	beq.n	800618e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	7d1b      	ldrb	r3, [r3, #20]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d106      	bne.n	8006186 <tcp_recv+0x26>
 8006178:	4b07      	ldr	r3, [pc, #28]	; (8006198 <tcp_recv+0x38>)
 800617a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800617e:	4907      	ldr	r1, [pc, #28]	; (800619c <tcp_recv+0x3c>)
 8006180:	4807      	ldr	r0, [pc, #28]	; (80061a0 <tcp_recv+0x40>)
 8006182:	f007 ffcf 	bl	800e124 <iprintf>
    pcb->recv = recv;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	0800f940 	.word	0x0800f940
 800619c:	0800fc60 	.word	0x0800fc60
 80061a0:	0800f97c 	.word	0x0800f97c

080061a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	7d1b      	ldrb	r3, [r3, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d034      	beq.n	800621e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80061b8:	2b0a      	cmp	r3, #10
 80061ba:	d030      	beq.n	800621e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d02c      	beq.n	800621e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe fa75 	bl	80046c0 <pbuf_free>
      pcb->refused_data = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fe0c 	bl	8005dfe <tcp_segs_free>
    pcb->ooseq = NULL;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061f2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fe00 	bl	8005dfe <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fdfb 	bl	8005dfe <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	669a      	str	r2, [r3, #104]	; 0x68
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d105      	bne.n	8006248 <tcp_pcb_remove+0x20>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e013      	b.n	8006270 <tcp_pcb_remove+0x48>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	e00c      	b.n	800626a <tcp_pcb_remove+0x42>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d104      	bne.n	8006264 <tcp_pcb_remove+0x3c>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	60da      	str	r2, [r3, #12]
 8006262:	e005      	b.n	8006270 <tcp_pcb_remove+0x48>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1ef      	bne.n	8006250 <tcp_pcb_remove+0x28>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2200      	movs	r2, #0
 8006274:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006276:	6838      	ldr	r0, [r7, #0]
 8006278:	f7ff ff94 	bl	80061a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	7d1b      	ldrb	r3, [r3, #20]
 8006280:	2b0a      	cmp	r3, #10
 8006282:	d013      	beq.n	80062ac <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8006288:	2b01      	cmp	r3, #1
 800628a:	d00f      	beq.n	80062ac <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	7e9b      	ldrb	r3, [r3, #26]
 8006290:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	7e9b      	ldrb	r3, [r3, #26]
 800629c:	f043 0302 	orr.w	r3, r3, #2
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80062a6:	6838      	ldr	r0, [r7, #0]
 80062a8:	f003 f9be 	bl	8009628 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	7d1b      	ldrb	r3, [r3, #20]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d020      	beq.n	80062f6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d006      	beq.n	80062ca <tcp_pcb_remove+0xa2>
 80062bc:	4b13      	ldr	r3, [pc, #76]	; (800630c <tcp_pcb_remove+0xe4>)
 80062be:	f240 7253 	movw	r2, #1875	; 0x753
 80062c2:	4913      	ldr	r1, [pc, #76]	; (8006310 <tcp_pcb_remove+0xe8>)
 80062c4:	4813      	ldr	r0, [pc, #76]	; (8006314 <tcp_pcb_remove+0xec>)
 80062c6:	f007 ff2d 	bl	800e124 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d006      	beq.n	80062e0 <tcp_pcb_remove+0xb8>
 80062d2:	4b0e      	ldr	r3, [pc, #56]	; (800630c <tcp_pcb_remove+0xe4>)
 80062d4:	f240 7254 	movw	r2, #1876	; 0x754
 80062d8:	490f      	ldr	r1, [pc, #60]	; (8006318 <tcp_pcb_remove+0xf0>)
 80062da:	480e      	ldr	r0, [pc, #56]	; (8006314 <tcp_pcb_remove+0xec>)
 80062dc:	f007 ff22 	bl	800e124 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d006      	beq.n	80062f6 <tcp_pcb_remove+0xce>
 80062e8:	4b08      	ldr	r3, [pc, #32]	; (800630c <tcp_pcb_remove+0xe4>)
 80062ea:	f240 7256 	movw	r2, #1878	; 0x756
 80062ee:	490b      	ldr	r1, [pc, #44]	; (800631c <tcp_pcb_remove+0xf4>)
 80062f0:	4808      	ldr	r0, [pc, #32]	; (8006314 <tcp_pcb_remove+0xec>)
 80062f2:	f007 ff17 	bl	800e124 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2200      	movs	r2, #0
 80062fa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2200      	movs	r2, #0
 8006300:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	0800f940 	.word	0x0800f940
 8006310:	0800fcf8 	.word	0x0800fcf8
 8006314:	0800f97c 	.word	0x0800f97c
 8006318:	0800fd10 	.word	0x0800fd10
 800631c:	0800fd2c 	.word	0x0800fd2c

08006320 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <tcp_next_iss+0x28>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <tcp_next_iss+0x2c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4413      	add	r3, r2
 8006332:	4a05      	ldr	r2, [pc, #20]	; (8006348 <tcp_next_iss+0x28>)
 8006334:	6013      	str	r3, [r2, #0]
  return iss;
 8006336:	4b04      	ldr	r3, [pc, #16]	; (8006348 <tcp_next_iss+0x28>)
 8006338:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000008 	.word	0x20000008
 800634c:	2000374c 	.word	0x2000374c

08006350 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	6039      	str	r1, [r7, #0]
 800635a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800635c:	6838      	ldr	r0, [r7, #0]
 800635e:	f005 fc05 	bl	800bb6c <ip4_route>
 8006362:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	e010      	b.n	8006390 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006372:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006374:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d008      	beq.n	800638e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800637c:	897b      	ldrh	r3, [r7, #10]
 800637e:	3b28      	subs	r3, #40	; 0x28
 8006380:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006382:	893a      	ldrh	r2, [r7, #8]
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	4293      	cmp	r3, r2
 8006388:	bf28      	it	cs
 800638a:	4613      	movcs	r3, r2
 800638c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800638e:	88fb      	ldrh	r3, [r7, #6]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80063a6:	e011      	b.n	80063cc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d108      	bne.n	80063c6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7fe ff14 	bl	80051e8 <tcp_abort>
      pcb = next;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e002      	b.n	80063cc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1ea      	bne.n	80063a8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80063d2:	bf00      	nop
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d02c      	beq.n	8006446 <tcp_netif_ip_addr_changed+0x6a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d028      	beq.n	8006446 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80063f4:	4b16      	ldr	r3, [pc, #88]	; (8006450 <tcp_netif_ip_addr_changed+0x74>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff ffcc 	bl	8006398 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006400:	4b14      	ldr	r3, [pc, #80]	; (8006454 <tcp_netif_ip_addr_changed+0x78>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff ffc6 	bl	8006398 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d019      	beq.n	8006446 <tcp_netif_ip_addr_changed+0x6a>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d015      	beq.n	8006446 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <tcp_netif_ip_addr_changed+0x7c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	e00e      	b.n	8006440 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d103      	bne.n	800643c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1ed      	bne.n	8006422 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006446:	bf00      	nop
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20003748 	.word	0x20003748
 8006454:	20003754 	.word	0x20003754
 8006458:	20003750 	.word	0x20003750

0800645c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b08b      	sub	sp, #44	; 0x2c
 8006460:	af02      	add	r7, sp, #8
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	4a82      	ldr	r2, [pc, #520]	; (8006674 <tcp_input+0x218>)
 800646c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	895b      	ldrh	r3, [r3, #10]
 8006472:	2b13      	cmp	r3, #19
 8006474:	f240 838a 	bls.w	8006b8c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006478:	4b7f      	ldr	r3, [pc, #508]	; (8006678 <tcp_input+0x21c>)
 800647a:	695a      	ldr	r2, [r3, #20]
 800647c:	4b7e      	ldr	r3, [pc, #504]	; (8006678 <tcp_input+0x21c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f005 fdec 	bl	800c060 <ip4_addr_isbroadcast_u32>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	f040 8380 	bne.w	8006b90 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006490:	4b79      	ldr	r3, [pc, #484]	; (8006678 <tcp_input+0x21c>)
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006498:	2be0      	cmp	r3, #224	; 0xe0
 800649a:	f000 8379 	beq.w	8006b90 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800649e:	4b75      	ldr	r3, [pc, #468]	; (8006674 <tcp_input+0x218>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	899b      	ldrh	r3, [r3, #12]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fc ffe5 	bl	8003476 <lwip_htons>
 80064ac:	4603      	mov	r3, r0
 80064ae:	0b1b      	lsrs	r3, r3, #12
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80064b8:	7cbb      	ldrb	r3, [r7, #18]
 80064ba:	2b13      	cmp	r3, #19
 80064bc:	f240 8368 	bls.w	8006b90 <tcp_input+0x734>
 80064c0:	7cbb      	ldrb	r3, [r7, #18]
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	891b      	ldrh	r3, [r3, #8]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	f200 8361 	bhi.w	8006b90 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80064ce:	7cbb      	ldrb	r3, [r7, #18]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b14      	subs	r3, #20
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	4b69      	ldr	r3, [pc, #420]	; (800667c <tcp_input+0x220>)
 80064d8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80064da:	4b69      	ldr	r3, [pc, #420]	; (8006680 <tcp_input+0x224>)
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	895a      	ldrh	r2, [r3, #10]
 80064e4:	7cbb      	ldrb	r3, [r7, #18]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d30d      	bcc.n	8006508 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80064ec:	4b63      	ldr	r3, [pc, #396]	; (800667c <tcp_input+0x220>)
 80064ee:	881a      	ldrh	r2, [r3, #0]
 80064f0:	4b64      	ldr	r3, [pc, #400]	; (8006684 <tcp_input+0x228>)
 80064f2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80064f4:	7cbb      	ldrb	r3, [r7, #18]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	425b      	negs	r3, r3
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	b21b      	sxth	r3, r3
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fe f8b9 	bl	8004678 <pbuf_header>
 8006506:	e055      	b.n	80065b4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d105      	bne.n	800651c <tcp_input+0xc0>
 8006510:	4b5d      	ldr	r3, [pc, #372]	; (8006688 <tcp_input+0x22c>)
 8006512:	22b2      	movs	r2, #178	; 0xb2
 8006514:	495d      	ldr	r1, [pc, #372]	; (800668c <tcp_input+0x230>)
 8006516:	485e      	ldr	r0, [pc, #376]	; (8006690 <tcp_input+0x234>)
 8006518:	f007 fe04 	bl	800e124 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800651c:	f06f 0113 	mvn.w	r1, #19
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7fe f8a9 	bl	8004678 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	895a      	ldrh	r2, [r3, #10]
 800652a:	4b56      	ldr	r3, [pc, #344]	; (8006684 <tcp_input+0x228>)
 800652c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800652e:	4b53      	ldr	r3, [pc, #332]	; (800667c <tcp_input+0x220>)
 8006530:	881a      	ldrh	r2, [r3, #0]
 8006532:	4b54      	ldr	r3, [pc, #336]	; (8006684 <tcp_input+0x228>)
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800653a:	4b52      	ldr	r3, [pc, #328]	; (8006684 <tcp_input+0x228>)
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	425b      	negs	r3, r3
 8006540:	b29b      	uxth	r3, r3
 8006542:	b21b      	sxth	r3, r3
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fe f896 	bl	8004678 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	895b      	ldrh	r3, [r3, #10]
 8006552:	8a3a      	ldrh	r2, [r7, #16]
 8006554:	429a      	cmp	r2, r3
 8006556:	f200 831d 	bhi.w	8006b94 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4a47      	ldr	r2, [pc, #284]	; (8006680 <tcp_input+0x224>)
 8006562:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	8a3b      	ldrh	r3, [r7, #16]
 800656a:	425b      	negs	r3, r3
 800656c:	b29b      	uxth	r3, r3
 800656e:	b21b      	sxth	r3, r3
 8006570:	4619      	mov	r1, r3
 8006572:	4610      	mov	r0, r2
 8006574:	f7fe f880 	bl	8004678 <pbuf_header>
    p->tot_len -= opt2len;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	891a      	ldrh	r2, [r3, #8]
 800657c:	8a3b      	ldrh	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	b29a      	uxth	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	895b      	ldrh	r3, [r3, #10]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <tcp_input+0x13e>
 800658e:	4b3e      	ldr	r3, [pc, #248]	; (8006688 <tcp_input+0x22c>)
 8006590:	22cf      	movs	r2, #207	; 0xcf
 8006592:	4940      	ldr	r1, [pc, #256]	; (8006694 <tcp_input+0x238>)
 8006594:	483e      	ldr	r0, [pc, #248]	; (8006690 <tcp_input+0x234>)
 8006596:	f007 fdc5 	bl	800e124 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	891a      	ldrh	r2, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	891b      	ldrh	r3, [r3, #8]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d005      	beq.n	80065b4 <tcp_input+0x158>
 80065a8:	4b37      	ldr	r3, [pc, #220]	; (8006688 <tcp_input+0x22c>)
 80065aa:	22d0      	movs	r2, #208	; 0xd0
 80065ac:	493a      	ldr	r1, [pc, #232]	; (8006698 <tcp_input+0x23c>)
 80065ae:	4838      	ldr	r0, [pc, #224]	; (8006690 <tcp_input+0x234>)
 80065b0:	f007 fdb8 	bl	800e124 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80065b4:	4b2f      	ldr	r3, [pc, #188]	; (8006674 <tcp_input+0x218>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	4b2d      	ldr	r3, [pc, #180]	; (8006674 <tcp_input+0x218>)
 80065be:	681c      	ldr	r4, [r3, #0]
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7fc ff58 	bl	8003476 <lwip_htons>
 80065c6:	4603      	mov	r3, r0
 80065c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80065ca:	4b2a      	ldr	r3, [pc, #168]	; (8006674 <tcp_input+0x218>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	885b      	ldrh	r3, [r3, #2]
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	4b28      	ldr	r3, [pc, #160]	; (8006674 <tcp_input+0x218>)
 80065d4:	681c      	ldr	r4, [r3, #0]
 80065d6:	4610      	mov	r0, r2
 80065d8:	f7fc ff4d 	bl	8003476 <lwip_htons>
 80065dc:	4603      	mov	r3, r0
 80065de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80065e0:	4b24      	ldr	r3, [pc, #144]	; (8006674 <tcp_input+0x218>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	4b23      	ldr	r3, [pc, #140]	; (8006674 <tcp_input+0x218>)
 80065e8:	681c      	ldr	r4, [r3, #0]
 80065ea:	4610      	mov	r0, r2
 80065ec:	f7fc ff51 	bl	8003492 <lwip_htonl>
 80065f0:	4603      	mov	r3, r0
 80065f2:	6063      	str	r3, [r4, #4]
 80065f4:	6863      	ldr	r3, [r4, #4]
 80065f6:	4a29      	ldr	r2, [pc, #164]	; (800669c <tcp_input+0x240>)
 80065f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80065fa:	4b1e      	ldr	r3, [pc, #120]	; (8006674 <tcp_input+0x218>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <tcp_input+0x218>)
 8006602:	681c      	ldr	r4, [r3, #0]
 8006604:	4610      	mov	r0, r2
 8006606:	f7fc ff44 	bl	8003492 <lwip_htonl>
 800660a:	4603      	mov	r3, r0
 800660c:	60a3      	str	r3, [r4, #8]
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	4a23      	ldr	r2, [pc, #140]	; (80066a0 <tcp_input+0x244>)
 8006612:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006614:	4b17      	ldr	r3, [pc, #92]	; (8006674 <tcp_input+0x218>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	89db      	ldrh	r3, [r3, #14]
 800661a:	b29a      	uxth	r2, r3
 800661c:	4b15      	ldr	r3, [pc, #84]	; (8006674 <tcp_input+0x218>)
 800661e:	681c      	ldr	r4, [r3, #0]
 8006620:	4610      	mov	r0, r2
 8006622:	f7fc ff28 	bl	8003476 <lwip_htons>
 8006626:	4603      	mov	r3, r0
 8006628:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800662a:	4b12      	ldr	r3, [pc, #72]	; (8006674 <tcp_input+0x218>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	899b      	ldrh	r3, [r3, #12]
 8006630:	b29b      	uxth	r3, r3
 8006632:	4618      	mov	r0, r3
 8006634:	f7fc ff1f 	bl	8003476 <lwip_htons>
 8006638:	4603      	mov	r3, r0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006640:	b2da      	uxtb	r2, r3
 8006642:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <tcp_input+0x248>)
 8006644:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	891a      	ldrh	r2, [r3, #8]
 800664a:	4b16      	ldr	r3, [pc, #88]	; (80066a4 <tcp_input+0x248>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b00      	cmp	r3, #0
 8006654:	bf14      	ite	ne
 8006656:	2301      	movne	r3, #1
 8006658:	2300      	moveq	r3, #0
 800665a:	b2db      	uxtb	r3, r3
 800665c:	b29b      	uxth	r3, r3
 800665e:	4413      	add	r3, r2
 8006660:	b29a      	uxth	r2, r3
 8006662:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <tcp_input+0x24c>)
 8006664:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800666a:	4b10      	ldr	r3, [pc, #64]	; (80066ac <tcp_input+0x250>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	e082      	b.n	8006778 <tcp_input+0x31c>
 8006672:	bf00      	nop
 8006674:	200000d8 	.word	0x200000d8
 8006678:	20000218 	.word	0x20000218
 800667c:	200000dc 	.word	0x200000dc
 8006680:	200000e0 	.word	0x200000e0
 8006684:	200000de 	.word	0x200000de
 8006688:	0800fd44 	.word	0x0800fd44
 800668c:	0800fd78 	.word	0x0800fd78
 8006690:	0800fd88 	.word	0x0800fd88
 8006694:	0800fdb0 	.word	0x0800fdb0
 8006698:	0800fdbc 	.word	0x0800fdbc
 800669c:	200000e8 	.word	0x200000e8
 80066a0:	200000ec 	.word	0x200000ec
 80066a4:	200000f4 	.word	0x200000f4
 80066a8:	200000f2 	.word	0x200000f2
 80066ac:	20003748 	.word	0x20003748
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	7d1b      	ldrb	r3, [r3, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d105      	bne.n	80066c4 <tcp_input+0x268>
 80066b8:	4b8f      	ldr	r3, [pc, #572]	; (80068f8 <tcp_input+0x49c>)
 80066ba:	22e2      	movs	r2, #226	; 0xe2
 80066bc:	498f      	ldr	r1, [pc, #572]	; (80068fc <tcp_input+0x4a0>)
 80066be:	4890      	ldr	r0, [pc, #576]	; (8006900 <tcp_input+0x4a4>)
 80066c0:	f007 fd30 	bl	800e124 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	7d1b      	ldrb	r3, [r3, #20]
 80066c8:	2b0a      	cmp	r3, #10
 80066ca:	d105      	bne.n	80066d8 <tcp_input+0x27c>
 80066cc:	4b8a      	ldr	r3, [pc, #552]	; (80068f8 <tcp_input+0x49c>)
 80066ce:	22e3      	movs	r2, #227	; 0xe3
 80066d0:	498c      	ldr	r1, [pc, #560]	; (8006904 <tcp_input+0x4a8>)
 80066d2:	488b      	ldr	r0, [pc, #556]	; (8006900 <tcp_input+0x4a4>)
 80066d4:	f007 fd26 	bl	800e124 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	7d1b      	ldrb	r3, [r3, #20]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d105      	bne.n	80066ec <tcp_input+0x290>
 80066e0:	4b85      	ldr	r3, [pc, #532]	; (80068f8 <tcp_input+0x49c>)
 80066e2:	22e4      	movs	r2, #228	; 0xe4
 80066e4:	4988      	ldr	r1, [pc, #544]	; (8006908 <tcp_input+0x4ac>)
 80066e6:	4886      	ldr	r0, [pc, #536]	; (8006900 <tcp_input+0x4a4>)
 80066e8:	f007 fd1c 	bl	800e124 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	8b1a      	ldrh	r2, [r3, #24]
 80066f0:	4b86      	ldr	r3, [pc, #536]	; (800690c <tcp_input+0x4b0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d138      	bne.n	800676e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	8ada      	ldrh	r2, [r3, #22]
 8006700:	4b82      	ldr	r3, [pc, #520]	; (800690c <tcp_input+0x4b0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	885b      	ldrh	r3, [r3, #2]
 8006706:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006708:	429a      	cmp	r2, r3
 800670a:	d130      	bne.n	800676e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	4b7f      	ldr	r3, [pc, #508]	; (8006910 <tcp_input+0x4b4>)
 8006712:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006714:	429a      	cmp	r2, r3
 8006716:	d12a      	bne.n	800676e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	4b7c      	ldr	r3, [pc, #496]	; (8006910 <tcp_input+0x4b4>)
 800671e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006720:	429a      	cmp	r2, r3
 8006722:	d124      	bne.n	800676e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	429a      	cmp	r2, r3
 800672c:	d105      	bne.n	800673a <tcp_input+0x2de>
 800672e:	4b72      	ldr	r3, [pc, #456]	; (80068f8 <tcp_input+0x49c>)
 8006730:	22ec      	movs	r2, #236	; 0xec
 8006732:	4978      	ldr	r1, [pc, #480]	; (8006914 <tcp_input+0x4b8>)
 8006734:	4872      	ldr	r0, [pc, #456]	; (8006900 <tcp_input+0x4a4>)
 8006736:	f007 fcf5 	bl	800e124 <iprintf>
      if (prev != NULL) {
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006748:	4b73      	ldr	r3, [pc, #460]	; (8006918 <tcp_input+0x4bc>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006750:	4a71      	ldr	r2, [pc, #452]	; (8006918 <tcp_input+0x4bc>)
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	429a      	cmp	r2, r3
 800675e:	d10f      	bne.n	8006780 <tcp_input+0x324>
 8006760:	4b65      	ldr	r3, [pc, #404]	; (80068f8 <tcp_input+0x49c>)
 8006762:	22f4      	movs	r2, #244	; 0xf4
 8006764:	496d      	ldr	r1, [pc, #436]	; (800691c <tcp_input+0x4c0>)
 8006766:	4866      	ldr	r0, [pc, #408]	; (8006900 <tcp_input+0x4a4>)
 8006768:	f007 fcdc 	bl	800e124 <iprintf>
      break;
 800676c:	e008      	b.n	8006780 <tcp_input+0x324>
    }
    prev = pcb;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d198      	bne.n	80066b0 <tcp_input+0x254>
 800677e:	e000      	b.n	8006782 <tcp_input+0x326>
      break;
 8006780:	bf00      	nop
  }

  if (pcb == NULL) {
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d173      	bne.n	8006870 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006788:	4b65      	ldr	r3, [pc, #404]	; (8006920 <tcp_input+0x4c4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	e02f      	b.n	80067f0 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	7d1b      	ldrb	r3, [r3, #20]
 8006794:	2b0a      	cmp	r3, #10
 8006796:	d005      	beq.n	80067a4 <tcp_input+0x348>
 8006798:	4b57      	ldr	r3, [pc, #348]	; (80068f8 <tcp_input+0x49c>)
 800679a:	22fe      	movs	r2, #254	; 0xfe
 800679c:	4961      	ldr	r1, [pc, #388]	; (8006924 <tcp_input+0x4c8>)
 800679e:	4858      	ldr	r0, [pc, #352]	; (8006900 <tcp_input+0x4a4>)
 80067a0:	f007 fcc0 	bl	800e124 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	8b1a      	ldrh	r2, [r3, #24]
 80067a8:	4b58      	ldr	r3, [pc, #352]	; (800690c <tcp_input+0x4b0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d11a      	bne.n	80067ea <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	8ada      	ldrh	r2, [r3, #22]
 80067b8:	4b54      	ldr	r3, [pc, #336]	; (800690c <tcp_input+0x4b0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	885b      	ldrh	r3, [r3, #2]
 80067be:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d112      	bne.n	80067ea <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	4b51      	ldr	r3, [pc, #324]	; (8006910 <tcp_input+0x4b4>)
 80067ca:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d10c      	bne.n	80067ea <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	4b4e      	ldr	r3, [pc, #312]	; (8006910 <tcp_input+0x4b4>)
 80067d6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80067d8:	429a      	cmp	r2, r3
 80067da:	d106      	bne.n	80067ea <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80067dc:	69f8      	ldr	r0, [r7, #28]
 80067de:	f000 fb15 	bl	8006e0c <tcp_timewait_input>
        pbuf_free(p);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fd ff6c 	bl	80046c0 <pbuf_free>
        return;
 80067e8:	e1da      	b.n	8006ba0 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1cc      	bne.n	8006790 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80067fa:	4b4b      	ldr	r3, [pc, #300]	; (8006928 <tcp_input+0x4cc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e019      	b.n	8006836 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	8ada      	ldrh	r2, [r3, #22]
 8006806:	4b41      	ldr	r3, [pc, #260]	; (800690c <tcp_input+0x4b0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	885b      	ldrh	r3, [r3, #2]
 800680c:	b29b      	uxth	r3, r3
 800680e:	429a      	cmp	r2, r3
 8006810:	d10c      	bne.n	800682c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4b3e      	ldr	r3, [pc, #248]	; (8006910 <tcp_input+0x4b4>)
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	429a      	cmp	r2, r3
 800681c:	d00f      	beq.n	800683e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00d      	beq.n	8006840 <tcp_input+0x3e4>
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e2      	bne.n	8006802 <tcp_input+0x3a6>
 800683c:	e000      	b.n	8006840 <tcp_input+0x3e4>
            break;
 800683e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d014      	beq.n	8006870 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006854:	4b34      	ldr	r3, [pc, #208]	; (8006928 <tcp_input+0x4cc>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800685c:	4a32      	ldr	r2, [pc, #200]	; (8006928 <tcp_input+0x4cc>)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8006862:	6978      	ldr	r0, [r7, #20]
 8006864:	f000 f9f0 	bl	8006c48 <tcp_listen_input>
      pbuf_free(p);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fd ff29 	bl	80046c0 <pbuf_free>
      return;
 800686e:	e197      	b.n	8006ba0 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 8164 	beq.w	8006b40 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006878:	4b2c      	ldr	r3, [pc, #176]	; (800692c <tcp_input+0x4d0>)
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	891a      	ldrh	r2, [r3, #8]
 8006882:	4b2a      	ldr	r3, [pc, #168]	; (800692c <tcp_input+0x4d0>)
 8006884:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006886:	4a29      	ldr	r2, [pc, #164]	; (800692c <tcp_input+0x4d0>)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800688c:	4b1f      	ldr	r3, [pc, #124]	; (800690c <tcp_input+0x4b0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a26      	ldr	r2, [pc, #152]	; (800692c <tcp_input+0x4d0>)
 8006892:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006894:	4b26      	ldr	r3, [pc, #152]	; (8006930 <tcp_input+0x4d4>)
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800689a:	4b26      	ldr	r3, [pc, #152]	; (8006934 <tcp_input+0x4d8>)
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80068a0:	4b25      	ldr	r3, [pc, #148]	; (8006938 <tcp_input+0x4dc>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80068a6:	4b25      	ldr	r3, [pc, #148]	; (800693c <tcp_input+0x4e0>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d006      	beq.n	80068c0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7b5b      	ldrb	r3, [r3, #13]
 80068b6:	f043 0301 	orr.w	r3, r3, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d03d      	beq.n	8006944 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80068c8:	69f8      	ldr	r0, [r7, #28]
 80068ca:	f7ff fa2f 	bl	8005d2c <tcp_process_refused_data>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f113 0f0d 	cmn.w	r3, #13
 80068d4:	d007      	beq.n	80068e6 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d032      	beq.n	8006944 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80068de:	4b18      	ldr	r3, [pc, #96]	; (8006940 <tcp_input+0x4e4>)
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d02e      	beq.n	8006944 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f040 8108 	bne.w	8006b00 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80068f0:	69f8      	ldr	r0, [r7, #28]
 80068f2:	f002 fe3d 	bl	8009570 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80068f6:	e103      	b.n	8006b00 <tcp_input+0x6a4>
 80068f8:	0800fd44 	.word	0x0800fd44
 80068fc:	0800fddc 	.word	0x0800fddc
 8006900:	0800fd88 	.word	0x0800fd88
 8006904:	0800fe04 	.word	0x0800fe04
 8006908:	0800fe30 	.word	0x0800fe30
 800690c:	200000d8 	.word	0x200000d8
 8006910:	20000218 	.word	0x20000218
 8006914:	0800fe58 	.word	0x0800fe58
 8006918:	20003748 	.word	0x20003748
 800691c:	0800fe84 	.word	0x0800fe84
 8006920:	20003758 	.word	0x20003758
 8006924:	0800feb0 	.word	0x0800feb0
 8006928:	20003750 	.word	0x20003750
 800692c:	200000c8 	.word	0x200000c8
 8006930:	200000f8 	.word	0x200000f8
 8006934:	200000f5 	.word	0x200000f5
 8006938:	200000f0 	.word	0x200000f0
 800693c:	200000f4 	.word	0x200000f4
 8006940:	200000f2 	.word	0x200000f2
      }
    }
    tcp_input_pcb = pcb;
 8006944:	4a98      	ldr	r2, [pc, #608]	; (8006ba8 <tcp_input+0x74c>)
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800694a:	69f8      	ldr	r0, [r7, #28]
 800694c:	f000 fac6 	bl	8006edc <tcp_process>
 8006950:	4603      	mov	r3, r0
 8006952:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006954:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006958:	f113 0f0d 	cmn.w	r3, #13
 800695c:	f000 80d2 	beq.w	8006b04 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8006960:	4b92      	ldr	r3, [pc, #584]	; (8006bac <tcp_input+0x750>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b00      	cmp	r3, #0
 800696a:	d016      	beq.n	800699a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <tcp_input+0x52c>
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800697c:	69fa      	ldr	r2, [r7, #28]
 800697e:	6912      	ldr	r2, [r2, #16]
 8006980:	f06f 010d 	mvn.w	r1, #13
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006988:	69f9      	ldr	r1, [r7, #28]
 800698a:	4889      	ldr	r0, [pc, #548]	; (8006bb0 <tcp_input+0x754>)
 800698c:	f7ff fc4c 	bl	8006228 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8006990:	69f9      	ldr	r1, [r7, #28]
 8006992:	2001      	movs	r0, #1
 8006994:	f7fd f96a 	bl	8003c6c <memp_free>
 8006998:	e0bf      	b.n	8006b1a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800699e:	4b85      	ldr	r3, [pc, #532]	; (8006bb4 <tcp_input+0x758>)
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d01b      	beq.n	80069de <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80069a6:	4b83      	ldr	r3, [pc, #524]	; (8006bb4 <tcp_input+0x758>)
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <tcp_input+0x56c>
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	6910      	ldr	r0, [r2, #16]
 80069bc:	89fa      	ldrh	r2, [r7, #14]
 80069be:	69f9      	ldr	r1, [r7, #28]
 80069c0:	4798      	blx	r3
 80069c2:	4603      	mov	r3, r0
 80069c4:	74fb      	strb	r3, [r7, #19]
 80069c6:	e001      	b.n	80069cc <tcp_input+0x570>
 80069c8:	2300      	movs	r3, #0
 80069ca:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80069cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80069d0:	f113 0f0d 	cmn.w	r3, #13
 80069d4:	f000 8098 	beq.w	8006b08 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 80069d8:	4b76      	ldr	r3, [pc, #472]	; (8006bb4 <tcp_input+0x758>)
 80069da:	2200      	movs	r2, #0
 80069dc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80069de:	69f8      	ldr	r0, [r7, #28]
 80069e0:	f000 f900 	bl	8006be4 <tcp_input_delayed_close>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f040 8090 	bne.w	8006b0c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80069ec:	4b72      	ldr	r3, [pc, #456]	; (8006bb8 <tcp_input+0x75c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d041      	beq.n	8006a78 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <tcp_input+0x5ae>
 80069fc:	4b6f      	ldr	r3, [pc, #444]	; (8006bbc <tcp_input+0x760>)
 80069fe:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006a02:	496f      	ldr	r1, [pc, #444]	; (8006bc0 <tcp_input+0x764>)
 8006a04:	486f      	ldr	r0, [pc, #444]	; (8006bc4 <tcp_input+0x768>)
 8006a06:	f007 fb8d 	bl	800e124 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	7e9b      	ldrb	r3, [r3, #26]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d008      	beq.n	8006a28 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006a16:	4b68      	ldr	r3, [pc, #416]	; (8006bb8 <tcp_input+0x75c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fd fe50 	bl	80046c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006a20:	69f8      	ldr	r0, [r7, #28]
 8006a22:	f7fe fbe1 	bl	80051e8 <tcp_abort>
            goto aborted;
 8006a26:	e078      	b.n	8006b1a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <tcp_input+0x5f0>
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	6918      	ldr	r0, [r3, #16]
 8006a3c:	4b5e      	ldr	r3, [pc, #376]	; (8006bb8 <tcp_input+0x75c>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	69f9      	ldr	r1, [r7, #28]
 8006a44:	47a0      	blx	r4
 8006a46:	4603      	mov	r3, r0
 8006a48:	74fb      	strb	r3, [r7, #19]
 8006a4a:	e008      	b.n	8006a5e <tcp_input+0x602>
 8006a4c:	4b5a      	ldr	r3, [pc, #360]	; (8006bb8 <tcp_input+0x75c>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	2300      	movs	r3, #0
 8006a52:	69f9      	ldr	r1, [r7, #28]
 8006a54:	2000      	movs	r0, #0
 8006a56:	f7ff fa1a 	bl	8005e8e <tcp_recv_null>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8006a5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a62:	f113 0f0d 	cmn.w	r3, #13
 8006a66:	d053      	beq.n	8006b10 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8006a70:	4b51      	ldr	r3, [pc, #324]	; (8006bb8 <tcp_input+0x75c>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8006a78:	4b4c      	ldr	r3, [pc, #304]	; (8006bac <tcp_input+0x750>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d030      	beq.n	8006ae6 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d009      	beq.n	8006aa0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a90:	7b5a      	ldrb	r2, [r3, #13]
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a96:	f042 0220 	orr.w	r2, r2, #32
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	735a      	strb	r2, [r3, #13]
 8006a9e:	e022      	b.n	8006ae6 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006aa8:	d005      	beq.n	8006ab6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aae:	3301      	adds	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <tcp_input+0x67c>
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	6918      	ldr	r0, [r3, #16]
 8006aca:	2300      	movs	r3, #0
 8006acc:	2200      	movs	r2, #0
 8006ace:	69f9      	ldr	r1, [r7, #28]
 8006ad0:	47a0      	blx	r4
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	74fb      	strb	r3, [r7, #19]
 8006ad6:	e001      	b.n	8006adc <tcp_input+0x680>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006adc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ae0:	f113 0f0d 	cmn.w	r3, #13
 8006ae4:	d016      	beq.n	8006b14 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006ae6:	4b30      	ldr	r3, [pc, #192]	; (8006ba8 <tcp_input+0x74c>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006aec:	69f8      	ldr	r0, [r7, #28]
 8006aee:	f000 f879 	bl	8006be4 <tcp_input_delayed_close>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10f      	bne.n	8006b18 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8006af8:	69f8      	ldr	r0, [r7, #28]
 8006afa:	f002 fd95 	bl	8009628 <tcp_output>
 8006afe:	e00c      	b.n	8006b1a <tcp_input+0x6be>
        goto aborted;
 8006b00:	bf00      	nop
 8006b02:	e00a      	b.n	8006b1a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006b04:	bf00      	nop
 8006b06:	e008      	b.n	8006b1a <tcp_input+0x6be>
              goto aborted;
 8006b08:	bf00      	nop
 8006b0a:	e006      	b.n	8006b1a <tcp_input+0x6be>
          goto aborted;
 8006b0c:	bf00      	nop
 8006b0e:	e004      	b.n	8006b1a <tcp_input+0x6be>
            goto aborted;
 8006b10:	bf00      	nop
 8006b12:	e002      	b.n	8006b1a <tcp_input+0x6be>
              goto aborted;
 8006b14:	bf00      	nop
 8006b16:	e000      	b.n	8006b1a <tcp_input+0x6be>
          goto aborted;
 8006b18:	bf00      	nop
    tcp_input_pcb = NULL;
 8006b1a:	4b23      	ldr	r3, [pc, #140]	; (8006ba8 <tcp_input+0x74c>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006b20:	4b25      	ldr	r3, [pc, #148]	; (8006bb8 <tcp_input+0x75c>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8006b26:	4b28      	ldr	r3, [pc, #160]	; (8006bc8 <tcp_input+0x76c>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d037      	beq.n	8006b9e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8006b2e:	4b26      	ldr	r3, [pc, #152]	; (8006bc8 <tcp_input+0x76c>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fd fdc4 	bl	80046c0 <pbuf_free>
      inseg.p = NULL;
 8006b38:	4b23      	ldr	r3, [pc, #140]	; (8006bc8 <tcp_input+0x76c>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006b3e:	e02e      	b.n	8006b9e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006b40:	4b22      	ldr	r3, [pc, #136]	; (8006bcc <tcp_input+0x770>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	899b      	ldrh	r3, [r3, #12]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fc fc94 	bl	8003476 <lwip_htons>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d115      	bne.n	8006b84 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b58:	4b1d      	ldr	r3, [pc, #116]	; (8006bd0 <tcp_input+0x774>)
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <tcp_input+0x778>)
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <tcp_input+0x77c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006b68:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <tcp_input+0x770>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b6c:	885b      	ldrh	r3, [r3, #2]
 8006b6e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006b70:	4a16      	ldr	r2, [pc, #88]	; (8006bcc <tcp_input+0x770>)
 8006b72:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b74:	8812      	ldrh	r2, [r2, #0]
 8006b76:	b292      	uxth	r2, r2
 8006b78:	9201      	str	r2, [sp, #4]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	4b17      	ldr	r3, [pc, #92]	; (8006bdc <tcp_input+0x780>)
 8006b7e:	4a18      	ldr	r2, [pc, #96]	; (8006be0 <tcp_input+0x784>)
 8006b80:	f002 ffdc 	bl	8009b3c <tcp_rst>
    pbuf_free(p);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7fd fd9b 	bl	80046c0 <pbuf_free>
  return;
 8006b8a:	e008      	b.n	8006b9e <tcp_input+0x742>
    goto dropped;
 8006b8c:	bf00      	nop
 8006b8e:	e002      	b.n	8006b96 <tcp_input+0x73a>
dropped:
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <tcp_input+0x73a>
      goto dropped;
 8006b94:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fd fd92 	bl	80046c0 <pbuf_free>
 8006b9c:	e000      	b.n	8006ba0 <tcp_input+0x744>
  return;
 8006b9e:	bf00      	nop
}
 8006ba0:	3724      	adds	r7, #36	; 0x24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd90      	pop	{r4, r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	2000375c 	.word	0x2000375c
 8006bac:	200000f5 	.word	0x200000f5
 8006bb0:	20003748 	.word	0x20003748
 8006bb4:	200000f0 	.word	0x200000f0
 8006bb8:	200000f8 	.word	0x200000f8
 8006bbc:	0800fd44 	.word	0x0800fd44
 8006bc0:	0800fee0 	.word	0x0800fee0
 8006bc4:	0800fd88 	.word	0x0800fd88
 8006bc8:	200000c8 	.word	0x200000c8
 8006bcc:	200000d8 	.word	0x200000d8
 8006bd0:	200000ec 	.word	0x200000ec
 8006bd4:	200000f2 	.word	0x200000f2
 8006bd8:	200000e8 	.word	0x200000e8
 8006bdc:	20000228 	.word	0x20000228
 8006be0:	2000022c 	.word	0x2000022c

08006be4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8006bec:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <tcp_input_delayed_close+0x5c>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01d      	beq.n	8006c34 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	7e9b      	ldrb	r3, [r3, #26]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10d      	bne.n	8006c20 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d008      	beq.n	8006c20 <tcp_input_delayed_close+0x3c>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6912      	ldr	r2, [r2, #16]
 8006c18:	f06f 010e 	mvn.w	r1, #14
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4808      	ldr	r0, [pc, #32]	; (8006c44 <tcp_input_delayed_close+0x60>)
 8006c24:	f7ff fb00 	bl	8006228 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	f7fd f81e 	bl	8003c6c <memp_free>
    return 1;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	200000f5 	.word	0x200000f5
 8006c44:	20003748 	.word	0x20003748

08006c48 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006c50:	4b64      	ldr	r3, [pc, #400]	; (8006de4 <tcp_listen_input+0x19c>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f040 80bc 	bne.w	8006dd6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8006c5e:	4b61      	ldr	r3, [pc, #388]	; (8006de4 <tcp_listen_input+0x19c>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	f003 0310 	and.w	r3, r3, #16
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d016      	beq.n	8006c98 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006c6a:	4b5f      	ldr	r3, [pc, #380]	; (8006de8 <tcp_listen_input+0x1a0>)
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	4b5f      	ldr	r3, [pc, #380]	; (8006dec <tcp_listen_input+0x1a4>)
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	4b5e      	ldr	r3, [pc, #376]	; (8006df0 <tcp_listen_input+0x1a8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006c7a:	4b5e      	ldr	r3, [pc, #376]	; (8006df4 <tcp_listen_input+0x1ac>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006c7e:	885b      	ldrh	r3, [r3, #2]
 8006c80:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006c82:	4a5c      	ldr	r2, [pc, #368]	; (8006df4 <tcp_listen_input+0x1ac>)
 8006c84:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006c86:	8812      	ldrh	r2, [r2, #0]
 8006c88:	b292      	uxth	r2, r2
 8006c8a:	9201      	str	r2, [sp, #4]
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	4b5a      	ldr	r3, [pc, #360]	; (8006df8 <tcp_listen_input+0x1b0>)
 8006c90:	4a5a      	ldr	r2, [pc, #360]	; (8006dfc <tcp_listen_input+0x1b4>)
 8006c92:	f002 ff53 	bl	8009b3c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8006c96:	e0a0      	b.n	8006dda <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8006c98:	4b52      	ldr	r3, [pc, #328]	; (8006de4 <tcp_listen_input+0x19c>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 809a 	beq.w	8006dda <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	7d5b      	ldrb	r3, [r3, #21]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff f9ce 	bl	800604c <tcp_alloc>
 8006cb0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d111      	bne.n	8006cdc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <tcp_listen_input+0x8e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6910      	ldr	r0, [r2, #16]
 8006cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4798      	blx	r3
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73bb      	strb	r3, [r7, #14]
      return;
 8006cd4:	e082      	b.n	8006ddc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006cd6:	23f0      	movs	r3, #240	; 0xf0
 8006cd8:	73bb      	strb	r3, [r7, #14]
      return;
 8006cda:	e07f      	b.n	8006ddc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006cdc:	4b48      	ldr	r3, [pc, #288]	; (8006e00 <tcp_listen_input+0x1b8>)
 8006cde:	695a      	ldr	r2, [r3, #20]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006ce4:	4b46      	ldr	r3, [pc, #280]	; (8006e00 <tcp_listen_input+0x1b8>)
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8ada      	ldrh	r2, [r3, #22]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8006cf4:	4b3f      	ldr	r3, [pc, #252]	; (8006df4 <tcp_listen_input+0x1ac>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2203      	movs	r2, #3
 8006d04:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8006d06:	4b3a      	ldr	r3, [pc, #232]	; (8006df0 <tcp_listen_input+0x1a8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006d18:	6978      	ldr	r0, [r7, #20]
 8006d1a:	f7ff fb01 	bl	8006320 <tcp_next_iss>
 8006d1e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006d38:	4b2d      	ldr	r3, [pc, #180]	; (8006df0 <tcp_listen_input+0x1a8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	1e5a      	subs	r2, r3, #1
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691a      	ldr	r2, [r3, #16]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7a1b      	ldrb	r3, [r3, #8]
 8006d54:	f003 030c 	and.w	r3, r3, #12
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8006d5e:	4b29      	ldr	r3, [pc, #164]	; (8006e04 <tcp_listen_input+0x1bc>)
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	4a27      	ldr	r2, [pc, #156]	; (8006e04 <tcp_listen_input+0x1bc>)
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	f003 f938 	bl	8009fe0 <tcp_timer_needed>
 8006d70:	4b25      	ldr	r3, [pc, #148]	; (8006e08 <tcp_listen_input+0x1c0>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006d76:	6978      	ldr	r0, [r7, #20]
 8006d78:	f001 fd14 	bl	80087a4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8006d7c:	4b1d      	ldr	r3, [pc, #116]	; (8006df4 <tcp_listen_input+0x1ac>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	89db      	ldrh	r3, [r3, #14]
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f7ff fad5 	bl	8006350 <tcp_eff_send_mss_impl>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006dae:	2112      	movs	r1, #18
 8006db0:	6978      	ldr	r0, [r7, #20]
 8006db2:	f002 fae1 	bl	8009378 <tcp_enqueue_flags>
 8006db6:	4603      	mov	r3, r0
 8006db8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8006dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6978      	ldr	r0, [r7, #20]
 8006dc6:	f7fe f95d 	bl	8005084 <tcp_abandon>
      return;
 8006dca:	e007      	b.n	8006ddc <tcp_listen_input+0x194>
    tcp_output(npcb);
 8006dcc:	6978      	ldr	r0, [r7, #20]
 8006dce:	f002 fc2b 	bl	8009628 <tcp_output>
  return;
 8006dd2:	bf00      	nop
 8006dd4:	e001      	b.n	8006dda <tcp_listen_input+0x192>
    return;
 8006dd6:	bf00      	nop
 8006dd8:	e000      	b.n	8006ddc <tcp_listen_input+0x194>
  return;
 8006dda:	bf00      	nop
}
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	200000f4 	.word	0x200000f4
 8006de8:	200000ec 	.word	0x200000ec
 8006dec:	200000f2 	.word	0x200000f2
 8006df0:	200000e8 	.word	0x200000e8
 8006df4:	200000d8 	.word	0x200000d8
 8006df8:	20000228 	.word	0x20000228
 8006dfc:	2000022c 	.word	0x2000022c
 8006e00:	20000218 	.word	0x20000218
 8006e04:	20003748 	.word	0x20003748
 8006e08:	20003744 	.word	0x20003744

08006e0c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8006e14:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <tcp_timewait_input+0xb0>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d147      	bne.n	8006eb0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8006e20:	4b26      	ldr	r3, [pc, #152]	; (8006ebc <tcp_timewait_input+0xb0>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d027      	beq.n	8006e7c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8006e2c:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <tcp_timewait_input+0xb4>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	db2a      	blt.n	8006e90 <tcp_timewait_input+0x84>
 8006e3a:	4b21      	ldr	r3, [pc, #132]	; (8006ec0 <tcp_timewait_input+0xb4>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8006e46:	440b      	add	r3, r1
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dc20      	bgt.n	8006e90 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e4e:	4b1d      	ldr	r3, [pc, #116]	; (8006ec4 <tcp_timewait_input+0xb8>)
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	4b1d      	ldr	r3, [pc, #116]	; (8006ec8 <tcp_timewait_input+0xbc>)
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	4b19      	ldr	r3, [pc, #100]	; (8006ec0 <tcp_timewait_input+0xb4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006e5e:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <tcp_timewait_input+0xc0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e62:	885b      	ldrh	r3, [r3, #2]
 8006e64:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006e66:	4a19      	ldr	r2, [pc, #100]	; (8006ecc <tcp_timewait_input+0xc0>)
 8006e68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e6a:	8812      	ldrh	r2, [r2, #0]
 8006e6c:	b292      	uxth	r2, r2
 8006e6e:	9201      	str	r2, [sp, #4]
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <tcp_timewait_input+0xc4>)
 8006e74:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <tcp_timewait_input+0xc8>)
 8006e76:	f002 fe61 	bl	8009b3c <tcp_rst>
      return;
 8006e7a:	e01c      	b.n	8006eb6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8006e7c:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <tcp_timewait_input+0xb0>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8006e88:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <tcp_timewait_input+0xcc>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8006e90:	4b0d      	ldr	r3, [pc, #52]	; (8006ec8 <tcp_timewait_input+0xbc>)
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00d      	beq.n	8006eb4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7e9b      	ldrb	r3, [r3, #26]
 8006e9c:	f043 0302 	orr.w	r3, r3, #2
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f002 fbbe 	bl	8009628 <tcp_output>
  }
  return;
 8006eac:	bf00      	nop
 8006eae:	e001      	b.n	8006eb4 <tcp_timewait_input+0xa8>
    return;
 8006eb0:	bf00      	nop
 8006eb2:	e000      	b.n	8006eb6 <tcp_timewait_input+0xaa>
  return;
 8006eb4:	bf00      	nop
}
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	200000f4 	.word	0x200000f4
 8006ec0:	200000e8 	.word	0x200000e8
 8006ec4:	200000ec 	.word	0x200000ec
 8006ec8:	200000f2 	.word	0x200000f2
 8006ecc:	200000d8 	.word	0x200000d8
 8006ed0:	20000228 	.word	0x20000228
 8006ed4:	2000022c 	.word	0x2000022c
 8006ed8:	2000374c 	.word	0x2000374c

08006edc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8006eec:	4ba4      	ldr	r3, [pc, #656]	; (8007180 <tcp_process+0x2a4>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d04e      	beq.n	8006f96 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7d1b      	ldrb	r3, [r3, #20]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d108      	bne.n	8006f12 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f04:	4b9f      	ldr	r3, [pc, #636]	; (8007184 <tcp_process+0x2a8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d123      	bne.n	8006f54 <tcp_process+0x78>
        acceptable = 1;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	76fb      	strb	r3, [r7, #27]
 8006f10:	e020      	b.n	8006f54 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f16:	4b9c      	ldr	r3, [pc, #624]	; (8007188 <tcp_process+0x2ac>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d102      	bne.n	8006f24 <tcp_process+0x48>
        acceptable = 1;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	76fb      	strb	r3, [r7, #27]
 8006f22:	e017      	b.n	8006f54 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006f24:	4b98      	ldr	r3, [pc, #608]	; (8007188 <tcp_process+0x2ac>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	db10      	blt.n	8006f54 <tcp_process+0x78>
 8006f32:	4b95      	ldr	r3, [pc, #596]	; (8007188 <tcp_process+0x2ac>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8006f3e:	440b      	add	r3, r1
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	dc06      	bgt.n	8006f54 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	7e9b      	ldrb	r3, [r3, #26]
 8006f4a:	f043 0302 	orr.w	r3, r3, #2
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8006f54:	7efb      	ldrb	r3, [r7, #27]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01b      	beq.n	8006f92 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	7d1b      	ldrb	r3, [r3, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <tcp_process+0x94>
 8006f62:	4b8a      	ldr	r3, [pc, #552]	; (800718c <tcp_process+0x2b0>)
 8006f64:	f240 22e7 	movw	r2, #743	; 0x2e7
 8006f68:	4989      	ldr	r1, [pc, #548]	; (8007190 <tcp_process+0x2b4>)
 8006f6a:	488a      	ldr	r0, [pc, #552]	; (8007194 <tcp_process+0x2b8>)
 8006f6c:	f007 f8da 	bl	800e124 <iprintf>
      recv_flags |= TF_RESET;
 8006f70:	4b89      	ldr	r3, [pc, #548]	; (8007198 <tcp_process+0x2bc>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f043 0308 	orr.w	r3, r3, #8
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	4b87      	ldr	r3, [pc, #540]	; (8007198 <tcp_process+0x2bc>)
 8006f7c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	7e9b      	ldrb	r3, [r3, #26]
 8006f82:	f023 0301 	bic.w	r3, r3, #1
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8006f8c:	f06f 030d 	mvn.w	r3, #13
 8006f90:	e34d      	b.n	800762e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e34b      	b.n	800762e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006f96:	4b7a      	ldr	r3, [pc, #488]	; (8007180 <tcp_process+0x2a4>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d010      	beq.n	8006fc4 <tcp_process+0xe8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	7d1b      	ldrb	r3, [r3, #20]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d00c      	beq.n	8006fc4 <tcp_process+0xe8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	7d1b      	ldrb	r3, [r3, #20]
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d008      	beq.n	8006fc4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7e9b      	ldrb	r3, [r3, #26]
 8006fb6:	f043 0302 	orr.w	r3, r3, #2
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	e334      	b.n	800762e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7e9b      	ldrb	r3, [r3, #26]
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d103      	bne.n	8006fd8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8006fd0:	4b72      	ldr	r3, [pc, #456]	; (800719c <tcp_process+0x2c0>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 fbdf 	bl	80087a4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7d1b      	ldrb	r3, [r3, #20]
 8006fea:	3b02      	subs	r3, #2
 8006fec:	2b07      	cmp	r3, #7
 8006fee:	f200 830e 	bhi.w	800760e <tcp_process+0x732>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <tcp_process+0x11c>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007019 	.word	0x08007019
 8006ffc:	08007211 	.word	0x08007211
 8007000:	08007369 	.word	0x08007369
 8007004:	08007393 	.word	0x08007393
 8007008:	080074bd 	.word	0x080074bd
 800700c:	08007369 	.word	0x08007369
 8007010:	08007549 	.word	0x08007549
 8007014:	080075d9 	.word	0x080075d9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007018:	4b59      	ldr	r3, [pc, #356]	; (8007180 <tcp_process+0x2a4>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80cb 	beq.w	80071bc <tcp_process+0x2e0>
 8007026:	4b56      	ldr	r3, [pc, #344]	; (8007180 <tcp_process+0x2a4>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 80c4 	beq.w	80071bc <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	4b52      	ldr	r3, [pc, #328]	; (8007184 <tcp_process+0x2a8>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	f040 80bc 	bne.w	80071bc <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8007044:	4b50      	ldr	r3, [pc, #320]	; (8007188 <tcp_process+0x2ac>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8007056:	4b4b      	ldr	r3, [pc, #300]	; (8007184 <tcp_process+0x2a8>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800705e:	4b50      	ldr	r3, [pc, #320]	; (80071a0 <tcp_process+0x2c4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	89db      	ldrh	r3, [r3, #14]
 8007064:	b29a      	uxth	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007078:	4b43      	ldr	r3, [pc, #268]	; (8007188 <tcp_process+0x2ac>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	1e5a      	subs	r2, r3, #1
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2204      	movs	r2, #4
 8007086:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3304      	adds	r3, #4
 8007090:	4619      	mov	r1, r3
 8007092:	4610      	mov	r0, r2
 8007094:	f7ff f95c 	bl	8006350 <tcp_eff_send_mss_impl>
 8007098:	4603      	mov	r3, r0
 800709a:	461a      	mov	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80070aa:	429a      	cmp	r2, r3
 80070ac:	bf38      	it	cc
 80070ae:	461a      	movcc	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4293      	cmp	r3, r2
 80070b8:	bf28      	it	cs
 80070ba:	4613      	movcs	r3, r2
 80070bc:	b29a      	uxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <tcp_process+0x200>
 80070ce:	4b2f      	ldr	r3, [pc, #188]	; (800718c <tcp_process+0x2b0>)
 80070d0:	f240 321a 	movw	r2, #794	; 0x31a
 80070d4:	4933      	ldr	r1, [pc, #204]	; (80071a4 <tcp_process+0x2c8>)
 80070d6:	482f      	ldr	r0, [pc, #188]	; (8007194 <tcp_process+0x2b8>)
 80070d8:	f007 f824 	bl	800e124 <iprintf>
      --pcb->snd_queuelen;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d111      	bne.n	800711c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070fc:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d106      	bne.n	8007112 <tcp_process+0x236>
 8007104:	4b21      	ldr	r3, [pc, #132]	; (800718c <tcp_process+0x2b0>)
 8007106:	f240 3222 	movw	r2, #802	; 0x322
 800710a:	4927      	ldr	r1, [pc, #156]	; (80071a8 <tcp_process+0x2cc>)
 800710c:	4821      	ldr	r0, [pc, #132]	; (8007194 <tcp_process+0x2b8>)
 800710e:	f007 f809 	bl	800e124 <iprintf>
        pcb->unsent = rseg->next;
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	669a      	str	r2, [r3, #104]	; 0x68
 800711a:	e003      	b.n	8007124 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8007124:	69f8      	ldr	r0, [r7, #28]
 8007126:	f7fe fe7e 	bl	8005e26 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <tcp_process+0x260>
        pcb->rtime = -1;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007138:	861a      	strh	r2, [r3, #48]	; 0x30
 800713a:	e006      	b.n	800714a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <tcp_process+0x28e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6910      	ldr	r0, [r2, #16]
 800715e:	2200      	movs	r2, #0
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4798      	blx	r3
 8007164:	4603      	mov	r3, r0
 8007166:	76bb      	strb	r3, [r7, #26]
 8007168:	e001      	b.n	800716e <tcp_process+0x292>
 800716a:	2300      	movs	r3, #0
 800716c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800716e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007172:	f113 0f0d 	cmn.w	r3, #13
 8007176:	d119      	bne.n	80071ac <tcp_process+0x2d0>
        return ERR_ABRT;
 8007178:	f06f 030c 	mvn.w	r3, #12
 800717c:	e257      	b.n	800762e <tcp_process+0x752>
 800717e:	bf00      	nop
 8007180:	200000f4 	.word	0x200000f4
 8007184:	200000ec 	.word	0x200000ec
 8007188:	200000e8 	.word	0x200000e8
 800718c:	0800fd44 	.word	0x0800fd44
 8007190:	0800fefc 	.word	0x0800fefc
 8007194:	0800fd88 	.word	0x0800fd88
 8007198:	200000f5 	.word	0x200000f5
 800719c:	2000374c 	.word	0x2000374c
 80071a0:	200000d8 	.word	0x200000d8
 80071a4:	0800ff1c 	.word	0x0800ff1c
 80071a8:	0800ff34 	.word	0x0800ff34
      }
      tcp_ack_now(pcb);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	7e9b      	ldrb	r3, [r3, #26]
 80071b0:	f043 0302 	orr.w	r3, r3, #2
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80071ba:	e22a      	b.n	8007612 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80071bc:	4b9f      	ldr	r3, [pc, #636]	; (800743c <tcp_process+0x560>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 8224 	beq.w	8007612 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80071ca:	4b9d      	ldr	r3, [pc, #628]	; (8007440 <tcp_process+0x564>)
 80071cc:	6818      	ldr	r0, [r3, #0]
 80071ce:	4b9d      	ldr	r3, [pc, #628]	; (8007444 <tcp_process+0x568>)
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	4b9c      	ldr	r3, [pc, #624]	; (8007448 <tcp_process+0x56c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80071da:	4b9c      	ldr	r3, [pc, #624]	; (800744c <tcp_process+0x570>)
 80071dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80071de:	885b      	ldrh	r3, [r3, #2]
 80071e0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80071e2:	4a9a      	ldr	r2, [pc, #616]	; (800744c <tcp_process+0x570>)
 80071e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80071e6:	8812      	ldrh	r2, [r2, #0]
 80071e8:	b292      	uxth	r2, r2
 80071ea:	9201      	str	r2, [sp, #4]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	4b98      	ldr	r3, [pc, #608]	; (8007450 <tcp_process+0x574>)
 80071f0:	4a98      	ldr	r2, [pc, #608]	; (8007454 <tcp_process+0x578>)
 80071f2:	f002 fca3 	bl	8009b3c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071fc:	2b05      	cmp	r3, #5
 80071fe:	f200 8208 	bhi.w	8007612 <tcp_process+0x736>
        pcb->rtime = 0;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f002 fd0d 	bl	8009c28 <tcp_rexmit_rto>
    break;
 800720e:	e200      	b.n	8007612 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8007210:	4b8a      	ldr	r3, [pc, #552]	; (800743c <tcp_process+0x560>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8091 	beq.w	8007340 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800721e:	4b88      	ldr	r3, [pc, #544]	; (8007440 <tcp_process+0x564>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	3b01      	subs	r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	db71      	blt.n	8007312 <tcp_process+0x436>
 800722e:	4b84      	ldr	r3, [pc, #528]	; (8007440 <tcp_process+0x564>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	dc6a      	bgt.n	8007312 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2204      	movs	r2, #4
 8007240:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <tcp_process+0x386>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d106      	bne.n	8007262 <tcp_process+0x386>
 8007254:	4b80      	ldr	r3, [pc, #512]	; (8007458 <tcp_process+0x57c>)
 8007256:	f240 3251 	movw	r2, #849	; 0x351
 800725a:	4980      	ldr	r1, [pc, #512]	; (800745c <tcp_process+0x580>)
 800725c:	4880      	ldr	r0, [pc, #512]	; (8007460 <tcp_process+0x584>)
 800725e:	f006 ff61 	bl	800e124 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800726a:	23fa      	movs	r3, #250	; 0xfa
 800726c:	76bb      	strb	r3, [r7, #26]
 800726e:	e011      	b.n	8007294 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <tcp_process+0x3b4>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6910      	ldr	r0, [r2, #16]
 8007284:	2200      	movs	r2, #0
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	4798      	blx	r3
 800728a:	4603      	mov	r3, r0
 800728c:	76bb      	strb	r3, [r7, #26]
 800728e:	e001      	b.n	8007294 <tcp_process+0x3b8>
 8007290:	23f0      	movs	r3, #240	; 0xf0
 8007292:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8007294:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800729c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80072a0:	f113 0f0d 	cmn.w	r3, #13
 80072a4:	d002      	beq.n	80072ac <tcp_process+0x3d0>
            tcp_abort(pcb);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fd ff9e 	bl	80051e8 <tcp_abort>
          }
          return ERR_ABRT;
 80072ac:	f06f 030c 	mvn.w	r3, #12
 80072b0:	e1bd      	b.n	800762e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa42 	bl	800773c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80072b8:	4b6a      	ldr	r3, [pc, #424]	; (8007464 <tcp_process+0x588>)
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <tcp_process+0x3f0>
          recv_acked--;
 80072c0:	4b68      	ldr	r3, [pc, #416]	; (8007464 <tcp_process+0x588>)
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	4b66      	ldr	r3, [pc, #408]	; (8007464 <tcp_process+0x588>)
 80072ca:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	f241 121c 	movw	r2, #4380	; 0x111c
 80072d6:	429a      	cmp	r2, r3
 80072d8:	bf38      	it	cc
 80072da:	461a      	movcc	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4293      	cmp	r3, r2
 80072e4:	bf28      	it	cs
 80072e6:	4613      	movcs	r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80072f0:	4b5d      	ldr	r3, [pc, #372]	; (8007468 <tcp_process+0x58c>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d034      	beq.n	8007366 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	7e9b      	ldrb	r3, [r3, #26]
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	b2da      	uxtb	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2207      	movs	r2, #7
 800730e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8007310:	e029      	b.n	8007366 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007312:	4b4b      	ldr	r3, [pc, #300]	; (8007440 <tcp_process+0x564>)
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	4b4b      	ldr	r3, [pc, #300]	; (8007444 <tcp_process+0x568>)
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	4b4a      	ldr	r3, [pc, #296]	; (8007448 <tcp_process+0x56c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007322:	4b4a      	ldr	r3, [pc, #296]	; (800744c <tcp_process+0x570>)
 8007324:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007326:	885b      	ldrh	r3, [r3, #2]
 8007328:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800732a:	4a48      	ldr	r2, [pc, #288]	; (800744c <tcp_process+0x570>)
 800732c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800732e:	8812      	ldrh	r2, [r2, #0]
 8007330:	b292      	uxth	r2, r2
 8007332:	9201      	str	r2, [sp, #4]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	4b46      	ldr	r3, [pc, #280]	; (8007450 <tcp_process+0x574>)
 8007338:	4a46      	ldr	r2, [pc, #280]	; (8007454 <tcp_process+0x578>)
 800733a:	f002 fbff 	bl	8009b3c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800733e:	e16a      	b.n	8007616 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007340:	4b3e      	ldr	r3, [pc, #248]	; (800743c <tcp_process+0x560>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8164 	beq.w	8007616 <tcp_process+0x73a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	1e5a      	subs	r2, r3, #1
 8007354:	4b3c      	ldr	r3, [pc, #240]	; (8007448 <tcp_process+0x56c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	f040 815c 	bne.w	8007616 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f002 fc98 	bl	8009c94 <tcp_rexmit>
    break;
 8007364:	e157      	b.n	8007616 <tcp_process+0x73a>
 8007366:	e156      	b.n	8007616 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f9e7 	bl	800773c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800736e:	4b3e      	ldr	r3, [pc, #248]	; (8007468 <tcp_process+0x58c>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 814f 	beq.w	800761a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	7e9b      	ldrb	r3, [r3, #26]
 8007380:	f043 0302 	orr.w	r3, r3, #2
 8007384:	b2da      	uxtb	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2207      	movs	r2, #7
 800738e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007390:	e143      	b.n	800761a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f9d2 	bl	800773c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007398:	4b33      	ldr	r3, [pc, #204]	; (8007468 <tcp_process+0x58c>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	f003 0320 	and.w	r3, r3, #32
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d074      	beq.n	800748e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80073a4:	4b25      	ldr	r3, [pc, #148]	; (800743c <tcp_process+0x560>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d063      	beq.n	8007478 <tcp_process+0x59c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073b4:	4b22      	ldr	r3, [pc, #136]	; (8007440 <tcp_process+0x564>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d15d      	bne.n	8007478 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d159      	bne.n	8007478 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7e9b      	ldrb	r3, [r3, #26]
 80073c8:	f043 0302 	orr.w	r3, r3, #2
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fe fee6 	bl	80061a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80073d8:	4b24      	ldr	r3, [pc, #144]	; (800746c <tcp_process+0x590>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d105      	bne.n	80073ee <tcp_process+0x512>
 80073e2:	4b22      	ldr	r3, [pc, #136]	; (800746c <tcp_process+0x590>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	4a20      	ldr	r2, [pc, #128]	; (800746c <tcp_process+0x590>)
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	e013      	b.n	8007416 <tcp_process+0x53a>
 80073ee:	4b1f      	ldr	r3, [pc, #124]	; (800746c <tcp_process+0x590>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	e00c      	b.n	8007410 <tcp_process+0x534>
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d104      	bne.n	800740a <tcp_process+0x52e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	60da      	str	r2, [r3, #12]
 8007408:	e005      	b.n	8007416 <tcp_process+0x53a>
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1ef      	bne.n	80073f6 <tcp_process+0x51a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	60da      	str	r2, [r3, #12]
 800741c:	4b14      	ldr	r3, [pc, #80]	; (8007470 <tcp_process+0x594>)
 800741e:	2201      	movs	r2, #1
 8007420:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	220a      	movs	r2, #10
 8007426:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007428:	4b12      	ldr	r3, [pc, #72]	; (8007474 <tcp_process+0x598>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]
 8007430:	4a10      	ldr	r2, [pc, #64]	; (8007474 <tcp_process+0x598>)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	f002 fdd3 	bl	8009fe0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800743a:	e0f0      	b.n	800761e <tcp_process+0x742>
 800743c:	200000f4 	.word	0x200000f4
 8007440:	200000ec 	.word	0x200000ec
 8007444:	200000f2 	.word	0x200000f2
 8007448:	200000e8 	.word	0x200000e8
 800744c:	200000d8 	.word	0x200000d8
 8007450:	20000228 	.word	0x20000228
 8007454:	2000022c 	.word	0x2000022c
 8007458:	0800fd44 	.word	0x0800fd44
 800745c:	0800ff48 	.word	0x0800ff48
 8007460:	0800fd88 	.word	0x0800fd88
 8007464:	200000f0 	.word	0x200000f0
 8007468:	200000f5 	.word	0x200000f5
 800746c:	20003748 	.word	0x20003748
 8007470:	20003744 	.word	0x20003744
 8007474:	20003758 	.word	0x20003758
        tcp_ack_now(pcb);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	7e9b      	ldrb	r3, [r3, #26]
 800747c:	f043 0302 	orr.w	r3, r3, #2
 8007480:	b2da      	uxtb	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2208      	movs	r2, #8
 800748a:	751a      	strb	r2, [r3, #20]
    break;
 800748c:	e0c7      	b.n	800761e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800748e:	4b6a      	ldr	r3, [pc, #424]	; (8007638 <tcp_process+0x75c>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 80c1 	beq.w	800761e <tcp_process+0x742>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074a0:	4b66      	ldr	r3, [pc, #408]	; (800763c <tcp_process+0x760>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	f040 80ba 	bne.w	800761e <tcp_process+0x742>
               pcb->unsent == NULL) {
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f040 80b5 	bne.w	800761e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2206      	movs	r2, #6
 80074b8:	751a      	strb	r2, [r3, #20]
    break;
 80074ba:	e0b0      	b.n	800761e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f93d 	bl	800773c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80074c2:	4b5f      	ldr	r3, [pc, #380]	; (8007640 <tcp_process+0x764>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 80a9 	beq.w	8007622 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	7e9b      	ldrb	r3, [r3, #26]
 80074d4:	f043 0302 	orr.w	r3, r3, #2
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fe fe60 	bl	80061a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80074e4:	4b57      	ldr	r3, [pc, #348]	; (8007644 <tcp_process+0x768>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d105      	bne.n	80074fa <tcp_process+0x61e>
 80074ee:	4b55      	ldr	r3, [pc, #340]	; (8007644 <tcp_process+0x768>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4a53      	ldr	r2, [pc, #332]	; (8007644 <tcp_process+0x768>)
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	e013      	b.n	8007522 <tcp_process+0x646>
 80074fa:	4b52      	ldr	r3, [pc, #328]	; (8007644 <tcp_process+0x768>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	613b      	str	r3, [r7, #16]
 8007500:	e00c      	b.n	800751c <tcp_process+0x640>
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	429a      	cmp	r2, r3
 800750a:	d104      	bne.n	8007516 <tcp_process+0x63a>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	60da      	str	r2, [r3, #12]
 8007514:	e005      	b.n	8007522 <tcp_process+0x646>
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	613b      	str	r3, [r7, #16]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1ef      	bne.n	8007502 <tcp_process+0x626>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	60da      	str	r2, [r3, #12]
 8007528:	4b47      	ldr	r3, [pc, #284]	; (8007648 <tcp_process+0x76c>)
 800752a:	2201      	movs	r2, #1
 800752c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	220a      	movs	r2, #10
 8007532:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007534:	4b45      	ldr	r3, [pc, #276]	; (800764c <tcp_process+0x770>)
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	60da      	str	r2, [r3, #12]
 800753c:	4a43      	ldr	r2, [pc, #268]	; (800764c <tcp_process+0x770>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	f002 fd4d 	bl	8009fe0 <tcp_timer_needed>
    }
    break;
 8007546:	e06c      	b.n	8007622 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f8f7 	bl	800773c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800754e:	4b3a      	ldr	r3, [pc, #232]	; (8007638 <tcp_process+0x75c>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b00      	cmp	r3, #0
 8007558:	d065      	beq.n	8007626 <tcp_process+0x74a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800755e:	4b37      	ldr	r3, [pc, #220]	; (800763c <tcp_process+0x760>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	429a      	cmp	r2, r3
 8007564:	d15f      	bne.n	8007626 <tcp_process+0x74a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800756a:	2b00      	cmp	r3, #0
 800756c:	d15b      	bne.n	8007626 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fe fe18 	bl	80061a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007574:	4b33      	ldr	r3, [pc, #204]	; (8007644 <tcp_process+0x768>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	429a      	cmp	r2, r3
 800757c:	d105      	bne.n	800758a <tcp_process+0x6ae>
 800757e:	4b31      	ldr	r3, [pc, #196]	; (8007644 <tcp_process+0x768>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	4a2f      	ldr	r2, [pc, #188]	; (8007644 <tcp_process+0x768>)
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	e013      	b.n	80075b2 <tcp_process+0x6d6>
 800758a:	4b2e      	ldr	r3, [pc, #184]	; (8007644 <tcp_process+0x768>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e00c      	b.n	80075ac <tcp_process+0x6d0>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	429a      	cmp	r2, r3
 800759a:	d104      	bne.n	80075a6 <tcp_process+0x6ca>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	60da      	str	r2, [r3, #12]
 80075a4:	e005      	b.n	80075b2 <tcp_process+0x6d6>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1ef      	bne.n	8007592 <tcp_process+0x6b6>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	60da      	str	r2, [r3, #12]
 80075b8:	4b23      	ldr	r3, [pc, #140]	; (8007648 <tcp_process+0x76c>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	220a      	movs	r2, #10
 80075c2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80075c4:	4b21      	ldr	r3, [pc, #132]	; (800764c <tcp_process+0x770>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	60da      	str	r2, [r3, #12]
 80075cc:	4a1f      	ldr	r2, [pc, #124]	; (800764c <tcp_process+0x770>)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	f002 fd05 	bl	8009fe0 <tcp_timer_needed>
    }
    break;
 80075d6:	e026      	b.n	8007626 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f8af 	bl	800773c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80075de:	4b16      	ldr	r3, [pc, #88]	; (8007638 <tcp_process+0x75c>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01f      	beq.n	800762a <tcp_process+0x74e>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075ee:	4b13      	ldr	r3, [pc, #76]	; (800763c <tcp_process+0x760>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d119      	bne.n	800762a <tcp_process+0x74e>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d115      	bne.n	800762a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80075fe:	4b10      	ldr	r3, [pc, #64]	; (8007640 <tcp_process+0x764>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	f043 0310 	orr.w	r3, r3, #16
 8007606:	b2da      	uxtb	r2, r3
 8007608:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <tcp_process+0x764>)
 800760a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800760c:	e00d      	b.n	800762a <tcp_process+0x74e>
  default:
    break;
 800760e:	bf00      	nop
 8007610:	e00c      	b.n	800762c <tcp_process+0x750>
    break;
 8007612:	bf00      	nop
 8007614:	e00a      	b.n	800762c <tcp_process+0x750>
    break;
 8007616:	bf00      	nop
 8007618:	e008      	b.n	800762c <tcp_process+0x750>
    break;
 800761a:	bf00      	nop
 800761c:	e006      	b.n	800762c <tcp_process+0x750>
    break;
 800761e:	bf00      	nop
 8007620:	e004      	b.n	800762c <tcp_process+0x750>
    break;
 8007622:	bf00      	nop
 8007624:	e002      	b.n	800762c <tcp_process+0x750>
    break;
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <tcp_process+0x750>
    break;
 800762a:	bf00      	nop
  }
  return ERR_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3720      	adds	r7, #32
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	200000f4 	.word	0x200000f4
 800763c:	200000ec 	.word	0x200000ec
 8007640:	200000f5 	.word	0x200000f5
 8007644:	20003748 	.word	0x20003748
 8007648:	20003744 	.word	0x20003744
 800764c:	20003758 	.word	0x20003758

08007650 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	899b      	ldrh	r3, [r3, #12]
 8007660:	b29b      	uxth	r3, r3
 8007662:	4618      	mov	r0, r3
 8007664:	f7fb ff07 	bl	8003476 <lwip_htons>
 8007668:	4603      	mov	r3, r0
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d027      	beq.n	80076c2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007672:	6838      	ldr	r0, [r7, #0]
 8007674:	f7fe fbc3 	bl	8005dfe <tcp_segs_free>
    next = NULL;
 8007678:	2300      	movs	r3, #0
 800767a:	603b      	str	r3, [r7, #0]
 800767c:	e055      	b.n	800772a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	899b      	ldrh	r3, [r3, #12]
 8007684:	b29b      	uxth	r3, r3
 8007686:	4618      	mov	r0, r3
 8007688:	f7fb fef5 	bl	8003476 <lwip_htons>
 800768c:	4603      	mov	r3, r0
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00d      	beq.n	80076b2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	899b      	ldrh	r3, [r3, #12]
 800769c:	b29c      	uxth	r4, r3
 800769e:	2001      	movs	r0, #1
 80076a0:	f7fb fee9 	bl	8003476 <lwip_htons>
 80076a4:	4603      	mov	r3, r0
 80076a6:	461a      	mov	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	4322      	orrs	r2, r4
 80076ae:	b292      	uxth	r2, r2
 80076b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7fe fbb2 	bl	8005e26 <tcp_seg_free>
    while (next &&
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00e      	beq.n	80076e6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	891b      	ldrh	r3, [r3, #8]
 80076cc:	461a      	mov	r2, r3
 80076ce:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <tcp_oos_insert_segment+0xe8>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	441a      	add	r2, r3
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	8909      	ldrh	r1, [r1, #8]
 80076de:	440b      	add	r3, r1
 80076e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dacb      	bge.n	800767e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01e      	beq.n	800772a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	891b      	ldrh	r3, [r3, #8]
 80076f0:	461a      	mov	r2, r3
 80076f2:	4b11      	ldr	r3, [pc, #68]	; (8007738 <tcp_oos_insert_segment+0xe8>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	441a      	add	r2, r3
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007700:	2b00      	cmp	r3, #0
 8007702:	dd12      	ble.n	800772a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	b29a      	uxth	r2, r3
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <tcp_oos_insert_segment+0xe8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	b29a      	uxth	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	891b      	ldrh	r3, [r3, #8]
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f7fc fe57 	bl	80043d8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	601a      	str	r2, [r3, #0]
}
 8007730:	bf00      	nop
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	bd90      	pop	{r4, r7, pc}
 8007738:	200000e8 	.word	0x200000e8

0800773c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800773c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800773e:	b08d      	sub	sp, #52	; 0x34
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7d1b      	ldrb	r3, [r3, #20]
 800774c:	2b03      	cmp	r3, #3
 800774e:	d806      	bhi.n	800775e <tcp_receive+0x22>
 8007750:	4ba6      	ldr	r3, [pc, #664]	; (80079ec <tcp_receive+0x2b0>)
 8007752:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007756:	49a6      	ldr	r1, [pc, #664]	; (80079f0 <tcp_receive+0x2b4>)
 8007758:	48a6      	ldr	r0, [pc, #664]	; (80079f4 <tcp_receive+0x2b8>)
 800775a:	f006 fce3 	bl	800e124 <iprintf>

  if (flags & TCP_ACK) {
 800775e:	4ba6      	ldr	r3, [pc, #664]	; (80079f8 <tcp_receive+0x2bc>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 82bf 	beq.w	8007cea <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007772:	461a      	mov	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007778:	4413      	add	r3, r2
 800777a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007780:	4b9e      	ldr	r3, [pc, #632]	; (80079fc <tcp_receive+0x2c0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	db1b      	blt.n	80077c2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800778e:	4b9b      	ldr	r3, [pc, #620]	; (80079fc <tcp_receive+0x2c0>)
 8007790:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007792:	429a      	cmp	r2, r3
 8007794:	d106      	bne.n	80077a4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800779a:	4b99      	ldr	r3, [pc, #612]	; (8007a00 <tcp_receive+0x2c4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	db0e      	blt.n	80077c2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077a8:	4b95      	ldr	r3, [pc, #596]	; (8007a00 <tcp_receive+0x2c4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d141      	bne.n	8007834 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80077b0:	4b94      	ldr	r3, [pc, #592]	; (8007a04 <tcp_receive+0x2c8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	89db      	ldrh	r3, [r3, #14]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077be:	429a      	cmp	r2, r3
 80077c0:	d938      	bls.n	8007834 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80077c2:	4b90      	ldr	r3, [pc, #576]	; (8007a04 <tcp_receive+0x2c8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	89db      	ldrh	r3, [r3, #14]
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077dc:	429a      	cmp	r2, r3
 80077de:	d205      	bcs.n	80077ec <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80077ec:	4b83      	ldr	r3, [pc, #524]	; (80079fc <tcp_receive+0x2c0>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80077f4:	4b82      	ldr	r3, [pc, #520]	; (8007a00 <tcp_receive+0x2c4>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10d      	bne.n	8007822 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800780c:	2b00      	cmp	r3, #0
 800780e:	d111      	bne.n	8007834 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007820:	e008      	b.n	8007834 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007834:	4b72      	ldr	r3, [pc, #456]	; (8007a00 <tcp_receive+0x2c4>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	dc53      	bgt.n	80078ea <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8007842:	4b71      	ldr	r3, [pc, #452]	; (8007a08 <tcp_receive+0x2cc>)
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d146      	bne.n	80078d8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8007854:	4413      	add	r3, r2
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	429a      	cmp	r2, r3
 800785a:	d13d      	bne.n	80078d8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007862:	2b00      	cmp	r3, #0
 8007864:	db38      	blt.n	80078d8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800786a:	4b65      	ldr	r3, [pc, #404]	; (8007a00 <tcp_receive+0x2c4>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d132      	bne.n	80078d8 <tcp_receive+0x19c>
              found_dupack = 1;
 8007872:	2301      	movs	r3, #1
 8007874:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800787c:	2bff      	cmp	r3, #255	; 0xff
 800787e:	d007      	beq.n	8007890 <tcp_receive+0x154>
                ++pcb->dupacks;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007886:	3301      	adds	r3, #1
 8007888:	b2da      	uxtb	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007896:	2b03      	cmp	r3, #3
 8007898:	d916      	bls.n	80078c8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078a4:	4413      	add	r3, r2
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d912      	bls.n	80078d8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078bc:	4413      	add	r3, r2
 80078be:	b29a      	uxth	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80078c6:	e007      	b.n	80078d8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d102      	bne.n	80078d8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f002 fa2e 	bl	8009d34 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 8169 	bne.w	8007bb2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078e8:	e163      	b.n	8007bb2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80078ea:	4b45      	ldr	r3, [pc, #276]	; (8007a00 <tcp_receive+0x2c4>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f2c0 8107 	blt.w	8007b0a <tcp_receive+0x3ce>
 80078fc:	4b40      	ldr	r3, [pc, #256]	; (8007a00 <tcp_receive+0x2c4>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	f300 80ff 	bgt.w	8007b0a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7e9b      	ldrb	r3, [r3, #26]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00c      	beq.n	8007932 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	7e9b      	ldrb	r3, [r3, #26]
 800791c:	f023 0304 	bic.w	r3, r3, #4
 8007920:	b2da      	uxtb	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007940:	10db      	asrs	r3, r3, #3
 8007942:	b21b      	sxth	r3, r3
 8007944:	b29a      	uxth	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800794c:	b29b      	uxth	r3, r3
 800794e:	4413      	add	r3, r2
 8007950:	b29b      	uxth	r3, r3
 8007952:	b21a      	sxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007962:	4b27      	ldr	r3, [pc, #156]	; (8007a00 <tcp_receive+0x2c4>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7d1b      	ldrb	r3, [r3, #20]
 800796e:	2b03      	cmp	r3, #3
 8007970:	f240 8094 	bls.w	8007a9c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8007980:	429a      	cmp	r2, r3
 8007982:	d216      	bcs.n	80079b2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800798e:	4413      	add	r3, r2
 8007990:	b29a      	uxth	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007998:	429a      	cmp	r2, r3
 800799a:	d97f      	bls.n	8007a9c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079a6:	4413      	add	r3, r2
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80079b0:	e074      	b.n	8007a9c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079bc:	4619      	mov	r1, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079c2:	fb03 f301 	mul.w	r3, r3, r1
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80079cc:	fb93 f3f1 	sdiv	r3, r3, r1
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80079dc:	8a7a      	ldrh	r2, [r7, #18]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d95c      	bls.n	8007a9c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	8a7a      	ldrh	r2, [r7, #18]
 80079e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80079ea:	e057      	b.n	8007a9c <tcp_receive+0x360>
 80079ec:	0800fd44 	.word	0x0800fd44
 80079f0:	0800ff68 	.word	0x0800ff68
 80079f4:	0800fd88 	.word	0x0800fd88
 80079f8:	200000f4 	.word	0x200000f4
 80079fc:	200000e8 	.word	0x200000e8
 8007a00:	200000ec 	.word	0x200000ec
 8007a04:	200000d8 	.word	0x200000d8
 8007a08:	200000f2 	.word	0x200000f2
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fc fede 	bl	80047e8 <pbuf_clen>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	429c      	cmp	r4, r3
 8007a30:	d206      	bcs.n	8007a40 <tcp_receive+0x304>
 8007a32:	4b70      	ldr	r3, [pc, #448]	; (8007bf4 <tcp_receive+0x4b8>)
 8007a34:	f240 429e 	movw	r2, #1182	; 0x49e
 8007a38:	496f      	ldr	r1, [pc, #444]	; (8007bf8 <tcp_receive+0x4bc>)
 8007a3a:	4870      	ldr	r0, [pc, #448]	; (8007bfc <tcp_receive+0x4c0>)
 8007a3c:	f006 fb72 	bl	800e124 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fc fecf 	bl	80047e8 <pbuf_clen>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	891a      	ldrh	r2, [r3, #8]
 8007a62:	4b67      	ldr	r3, [pc, #412]	; (8007c00 <tcp_receive+0x4c4>)
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	4413      	add	r3, r2
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	4b65      	ldr	r3, [pc, #404]	; (8007c00 <tcp_receive+0x4c4>)
 8007a6c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8007a6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a70:	f7fe f9d9 	bl	8005e26 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00e      	beq.n	8007a9c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <tcp_receive+0x360>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <tcp_receive+0x360>
 8007a8e:	4b59      	ldr	r3, [pc, #356]	; (8007bf4 <tcp_receive+0x4b8>)
 8007a90:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8007a94:	495b      	ldr	r1, [pc, #364]	; (8007c04 <tcp_receive+0x4c8>)
 8007a96:	4859      	ldr	r0, [pc, #356]	; (8007bfc <tcp_receive+0x4c0>)
 8007a98:	f006 fb44 	bl	800e124 <iprintf>
      while (pcb->unacked != NULL &&
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d022      	beq.n	8007aea <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fb fcf0 	bl	8003492 <lwip_htonl>
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab8:	891b      	ldrh	r3, [r3, #8]
 8007aba:	461d      	mov	r5, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	899b      	ldrh	r3, [r3, #12]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fb fcd5 	bl	8003476 <lwip_htons>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <tcp_receive+0x39e>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <tcp_receive+0x3a0>
 8007ada:	2300      	movs	r3, #0
 8007adc:	442b      	add	r3, r5
 8007ade:	18e2      	adds	r2, r4, r3
 8007ae0:	4b49      	ldr	r3, [pc, #292]	; (8007c08 <tcp_receive+0x4cc>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	dd90      	ble.n	8007a0c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d104      	bne.n	8007afc <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007af8:	861a      	strh	r2, [r3, #48]	; 0x30
 8007afa:	e002      	b.n	8007b02 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	76da      	strb	r2, [r3, #27]
 8007b08:	e002      	b.n	8007b10 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fd30 	bl	8009570 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8007b10:	e04f      	b.n	8007bb2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d103      	bne.n	8007b32 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fc fe53 	bl	80047e8 <pbuf_clen>
 8007b42:	4603      	mov	r3, r0
 8007b44:	429c      	cmp	r4, r3
 8007b46:	d206      	bcs.n	8007b56 <tcp_receive+0x41a>
 8007b48:	4b2a      	ldr	r3, [pc, #168]	; (8007bf4 <tcp_receive+0x4b8>)
 8007b4a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007b4e:	492a      	ldr	r1, [pc, #168]	; (8007bf8 <tcp_receive+0x4bc>)
 8007b50:	482a      	ldr	r0, [pc, #168]	; (8007bfc <tcp_receive+0x4c0>)
 8007b52:	f006 fae7 	bl	800e124 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fc fe44 	bl	80047e8 <pbuf_clen>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	891a      	ldrh	r2, [r3, #8]
 8007b78:	4b21      	ldr	r3, [pc, #132]	; (8007c00 <tcp_receive+0x4c4>)
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	4b1f      	ldr	r3, [pc, #124]	; (8007c00 <tcp_receive+0x4c4>)
 8007b82:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8007b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b86:	f7fe f94e 	bl	8005e26 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00e      	beq.n	8007bb2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <tcp_receive+0x476>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d106      	bne.n	8007bb2 <tcp_receive+0x476>
 8007ba4:	4b13      	ldr	r3, [pc, #76]	; (8007bf4 <tcp_receive+0x4b8>)
 8007ba6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8007baa:	4916      	ldr	r1, [pc, #88]	; (8007c04 <tcp_receive+0x4c8>)
 8007bac:	4813      	ldr	r0, [pc, #76]	; (8007bfc <tcp_receive+0x4c0>)
 8007bae:	f006 fab9 	bl	800e124 <iprintf>
    while (pcb->unsent != NULL &&
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d036      	beq.n	8007c28 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007bba:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <tcp_receive+0x4cc>)
 8007bbc:	681c      	ldr	r4, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fb fc63 	bl	8003492 <lwip_htonl>
 8007bcc:	4605      	mov	r5, r0
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bd2:	891b      	ldrh	r3, [r3, #8]
 8007bd4:	461e      	mov	r6, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	899b      	ldrh	r3, [r3, #12]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fb fc48 	bl	8003476 <lwip_htons>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00d      	beq.n	8007c0c <tcp_receive+0x4d0>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e00c      	b.n	8007c0e <tcp_receive+0x4d2>
 8007bf4:	0800fd44 	.word	0x0800fd44
 8007bf8:	0800ff84 	.word	0x0800ff84
 8007bfc:	0800fd88 	.word	0x0800fd88
 8007c00:	200000f0 	.word	0x200000f0
 8007c04:	0800ffac 	.word	0x0800ffac
 8007c08:	200000ec 	.word	0x200000ec
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4433      	add	r3, r6
 8007c10:	442b      	add	r3, r5
 8007c12:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	db07      	blt.n	8007c28 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007c18:	4b8d      	ldr	r3, [pc, #564]	; (8007e50 <tcp_receive+0x714>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f77f af75 	ble.w	8007b12 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007c2e:	4b89      	ldr	r3, [pc, #548]	; (8007e54 <tcp_receive+0x718>)
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	4413      	add	r3, r2
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d052      	beq.n	8007cea <tcp_receive+0x5ae>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c48:	4b81      	ldr	r3, [pc, #516]	; (8007e50 <tcp_receive+0x714>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	da4b      	bge.n	8007cea <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007c52:	4b81      	ldr	r3, [pc, #516]	; (8007e58 <tcp_receive+0x71c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8007c64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007c6c:	10db      	asrs	r3, r3, #3
 8007c6e:	b21b      	sxth	r3, r3
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c82:	4413      	add	r3, r2
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	b21a      	sxth	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8007c8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	da03      	bge.n	8007c9c <tcp_receive+0x560>
        m = -m;
 8007c94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c96:	425b      	negs	r3, r3
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8007c9c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007ca4:	109b      	asrs	r3, r3, #2
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007cba:	4413      	add	r3, r2
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	b21a      	sxth	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007cca:	10db      	asrs	r3, r3, #3
 8007ccc:	b21b      	sxth	r3, r3
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	4413      	add	r3, r2
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	b21a      	sxth	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8007cea:	4b5c      	ldr	r3, [pc, #368]	; (8007e5c <tcp_receive+0x720>)
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 84f1 	beq.w	80086d6 <tcp_receive+0xf9a>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	7d1b      	ldrb	r3, [r3, #20]
 8007cf8:	2b06      	cmp	r3, #6
 8007cfa:	f200 84ec 	bhi.w	80086d6 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d02:	4b57      	ldr	r3, [pc, #348]	; (8007e60 <tcp_receive+0x724>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f2c0 80b8 	blt.w	8007e80 <tcp_receive+0x744>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d14:	4b51      	ldr	r3, [pc, #324]	; (8007e5c <tcp_receive+0x720>)
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4b51      	ldr	r3, [pc, #324]	; (8007e60 <tcp_receive+0x724>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	440b      	add	r3, r1
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	3301      	adds	r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f300 80ab 	bgt.w	8007e80 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8007d2a:	4b4e      	ldr	r3, [pc, #312]	; (8007e64 <tcp_receive+0x728>)
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d34:	4b4a      	ldr	r3, [pc, #296]	; (8007e60 <tcp_receive+0x724>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8007d3c:	4b49      	ldr	r3, [pc, #292]	; (8007e64 <tcp_receive+0x728>)
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d106      	bne.n	8007d52 <tcp_receive+0x616>
 8007d44:	4b48      	ldr	r3, [pc, #288]	; (8007e68 <tcp_receive+0x72c>)
 8007d46:	f240 523c 	movw	r2, #1340	; 0x53c
 8007d4a:	4948      	ldr	r1, [pc, #288]	; (8007e6c <tcp_receive+0x730>)
 8007d4c:	4848      	ldr	r0, [pc, #288]	; (8007e70 <tcp_receive+0x734>)
 8007d4e:	f006 f9e9 	bl	800e124 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	dd06      	ble.n	8007d6a <tcp_receive+0x62e>
 8007d5c:	4b42      	ldr	r3, [pc, #264]	; (8007e68 <tcp_receive+0x72c>)
 8007d5e:	f240 523d 	movw	r2, #1341	; 0x53d
 8007d62:	4944      	ldr	r1, [pc, #272]	; (8007e74 <tcp_receive+0x738>)
 8007d64:	4842      	ldr	r0, [pc, #264]	; (8007e70 <tcp_receive+0x734>)
 8007d66:	f006 f9dd 	bl	800e124 <iprintf>
      if (inseg.p->len < off) {
 8007d6a:	4b3e      	ldr	r3, [pc, #248]	; (8007e64 <tcp_receive+0x728>)
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	895b      	ldrh	r3, [r3, #10]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	4293      	cmp	r3, r2
 8007d76:	dd3e      	ble.n	8007df6 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8007d78:	4b3a      	ldr	r3, [pc, #232]	; (8007e64 <tcp_receive+0x728>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	891b      	ldrh	r3, [r3, #8]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	4293      	cmp	r3, r2
 8007d84:	dd06      	ble.n	8007d94 <tcp_receive+0x658>
 8007d86:	4b38      	ldr	r3, [pc, #224]	; (8007e68 <tcp_receive+0x72c>)
 8007d88:	f240 523f 	movw	r2, #1343	; 0x53f
 8007d8c:	493a      	ldr	r1, [pc, #232]	; (8007e78 <tcp_receive+0x73c>)
 8007d8e:	4838      	ldr	r0, [pc, #224]	; (8007e70 <tcp_receive+0x734>)
 8007d90:	f006 f9c8 	bl	800e124 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007d94:	4b33      	ldr	r3, [pc, #204]	; (8007e64 <tcp_receive+0x728>)
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	891a      	ldrh	r2, [r3, #8]
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8007da2:	e00e      	b.n	8007dc2 <tcp_receive+0x686>
          off -= p->len;
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	895b      	ldrh	r3, [r3, #10]
 8007da8:	461a      	mov	r2, r3
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	1a9b      	subs	r3, r3, r2
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	8a3a      	ldrh	r2, [r7, #16]
 8007db4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2200      	movs	r2, #0
 8007dba:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	895b      	ldrh	r3, [r3, #10]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	dcea      	bgt.n	8007da4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	425b      	negs	r3, r3
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	b21b      	sxth	r3, r3
 8007dd8:	4619      	mov	r1, r3
 8007dda:	69b8      	ldr	r0, [r7, #24]
 8007ddc:	f7fc fc4c 	bl	8004678 <pbuf_header>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d01c      	beq.n	8007e20 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007de6:	4b20      	ldr	r3, [pc, #128]	; (8007e68 <tcp_receive+0x72c>)
 8007de8:	f240 524c 	movw	r2, #1356	; 0x54c
 8007dec:	4923      	ldr	r1, [pc, #140]	; (8007e7c <tcp_receive+0x740>)
 8007dee:	4820      	ldr	r0, [pc, #128]	; (8007e70 <tcp_receive+0x734>)
 8007df0:	f006 f998 	bl	800e124 <iprintf>
 8007df4:	e014      	b.n	8007e20 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8007df6:	4b1b      	ldr	r3, [pc, #108]	; (8007e64 <tcp_receive+0x728>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfc:	b292      	uxth	r2, r2
 8007dfe:	4252      	negs	r2, r2
 8007e00:	b292      	uxth	r2, r2
 8007e02:	b212      	sxth	r2, r2
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fc fc36 	bl	8004678 <pbuf_header>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d006      	beq.n	8007e20 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007e12:	4b15      	ldr	r3, [pc, #84]	; (8007e68 <tcp_receive+0x72c>)
 8007e14:	f240 5251 	movw	r2, #1361	; 0x551
 8007e18:	4918      	ldr	r1, [pc, #96]	; (8007e7c <tcp_receive+0x740>)
 8007e1a:	4815      	ldr	r0, [pc, #84]	; (8007e70 <tcp_receive+0x734>)
 8007e1c:	f006 f982 	bl	800e124 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8007e20:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <tcp_receive+0x728>)
 8007e22:	891a      	ldrh	r2, [r3, #8]
 8007e24:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <tcp_receive+0x724>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	b299      	uxth	r1, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	1acb      	subs	r3, r1, r3
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	4413      	add	r3, r2
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <tcp_receive+0x728>)
 8007e3a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	4a07      	ldr	r2, [pc, #28]	; (8007e60 <tcp_receive+0x724>)
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	4b07      	ldr	r3, [pc, #28]	; (8007e64 <tcp_receive+0x728>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	4a05      	ldr	r2, [pc, #20]	; (8007e60 <tcp_receive+0x724>)
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007e4e:	e025      	b.n	8007e9c <tcp_receive+0x760>
 8007e50:	200000ec 	.word	0x200000ec
 8007e54:	200000f0 	.word	0x200000f0
 8007e58:	2000374c 	.word	0x2000374c
 8007e5c:	200000f2 	.word	0x200000f2
 8007e60:	200000e8 	.word	0x200000e8
 8007e64:	200000c8 	.word	0x200000c8
 8007e68:	0800fd44 	.word	0x0800fd44
 8007e6c:	0800ffcc 	.word	0x0800ffcc
 8007e70:	0800fd88 	.word	0x0800fd88
 8007e74:	0800ffdc 	.word	0x0800ffdc
 8007e78:	0800ffec 	.word	0x0800ffec
 8007e7c:	0800fffc 	.word	0x0800fffc
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007e80:	4b87      	ldr	r3, [pc, #540]	; (80080a0 <tcp_receive+0x964>)
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	da06      	bge.n	8007e9c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7e9b      	ldrb	r3, [r3, #26]
 8007e92:	f043 0302 	orr.w	r3, r3, #2
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007e9c:	4b80      	ldr	r3, [pc, #512]	; (80080a0 <tcp_receive+0x964>)
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f2c0 8410 	blt.w	80086cc <tcp_receive+0xf90>
 8007eac:	4b7c      	ldr	r3, [pc, #496]	; (80080a0 <tcp_receive+0x964>)
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007eb8:	440b      	add	r3, r1
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f300 8404 	bgt.w	80086cc <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ec8:	4b75      	ldr	r3, [pc, #468]	; (80080a0 <tcp_receive+0x964>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	f040 8287 	bne.w	80083e0 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8007ed2:	4b74      	ldr	r3, [pc, #464]	; (80080a4 <tcp_receive+0x968>)
 8007ed4:	891c      	ldrh	r4, [r3, #8]
 8007ed6:	4b73      	ldr	r3, [pc, #460]	; (80080a4 <tcp_receive+0x968>)
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	899b      	ldrh	r3, [r3, #12]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fb fac9 	bl	8003476 <lwip_htons>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <tcp_receive+0x7b6>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e000      	b.n	8007ef4 <tcp_receive+0x7b8>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4423      	add	r3, r4
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	4b6b      	ldr	r3, [pc, #428]	; (80080a8 <tcp_receive+0x96c>)
 8007efa:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007f00:	4b69      	ldr	r3, [pc, #420]	; (80080a8 <tcp_receive+0x96c>)
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d26e      	bcs.n	8007fe6 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007f08:	4b66      	ldr	r3, [pc, #408]	; (80080a4 <tcp_receive+0x968>)
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	899b      	ldrh	r3, [r3, #12]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fb fab0 	bl	8003476 <lwip_htons>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01b      	beq.n	8007f58 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007f20:	4b60      	ldr	r3, [pc, #384]	; (80080a4 <tcp_receive+0x968>)
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	899b      	ldrh	r3, [r3, #12]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f2c:	b29c      	uxth	r4, r3
 8007f2e:	4b5d      	ldr	r3, [pc, #372]	; (80080a4 <tcp_receive+0x968>)
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	899b      	ldrh	r3, [r3, #12]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fb fa9d 	bl	8003476 <lwip_htons>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fb fa96 	bl	8003476 <lwip_htons>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4b55      	ldr	r3, [pc, #340]	; (80080a4 <tcp_receive+0x968>)
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	4322      	orrs	r2, r4
 8007f54:	b292      	uxth	r2, r2
 8007f56:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007f5c:	4b51      	ldr	r3, [pc, #324]	; (80080a4 <tcp_receive+0x968>)
 8007f5e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007f60:	4b50      	ldr	r3, [pc, #320]	; (80080a4 <tcp_receive+0x968>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	899b      	ldrh	r3, [r3, #12]
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fb fa84 	bl	8003476 <lwip_htons>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d005      	beq.n	8007f84 <tcp_receive+0x848>
            inseg.len -= 1;
 8007f78:	4b4a      	ldr	r3, [pc, #296]	; (80080a4 <tcp_receive+0x968>)
 8007f7a:	891b      	ldrh	r3, [r3, #8]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	4b48      	ldr	r3, [pc, #288]	; (80080a4 <tcp_receive+0x968>)
 8007f82:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007f84:	4b47      	ldr	r3, [pc, #284]	; (80080a4 <tcp_receive+0x968>)
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	4b46      	ldr	r3, [pc, #280]	; (80080a4 <tcp_receive+0x968>)
 8007f8a:	891b      	ldrh	r3, [r3, #8]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f7fc fa22 	bl	80043d8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007f94:	4b43      	ldr	r3, [pc, #268]	; (80080a4 <tcp_receive+0x968>)
 8007f96:	891c      	ldrh	r4, [r3, #8]
 8007f98:	4b42      	ldr	r3, [pc, #264]	; (80080a4 <tcp_receive+0x968>)
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	899b      	ldrh	r3, [r3, #12]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fb fa68 	bl	8003476 <lwip_htons>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <tcp_receive+0x878>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <tcp_receive+0x87a>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4423      	add	r3, r4
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	4b3b      	ldr	r3, [pc, #236]	; (80080a8 <tcp_receive+0x96c>)
 8007fbc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007fbe:	4b3a      	ldr	r3, [pc, #232]	; (80080a8 <tcp_receive+0x96c>)
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	4b36      	ldr	r3, [pc, #216]	; (80080a0 <tcp_receive+0x964>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	441a      	add	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007fd2:	440b      	add	r3, r1
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d006      	beq.n	8007fe6 <tcp_receive+0x8aa>
 8007fd8:	4b34      	ldr	r3, [pc, #208]	; (80080ac <tcp_receive+0x970>)
 8007fda:	f240 527f 	movw	r2, #1407	; 0x57f
 8007fde:	4934      	ldr	r1, [pc, #208]	; (80080b0 <tcp_receive+0x974>)
 8007fe0:	4834      	ldr	r0, [pc, #208]	; (80080b4 <tcp_receive+0x978>)
 8007fe2:	f006 f89f 	bl	800e124 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 80e1 	beq.w	80081b2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007ff0:	4b2c      	ldr	r3, [pc, #176]	; (80080a4 <tcp_receive+0x968>)
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	899b      	ldrh	r3, [r3, #12]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fb fa3c 	bl	8003476 <lwip_htons>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d010      	beq.n	800802a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008008:	e00a      	b.n	8008020 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800801a:	68b8      	ldr	r0, [r7, #8]
 800801c:	f7fd ff03 	bl	8005e26 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1f0      	bne.n	800800a <tcp_receive+0x8ce>
 8008028:	e0c3      	b.n	80081b2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008030:	e04f      	b.n	80080d2 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	899b      	ldrh	r3, [r3, #12]
 8008038:	b29b      	uxth	r3, r3
 800803a:	4618      	mov	r0, r3
 800803c:	f7fb fa1b 	bl	8003476 <lwip_htons>
 8008040:	4603      	mov	r3, r0
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d03b      	beq.n	80080c2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800804a:	4b16      	ldr	r3, [pc, #88]	; (80080a4 <tcp_receive+0x968>)
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	899b      	ldrh	r3, [r3, #12]
 8008050:	b29b      	uxth	r3, r3
 8008052:	4618      	mov	r0, r3
 8008054:	f7fb fa0f 	bl	8003476 <lwip_htons>
 8008058:	4603      	mov	r3, r0
 800805a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800805e:	2b00      	cmp	r3, #0
 8008060:	d12f      	bne.n	80080c2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008062:	4b10      	ldr	r3, [pc, #64]	; (80080a4 <tcp_receive+0x968>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	899b      	ldrh	r3, [r3, #12]
 8008068:	b29c      	uxth	r4, r3
 800806a:	2001      	movs	r0, #1
 800806c:	f7fb fa03 	bl	8003476 <lwip_htons>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <tcp_receive+0x968>)
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	4322      	orrs	r2, r4
 800807a:	b292      	uxth	r2, r2
 800807c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800807e:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <tcp_receive+0x968>)
 8008080:	891c      	ldrh	r4, [r3, #8]
 8008082:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <tcp_receive+0x968>)
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	899b      	ldrh	r3, [r3, #12]
 8008088:	b29b      	uxth	r3, r3
 800808a:	4618      	mov	r0, r3
 800808c:	f7fb f9f3 	bl	8003476 <lwip_htons>
 8008090:	4603      	mov	r3, r0
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00e      	beq.n	80080b8 <tcp_receive+0x97c>
 800809a:	2301      	movs	r3, #1
 800809c:	e00d      	b.n	80080ba <tcp_receive+0x97e>
 800809e:	bf00      	nop
 80080a0:	200000e8 	.word	0x200000e8
 80080a4:	200000c8 	.word	0x200000c8
 80080a8:	200000f2 	.word	0x200000f2
 80080ac:	0800fd44 	.word	0x0800fd44
 80080b0:	08010010 	.word	0x08010010
 80080b4:	0800fd88 	.word	0x0800fd88
 80080b8:	2300      	movs	r3, #0
 80080ba:	4423      	add	r3, r4
 80080bc:	b29a      	uxth	r2, r3
 80080be:	4b95      	ldr	r3, [pc, #596]	; (8008314 <tcp_receive+0xbd8>)
 80080c0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80080cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ce:	f7fd feaa 	bl	8005e26 <tcp_seg_free>
            while (next &&
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00e      	beq.n	80080f6 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80080d8:	4b8e      	ldr	r3, [pc, #568]	; (8008314 <tcp_receive+0xbd8>)
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	4b8e      	ldr	r3, [pc, #568]	; (8008318 <tcp_receive+0xbdc>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	441a      	add	r2, r3
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ec:	8909      	ldrh	r1, [r1, #8]
 80080ee:	440b      	add	r3, r1
 80080f0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	da9d      	bge.n	8008032 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80080f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d057      	beq.n	80081ac <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 80080fc:	4b85      	ldr	r3, [pc, #532]	; (8008314 <tcp_receive+0xbd8>)
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	4b85      	ldr	r3, [pc, #532]	; (8008318 <tcp_receive+0xbdc>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	441a      	add	r2, r3
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008110:	2b00      	cmp	r3, #0
 8008112:	dd4b      	ble.n	80081ac <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	b29a      	uxth	r2, r3
 800811c:	4b7e      	ldr	r3, [pc, #504]	; (8008318 <tcp_receive+0xbdc>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	b29b      	uxth	r3, r3
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	b29a      	uxth	r2, r3
 8008126:	4b7d      	ldr	r3, [pc, #500]	; (800831c <tcp_receive+0xbe0>)
 8008128:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800812a:	4b7c      	ldr	r3, [pc, #496]	; (800831c <tcp_receive+0xbe0>)
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	899b      	ldrh	r3, [r3, #12]
 8008130:	b29b      	uxth	r3, r3
 8008132:	4618      	mov	r0, r3
 8008134:	f7fb f99f 	bl	8003476 <lwip_htons>
 8008138:	4603      	mov	r3, r0
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <tcp_receive+0xa12>
                inseg.len -= 1;
 8008142:	4b76      	ldr	r3, [pc, #472]	; (800831c <tcp_receive+0xbe0>)
 8008144:	891b      	ldrh	r3, [r3, #8]
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	4b74      	ldr	r3, [pc, #464]	; (800831c <tcp_receive+0xbe0>)
 800814c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800814e:	4b73      	ldr	r3, [pc, #460]	; (800831c <tcp_receive+0xbe0>)
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	4b72      	ldr	r3, [pc, #456]	; (800831c <tcp_receive+0xbe0>)
 8008154:	891b      	ldrh	r3, [r3, #8]
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f7fc f93d 	bl	80043d8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800815e:	4b6f      	ldr	r3, [pc, #444]	; (800831c <tcp_receive+0xbe0>)
 8008160:	891c      	ldrh	r4, [r3, #8]
 8008162:	4b6e      	ldr	r3, [pc, #440]	; (800831c <tcp_receive+0xbe0>)
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	899b      	ldrh	r3, [r3, #12]
 8008168:	b29b      	uxth	r3, r3
 800816a:	4618      	mov	r0, r3
 800816c:	f7fb f983 	bl	8003476 <lwip_htons>
 8008170:	4603      	mov	r3, r0
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <tcp_receive+0xa42>
 800817a:	2301      	movs	r3, #1
 800817c:	e000      	b.n	8008180 <tcp_receive+0xa44>
 800817e:	2300      	movs	r3, #0
 8008180:	4423      	add	r3, r4
 8008182:	b29a      	uxth	r2, r3
 8008184:	4b63      	ldr	r3, [pc, #396]	; (8008314 <tcp_receive+0xbd8>)
 8008186:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008188:	4b62      	ldr	r3, [pc, #392]	; (8008314 <tcp_receive+0xbd8>)
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	461a      	mov	r2, r3
 800818e:	4b62      	ldr	r3, [pc, #392]	; (8008318 <tcp_receive+0xbdc>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	441a      	add	r2, r3
 8008194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d006      	beq.n	80081ac <tcp_receive+0xa70>
 800819e:	4b60      	ldr	r3, [pc, #384]	; (8008320 <tcp_receive+0xbe4>)
 80081a0:	f240 52af 	movw	r2, #1455	; 0x5af
 80081a4:	495f      	ldr	r1, [pc, #380]	; (8008324 <tcp_receive+0xbe8>)
 80081a6:	4860      	ldr	r0, [pc, #384]	; (8008328 <tcp_receive+0xbec>)
 80081a8:	f005 ffbc 	bl	800e124 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80081b2:	4b58      	ldr	r3, [pc, #352]	; (8008314 <tcp_receive+0xbd8>)
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	4b57      	ldr	r3, [pc, #348]	; (8008318 <tcp_receive+0xbdc>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	441a      	add	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80081c6:	4b53      	ldr	r3, [pc, #332]	; (8008314 <tcp_receive+0xbd8>)
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d206      	bcs.n	80081dc <tcp_receive+0xaa0>
 80081ce:	4b54      	ldr	r3, [pc, #336]	; (8008320 <tcp_receive+0xbe4>)
 80081d0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80081d4:	4955      	ldr	r1, [pc, #340]	; (800832c <tcp_receive+0xbf0>)
 80081d6:	4854      	ldr	r0, [pc, #336]	; (8008328 <tcp_receive+0xbec>)
 80081d8:	f005 ffa4 	bl	800e124 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80081e0:	4b4c      	ldr	r3, [pc, #304]	; (8008314 <tcp_receive+0xbd8>)
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7fd f899 	bl	8005324 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80081f2:	4b4a      	ldr	r3, [pc, #296]	; (800831c <tcp_receive+0xbe0>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	891b      	ldrh	r3, [r3, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d006      	beq.n	800820a <tcp_receive+0xace>
          recv_data = inseg.p;
 80081fc:	4b47      	ldr	r3, [pc, #284]	; (800831c <tcp_receive+0xbe0>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	4a4b      	ldr	r2, [pc, #300]	; (8008330 <tcp_receive+0xbf4>)
 8008202:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008204:	4b45      	ldr	r3, [pc, #276]	; (800831c <tcp_receive+0xbe0>)
 8008206:	2200      	movs	r2, #0
 8008208:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800820a:	4b44      	ldr	r3, [pc, #272]	; (800831c <tcp_receive+0xbe0>)
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	899b      	ldrh	r3, [r3, #12]
 8008210:	b29b      	uxth	r3, r3
 8008212:	4618      	mov	r0, r3
 8008214:	f7fb f92f 	bl	8003476 <lwip_htons>
 8008218:	4603      	mov	r3, r0
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 80b4 	beq.w	800838c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008224:	4b43      	ldr	r3, [pc, #268]	; (8008334 <tcp_receive+0xbf8>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f043 0320 	orr.w	r3, r3, #32
 800822c:	b2da      	uxtb	r2, r3
 800822e:	4b41      	ldr	r3, [pc, #260]	; (8008334 <tcp_receive+0xbf8>)
 8008230:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008232:	e0ab      	b.n	800838c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008238:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	4a35      	ldr	r2, [pc, #212]	; (8008318 <tcp_receive+0xbdc>)
 8008244:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	891b      	ldrh	r3, [r3, #8]
 800824a:	461c      	mov	r4, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	899b      	ldrh	r3, [r3, #12]
 8008252:	b29b      	uxth	r3, r3
 8008254:	4618      	mov	r0, r3
 8008256:	f7fb f90e 	bl	8003476 <lwip_htons>
 800825a:	4603      	mov	r3, r0
 800825c:	f003 0303 	and.w	r3, r3, #3
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <tcp_receive+0xb2c>
 8008264:	2301      	movs	r3, #1
 8008266:	e000      	b.n	800826a <tcp_receive+0xb2e>
 8008268:	2300      	movs	r3, #0
 800826a:	191a      	adds	r2, r3, r4
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	441a      	add	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800827a:	461c      	mov	r4, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	891b      	ldrh	r3, [r3, #8]
 8008280:	461d      	mov	r5, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	899b      	ldrh	r3, [r3, #12]
 8008288:	b29b      	uxth	r3, r3
 800828a:	4618      	mov	r0, r3
 800828c:	f7fb f8f3 	bl	8003476 <lwip_htons>
 8008290:	4603      	mov	r3, r0
 8008292:	f003 0303 	and.w	r3, r3, #3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <tcp_receive+0xb62>
 800829a:	2301      	movs	r3, #1
 800829c:	e000      	b.n	80082a0 <tcp_receive+0xb64>
 800829e:	2300      	movs	r3, #0
 80082a0:	442b      	add	r3, r5
 80082a2:	429c      	cmp	r4, r3
 80082a4:	d206      	bcs.n	80082b4 <tcp_receive+0xb78>
 80082a6:	4b1e      	ldr	r3, [pc, #120]	; (8008320 <tcp_receive+0xbe4>)
 80082a8:	f240 52de 	movw	r2, #1502	; 0x5de
 80082ac:	4922      	ldr	r1, [pc, #136]	; (8008338 <tcp_receive+0xbfc>)
 80082ae:	481e      	ldr	r0, [pc, #120]	; (8008328 <tcp_receive+0xbec>)
 80082b0:	f005 ff38 	bl	800e124 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	891b      	ldrh	r3, [r3, #8]
 80082b8:	461c      	mov	r4, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	899b      	ldrh	r3, [r3, #12]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fb f8d7 	bl	8003476 <lwip_htons>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f003 0303 	and.w	r3, r3, #3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <tcp_receive+0xb9a>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <tcp_receive+0xb9c>
 80082d6:	2300      	movs	r3, #0
 80082d8:	1919      	adds	r1, r3, r4
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80082de:	b28b      	uxth	r3, r1
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7fd f81b 	bl	8005324 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	891b      	ldrh	r3, [r3, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d028      	beq.n	800834a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <tcp_receive+0xbf4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01d      	beq.n	800833c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <tcp_receive+0xbf4>)
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f7fc faa6 	bl	800485c <pbuf_cat>
 8008310:	e018      	b.n	8008344 <tcp_receive+0xc08>
 8008312:	bf00      	nop
 8008314:	200000f2 	.word	0x200000f2
 8008318:	200000e8 	.word	0x200000e8
 800831c:	200000c8 	.word	0x200000c8
 8008320:	0800fd44 	.word	0x0800fd44
 8008324:	08010048 	.word	0x08010048
 8008328:	0800fd88 	.word	0x0800fd88
 800832c:	08010084 	.word	0x08010084
 8008330:	200000f8 	.word	0x200000f8
 8008334:	200000f5 	.word	0x200000f5
 8008338:	080100a4 	.word	0x080100a4
            } else {
              recv_data = cseg->p;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	4a71      	ldr	r2, [pc, #452]	; (8008508 <tcp_receive+0xdcc>)
 8008342:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	899b      	ldrh	r3, [r3, #12]
 8008350:	b29b      	uxth	r3, r3
 8008352:	4618      	mov	r0, r3
 8008354:	f7fb f88f 	bl	8003476 <lwip_htons>
 8008358:	4603      	mov	r3, r0
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00d      	beq.n	800837e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008362:	4b6a      	ldr	r3, [pc, #424]	; (800850c <tcp_receive+0xdd0>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	f043 0320 	orr.w	r3, r3, #32
 800836a:	b2da      	uxtb	r2, r3
 800836c:	4b67      	ldr	r3, [pc, #412]	; (800850c <tcp_receive+0xdd0>)
 800836e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	7d1b      	ldrb	r3, [r3, #20]
 8008374:	2b04      	cmp	r3, #4
 8008376:	d102      	bne.n	800837e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2207      	movs	r2, #7
 800837c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f7fd fd4d 	bl	8005e26 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008390:	2b00      	cmp	r3, #0
 8008392:	d008      	beq.n	80083a6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80083a0:	429a      	cmp	r2, r3
 80083a2:	f43f af47 	beq.w	8008234 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7e9b      	ldrb	r3, [r3, #26]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00e      	beq.n	80083d0 <tcp_receive+0xc94>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	7e9b      	ldrb	r3, [r3, #26]
 80083b6:	f023 0301 	bic.w	r3, r3, #1
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	769a      	strb	r2, [r3, #26]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	7e9b      	ldrb	r3, [r3, #26]
 80083c4:	f043 0302 	orr.w	r3, r3, #2
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80083ce:	e181      	b.n	80086d4 <tcp_receive+0xf98>
        tcp_ack(pcb);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	7e9b      	ldrb	r3, [r3, #26]
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80083de:	e179      	b.n	80086d4 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 f8c5 	bl	8009570 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d106      	bne.n	80083fc <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80083ee:	4848      	ldr	r0, [pc, #288]	; (8008510 <tcp_receive+0xdd4>)
 80083f0:	f7fd fd31 	bl	8005e56 <tcp_seg_copy>
 80083f4:	4602      	mov	r2, r0
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80083fa:	e16b      	b.n	80086d4 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008406:	e150      	b.n	80086aa <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	4b41      	ldr	r3, [pc, #260]	; (8008514 <tcp_receive+0xdd8>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d11d      	bne.n	8008452 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008416:	4b3e      	ldr	r3, [pc, #248]	; (8008510 <tcp_receive+0xdd4>)
 8008418:	891a      	ldrh	r2, [r3, #8]
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	891b      	ldrh	r3, [r3, #8]
 800841e:	429a      	cmp	r2, r3
 8008420:	f240 8148 	bls.w	80086b4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8008424:	483a      	ldr	r0, [pc, #232]	; (8008510 <tcp_receive+0xdd4>)
 8008426:	f7fd fd16 	bl	8005e56 <tcp_seg_copy>
 800842a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 8142 	beq.w	80086b8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <tcp_receive+0xd06>
                    prev->next = cseg;
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	e002      	b.n	8008448 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff f900 	bl	8007650 <tcp_oos_insert_segment>
                }
                break;
 8008450:	e132      	b.n	80086b8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	2b00      	cmp	r3, #0
 8008456:	d117      	bne.n	8008488 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008458:	4b2e      	ldr	r3, [pc, #184]	; (8008514 <tcp_receive+0xdd8>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	da57      	bge.n	8008518 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8008468:	4829      	ldr	r0, [pc, #164]	; (8008510 <tcp_receive+0xdd4>)
 800846a:	f7fd fcf4 	bl	8005e56 <tcp_seg_copy>
 800846e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 8122 	beq.w	80086bc <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800847e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7ff f8e5 	bl	8007650 <tcp_oos_insert_segment>
                  }
                  break;
 8008486:	e119      	b.n	80086bc <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8008488:	4b22      	ldr	r3, [pc, #136]	; (8008514 <tcp_receive+0xdd8>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	db3e      	blt.n	8008518 <tcp_receive+0xddc>
 800849a:	4b1e      	ldr	r3, [pc, #120]	; (8008514 <tcp_receive+0xdd8>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	3301      	adds	r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dc35      	bgt.n	8008518 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80084ac:	4818      	ldr	r0, [pc, #96]	; (8008510 <tcp_receive+0xdd4>)
 80084ae:	f7fd fcd2 	bl	8005e56 <tcp_seg_copy>
 80084b2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f000 8102 	beq.w	80086c0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084c4:	8912      	ldrh	r2, [r2, #8]
 80084c6:	441a      	add	r2, r3
 80084c8:	4b12      	ldr	r3, [pc, #72]	; (8008514 <tcp_receive+0xdd8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd12      	ble.n	80084f8 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80084d2:	4b10      	ldr	r3, [pc, #64]	; (8008514 <tcp_receive+0xdd8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	891b      	ldrh	r3, [r3, #8]
 80084f0:	4619      	mov	r1, r3
 80084f2:	4610      	mov	r0, r2
 80084f4:	f7fb ff70 	bl	80043d8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80084fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff f8a5 	bl	8007650 <tcp_oos_insert_segment>
                  }
                  break;
 8008506:	e0db      	b.n	80086c0 <tcp_receive+0xf84>
 8008508:	200000f8 	.word	0x200000f8
 800850c:	200000f5 	.word	0x200000f5
 8008510:	200000c8 	.word	0x200000c8
 8008514:	200000e8 	.word	0x200000e8
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f040 80bf 	bne.w	80086a0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008522:	4b7c      	ldr	r3, [pc, #496]	; (8008714 <tcp_receive+0xfd8>)
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800852e:	2b00      	cmp	r3, #0
 8008530:	f340 80b6 	ble.w	80086a0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	899b      	ldrh	r3, [r3, #12]
 800853a:	b29b      	uxth	r3, r3
 800853c:	4618      	mov	r0, r3
 800853e:	f7fa ff9a 	bl	8003476 <lwip_htons>
 8008542:	4603      	mov	r3, r0
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	f040 80bb 	bne.w	80086c4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800854e:	4872      	ldr	r0, [pc, #456]	; (8008718 <tcp_receive+0xfdc>)
 8008550:	f7fd fc81 	bl	8005e56 <tcp_seg_copy>
 8008554:	4602      	mov	r2, r0
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80b2 	beq.w	80086c8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800856c:	8912      	ldrh	r2, [r2, #8]
 800856e:	441a      	add	r2, r3
 8008570:	4b68      	ldr	r3, [pc, #416]	; (8008714 <tcp_receive+0xfd8>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	dd12      	ble.n	80085a0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800857a:	4b66      	ldr	r3, [pc, #408]	; (8008714 <tcp_receive+0xfd8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	b29a      	uxth	r2, r3
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	b29b      	uxth	r3, r3
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	b29a      	uxth	r2, r3
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008596:	891b      	ldrh	r3, [r3, #8]
 8008598:	4619      	mov	r1, r3
 800859a:	4610      	mov	r0, r2
 800859c:	f7fb ff1c 	bl	80043d8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80085a0:	4b5e      	ldr	r3, [pc, #376]	; (800871c <tcp_receive+0xfe0>)
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	4b5b      	ldr	r3, [pc, #364]	; (8008714 <tcp_receive+0xfd8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	441a      	add	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80085b4:	440b      	add	r3, r1
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f340 8085 	ble.w	80086c8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	899b      	ldrh	r3, [r3, #12]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fa ff54 	bl	8003476 <lwip_htons>
 80085ce:	4603      	mov	r3, r0
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01e      	beq.n	8008616 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	899b      	ldrh	r3, [r3, #12]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80085e6:	b29c      	uxth	r4, r3
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	899b      	ldrh	r3, [r3, #12]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fa ff3f 	bl	8003476 <lwip_htons>
 80085f8:	4603      	mov	r3, r0
 80085fa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80085fe:	b29b      	uxth	r3, r3
 8008600:	4618      	mov	r0, r3
 8008602:	f7fa ff38 	bl	8003476 <lwip_htons>
 8008606:	4603      	mov	r3, r0
 8008608:	461a      	mov	r2, r3
 800860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	4322      	orrs	r2, r4
 8008612:	b292      	uxth	r2, r2
 8008614:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008620:	4413      	add	r3, r2
 8008622:	b299      	uxth	r1, r3
 8008624:	4b3b      	ldr	r3, [pc, #236]	; (8008714 <tcp_receive+0xfd8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	b29a      	uxth	r2, r3
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	1a8a      	subs	r2, r1, r2
 8008630:	b292      	uxth	r2, r2
 8008632:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	891b      	ldrh	r3, [r3, #8]
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f7fb fec8 	bl	80043d8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	891c      	ldrh	r4, [r3, #8]
 800864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	899b      	ldrh	r3, [r3, #12]
 8008656:	b29b      	uxth	r3, r3
 8008658:	4618      	mov	r0, r3
 800865a:	f7fa ff0c 	bl	8003476 <lwip_htons>
 800865e:	4603      	mov	r3, r0
 8008660:	f003 0303 	and.w	r3, r3, #3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <tcp_receive+0xf30>
 8008668:	2301      	movs	r3, #1
 800866a:	e000      	b.n	800866e <tcp_receive+0xf32>
 800866c:	2300      	movs	r3, #0
 800866e:	4423      	add	r3, r4
 8008670:	b29a      	uxth	r2, r3
 8008672:	4b2a      	ldr	r3, [pc, #168]	; (800871c <tcp_receive+0xfe0>)
 8008674:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008676:	4b29      	ldr	r3, [pc, #164]	; (800871c <tcp_receive+0xfe0>)
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	4b25      	ldr	r3, [pc, #148]	; (8008714 <tcp_receive+0xfd8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	441a      	add	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800868a:	440b      	add	r3, r1
 800868c:	429a      	cmp	r2, r3
 800868e:	d01b      	beq.n	80086c8 <tcp_receive+0xf8c>
 8008690:	4b23      	ldr	r3, [pc, #140]	; (8008720 <tcp_receive+0xfe4>)
 8008692:	f240 627b 	movw	r2, #1659	; 0x67b
 8008696:	4923      	ldr	r1, [pc, #140]	; (8008724 <tcp_receive+0xfe8>)
 8008698:	4823      	ldr	r0, [pc, #140]	; (8008728 <tcp_receive+0xfec>)
 800869a:	f005 fd43 	bl	800e124 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800869e:	e013      	b.n	80086c8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80086a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f47f aeab 	bne.w	8008408 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80086b2:	e00f      	b.n	80086d4 <tcp_receive+0xf98>
                break;
 80086b4:	bf00      	nop
 80086b6:	e00d      	b.n	80086d4 <tcp_receive+0xf98>
                break;
 80086b8:	bf00      	nop
 80086ba:	e00b      	b.n	80086d4 <tcp_receive+0xf98>
                  break;
 80086bc:	bf00      	nop
 80086be:	e009      	b.n	80086d4 <tcp_receive+0xf98>
                  break;
 80086c0:	bf00      	nop
 80086c2:	e007      	b.n	80086d4 <tcp_receive+0xf98>
                  break;
 80086c4:	bf00      	nop
 80086c6:	e005      	b.n	80086d4 <tcp_receive+0xf98>
                break;
 80086c8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80086ca:	e003      	b.n	80086d4 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 ff4f 	bl	8009570 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80086d2:	e01a      	b.n	800870a <tcp_receive+0xfce>
 80086d4:	e019      	b.n	800870a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80086d6:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <tcp_receive+0xfd8>)
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	db0a      	blt.n	80086fa <tcp_receive+0xfbe>
 80086e4:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <tcp_receive+0xfd8>)
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80086f0:	440b      	add	r3, r1
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	3301      	adds	r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dd07      	ble.n	800870a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7e9b      	ldrb	r3, [r3, #26]
 80086fe:	f043 0302 	orr.w	r3, r3, #2
 8008702:	b2da      	uxtb	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8008708:	e7ff      	b.n	800870a <tcp_receive+0xfce>
 800870a:	bf00      	nop
 800870c:	3734      	adds	r7, #52	; 0x34
 800870e:	46bd      	mov	sp, r7
 8008710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008712:	bf00      	nop
 8008714:	200000e8 	.word	0x200000e8
 8008718:	200000c8 	.word	0x200000c8
 800871c:	200000f2 	.word	0x200000f2
 8008720:	0800fd44 	.word	0x0800fd44
 8008724:	08010010 	.word	0x08010010
 8008728:	0800fd88 	.word	0x0800fd88

0800872c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008732:	4b18      	ldr	r3, [pc, #96]	; (8008794 <tcp_getoptbyte+0x68>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <tcp_getoptbyte+0x1a>
 800873a:	4b17      	ldr	r3, [pc, #92]	; (8008798 <tcp_getoptbyte+0x6c>)
 800873c:	881a      	ldrh	r2, [r3, #0]
 800873e:	4b17      	ldr	r3, [pc, #92]	; (800879c <tcp_getoptbyte+0x70>)
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d20e      	bcs.n	8008764 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008746:	4b16      	ldr	r3, [pc, #88]	; (80087a0 <tcp_getoptbyte+0x74>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3314      	adds	r3, #20
 800874c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800874e:	4b12      	ldr	r3, [pc, #72]	; (8008798 <tcp_getoptbyte+0x6c>)
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	b291      	uxth	r1, r2
 8008756:	4a10      	ldr	r2, [pc, #64]	; (8008798 <tcp_getoptbyte+0x6c>)
 8008758:	8011      	strh	r1, [r2, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	4413      	add	r3, r2
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	e010      	b.n	8008786 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008764:	4b0c      	ldr	r3, [pc, #48]	; (8008798 <tcp_getoptbyte+0x6c>)
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	b291      	uxth	r1, r2
 800876c:	4a0a      	ldr	r2, [pc, #40]	; (8008798 <tcp_getoptbyte+0x6c>)
 800876e:	8011      	strh	r1, [r2, #0]
 8008770:	b2da      	uxtb	r2, r3
 8008772:	4b0a      	ldr	r3, [pc, #40]	; (800879c <tcp_getoptbyte+0x70>)
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <tcp_getoptbyte+0x68>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	4413      	add	r3, r2
 8008784:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	200000e0 	.word	0x200000e0
 8008798:	200000e4 	.word	0x200000e4
 800879c:	200000de 	.word	0x200000de
 80087a0:	200000d8 	.word	0x200000d8

080087a4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80087ac:	4b2d      	ldr	r3, [pc, #180]	; (8008864 <tcp_parseopt+0xc0>)
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d053      	beq.n	800885c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80087b4:	4b2c      	ldr	r3, [pc, #176]	; (8008868 <tcp_parseopt+0xc4>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	801a      	strh	r2, [r3, #0]
 80087ba:	e043      	b.n	8008844 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80087bc:	f7ff ffb6 	bl	800872c <tcp_getoptbyte>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d03c      	beq.n	8008844 <tcp_parseopt+0xa0>
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d002      	beq.n	80087d4 <tcp_parseopt+0x30>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d03f      	beq.n	8008852 <tcp_parseopt+0xae>
 80087d2:	e026      	b.n	8008822 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80087d4:	f7ff ffaa 	bl	800872c <tcp_getoptbyte>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d13b      	bne.n	8008856 <tcp_parseopt+0xb2>
 80087de:	4b22      	ldr	r3, [pc, #136]	; (8008868 <tcp_parseopt+0xc4>)
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	3302      	adds	r3, #2
 80087e4:	4a1f      	ldr	r2, [pc, #124]	; (8008864 <tcp_parseopt+0xc0>)
 80087e6:	8812      	ldrh	r2, [r2, #0]
 80087e8:	4293      	cmp	r3, r2
 80087ea:	dc34      	bgt.n	8008856 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80087ec:	f7ff ff9e 	bl	800872c <tcp_getoptbyte>
 80087f0:	4603      	mov	r3, r0
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	021b      	lsls	r3, r3, #8
 80087f6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80087f8:	f7ff ff98 	bl	800872c <tcp_getoptbyte>
 80087fc:	4603      	mov	r3, r0
 80087fe:	b29a      	uxth	r2, r3
 8008800:	89bb      	ldrh	r3, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008806:	89bb      	ldrh	r3, [r7, #12]
 8008808:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800880c:	d804      	bhi.n	8008818 <tcp_parseopt+0x74>
 800880e:	89bb      	ldrh	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <tcp_parseopt+0x74>
 8008814:	89ba      	ldrh	r2, [r7, #12]
 8008816:	e001      	b.n	800881c <tcp_parseopt+0x78>
 8008818:	f44f 7206 	mov.w	r2, #536	; 0x218
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8008820:	e010      	b.n	8008844 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008822:	f7ff ff83 	bl	800872c <tcp_getoptbyte>
 8008826:	4603      	mov	r3, r0
 8008828:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800882a:	7afb      	ldrb	r3, [r7, #11]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d914      	bls.n	800885a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008830:	7afb      	ldrb	r3, [r7, #11]
 8008832:	b29a      	uxth	r2, r3
 8008834:	4b0c      	ldr	r3, [pc, #48]	; (8008868 <tcp_parseopt+0xc4>)
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	4413      	add	r3, r2
 800883a:	b29b      	uxth	r3, r3
 800883c:	3b02      	subs	r3, #2
 800883e:	b29a      	uxth	r2, r3
 8008840:	4b09      	ldr	r3, [pc, #36]	; (8008868 <tcp_parseopt+0xc4>)
 8008842:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008844:	4b08      	ldr	r3, [pc, #32]	; (8008868 <tcp_parseopt+0xc4>)
 8008846:	881a      	ldrh	r2, [r3, #0]
 8008848:	4b06      	ldr	r3, [pc, #24]	; (8008864 <tcp_parseopt+0xc0>)
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d3b5      	bcc.n	80087bc <tcp_parseopt+0x18>
 8008850:	e004      	b.n	800885c <tcp_parseopt+0xb8>
        return;
 8008852:	bf00      	nop
 8008854:	e002      	b.n	800885c <tcp_parseopt+0xb8>
          return;
 8008856:	bf00      	nop
 8008858:	e000      	b.n	800885c <tcp_parseopt+0xb8>
          return;
 800885a:	bf00      	nop
      }
    }
  }
}
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	200000dc 	.word	0x200000dc
 8008868:	200000e4 	.word	0x200000e4

0800886c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <tcp_trigger_input_pcb_close+0x1c>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	f043 0310 	orr.w	r3, r3, #16
 8008878:	b2da      	uxtb	r2, r3
 800887a:	4b03      	ldr	r3, [pc, #12]	; (8008888 <tcp_trigger_input_pcb_close+0x1c>)
 800887c:	701a      	strb	r2, [r3, #0]
}
 800887e:	bf00      	nop
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	200000f5 	.word	0x200000f5

0800888c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	607b      	str	r3, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	817b      	strh	r3, [r7, #10]
 800889a:	4613      	mov	r3, r2
 800889c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800889e:	897a      	ldrh	r2, [r7, #10]
 80088a0:	893b      	ldrh	r3, [r7, #8]
 80088a2:	4413      	add	r3, r2
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	3314      	adds	r3, #20
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2200      	movs	r2, #0
 80088ac:	4619      	mov	r1, r3
 80088ae:	2001      	movs	r0, #1
 80088b0:	f7fb fb94 	bl	8003fdc <pbuf_alloc>
 80088b4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d057      	beq.n	800896c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	895b      	ldrh	r3, [r3, #10]
 80088c0:	461a      	mov	r2, r3
 80088c2:	897b      	ldrh	r3, [r7, #10]
 80088c4:	3314      	adds	r3, #20
 80088c6:	429a      	cmp	r2, r3
 80088c8:	da05      	bge.n	80088d6 <tcp_output_alloc_header+0x4a>
 80088ca:	4b2b      	ldr	r3, [pc, #172]	; (8008978 <tcp_output_alloc_header+0xec>)
 80088cc:	2273      	movs	r2, #115	; 0x73
 80088ce:	492b      	ldr	r1, [pc, #172]	; (800897c <tcp_output_alloc_header+0xf0>)
 80088d0:	482b      	ldr	r0, [pc, #172]	; (8008980 <tcp_output_alloc_header+0xf4>)
 80088d2:	f005 fc27 	bl	800e124 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8adb      	ldrh	r3, [r3, #22]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fa fdc8 	bl	8003476 <lwip_htons>
 80088e6:	4603      	mov	r3, r0
 80088e8:	461a      	mov	r2, r3
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8b1b      	ldrh	r3, [r3, #24]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fa fdbf 	bl	8003476 <lwip_htons>
 80088f8:	4603      	mov	r3, r0
 80088fa:	461a      	mov	r2, r3
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	4618      	mov	r0, r3
 800890c:	f7fa fdc1 	bl	8003492 <lwip_htonl>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008916:	897b      	ldrh	r3, [r7, #10]
 8008918:	089b      	lsrs	r3, r3, #2
 800891a:	b29b      	uxth	r3, r3
 800891c:	3305      	adds	r3, #5
 800891e:	b29b      	uxth	r3, r3
 8008920:	031b      	lsls	r3, r3, #12
 8008922:	b29b      	uxth	r3, r3
 8008924:	f043 0310 	orr.w	r3, r3, #16
 8008928:	b29b      	uxth	r3, r3
 800892a:	4618      	mov	r0, r3
 800892c:	f7fa fda3 	bl	8003476 <lwip_htons>
 8008930:	4603      	mov	r3, r0
 8008932:	461a      	mov	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893c:	4618      	mov	r0, r3
 800893e:	f7fa fd9a 	bl	8003476 <lwip_htons>
 8008942:	4603      	mov	r3, r0
 8008944:	461a      	mov	r2, r3
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	2200      	movs	r2, #0
 800894e:	741a      	strb	r2, [r3, #16]
 8008950:	2200      	movs	r2, #0
 8008952:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2200      	movs	r2, #0
 8008958:	749a      	strb	r2, [r3, #18]
 800895a:	2200      	movs	r2, #0
 800895c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008966:	441a      	add	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800896c:	697b      	ldr	r3, [r7, #20]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	080100cc 	.word	0x080100cc
 800897c:	08010100 	.word	0x08010100
 8008980:	08010130 	.word	0x08010130

08008984 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008984:	b590      	push	{r4, r7, lr}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008990:	2b00      	cmp	r3, #0
 8008992:	d02d      	beq.n	80089f0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	e002      	b.n	80089a2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1f8      	bne.n	800899c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	899b      	ldrh	r3, [r3, #12]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fa fd5f 	bl	8003476 <lwip_htons>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d116      	bne.n	80089f0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	899b      	ldrh	r3, [r3, #12]
 80089c8:	b29c      	uxth	r4, r3
 80089ca:	2001      	movs	r0, #1
 80089cc:	f7fa fd53 	bl	8003476 <lwip_htons>
 80089d0:	4603      	mov	r3, r0
 80089d2:	461a      	mov	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	4322      	orrs	r2, r4
 80089da:	b292      	uxth	r2, r2
 80089dc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	7e9b      	ldrb	r3, [r3, #26]
 80089e2:	f043 0320 	orr.w	r3, r3, #32
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	e004      	b.n	80089fa <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80089f0:	2101      	movs	r1, #1
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fcc0 	bl	8009378 <tcp_enqueue_flags>
 80089f8:	4603      	mov	r3, r0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd90      	pop	{r4, r7, pc}
	...

08008a04 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	603b      	str	r3, [r7, #0]
 8008a10:	4613      	mov	r3, r2
 8008a12:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008a14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008a22:	2003      	movs	r0, #3
 8008a24:	f7fb f8d6 	bl	8003bd4 <memp_malloc>
 8008a28:	6138      	str	r0, [r7, #16]
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d104      	bne.n	8008a3a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008a30:	68b8      	ldr	r0, [r7, #8]
 8008a32:	f7fb fe45 	bl	80046c0 <pbuf_free>
    return NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e061      	b.n	8008afe <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008a40:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	891a      	ldrh	r2, [r3, #8]
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d205      	bcs.n	8008a66 <tcp_create_segment+0x62>
 8008a5a:	4b2b      	ldr	r3, [pc, #172]	; (8008b08 <tcp_create_segment+0x104>)
 8008a5c:	22ba      	movs	r2, #186	; 0xba
 8008a5e:	492b      	ldr	r1, [pc, #172]	; (8008b0c <tcp_create_segment+0x108>)
 8008a60:	482b      	ldr	r0, [pc, #172]	; (8008b10 <tcp_create_segment+0x10c>)
 8008a62:	f005 fb5f 	bl	800e124 <iprintf>
  seg->len = p->tot_len - optlen;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	891a      	ldrh	r2, [r3, #8]
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8008a76:	2114      	movs	r1, #20
 8008a78:	68b8      	ldr	r0, [r7, #8]
 8008a7a:	f7fb fdfd 	bl	8004678 <pbuf_header>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d004      	beq.n	8008a8e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8008a84:	6938      	ldr	r0, [r7, #16]
 8008a86:	f7fd f9ce 	bl	8005e26 <tcp_seg_free>
    return NULL;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	e037      	b.n	8008afe <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8ada      	ldrh	r2, [r3, #22]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	68dc      	ldr	r4, [r3, #12]
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7fa fce8 	bl	8003476 <lwip_htons>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8b1a      	ldrh	r2, [r3, #24]
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	68dc      	ldr	r4, [r3, #12]
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	f7fa fcdf 	bl	8003476 <lwip_htons>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	68dc      	ldr	r4, [r3, #12]
 8008ac0:	6838      	ldr	r0, [r7, #0]
 8008ac2:	f7fa fce6 	bl	8003492 <lwip_htonl>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	089b      	lsrs	r3, r3, #2
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3305      	adds	r3, #5
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	031b      	lsls	r3, r3, #12
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	68dc      	ldr	r4, [r3, #12]
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f7fa fcc5 	bl	8003476 <lwip_htons>
 8008aec:	4603      	mov	r3, r0
 8008aee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	749a      	strb	r2, [r3, #18]
 8008af8:	2200      	movs	r2, #0
 8008afa:	74da      	strb	r2, [r3, #19]
  return seg;
 8008afc:	693b      	ldr	r3, [r7, #16]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd90      	pop	{r4, r7, pc}
 8008b06:	bf00      	nop
 8008b08:	080100cc 	.word	0x080100cc
 8008b0c:	08010158 	.word	0x08010158
 8008b10:	08010130 	.word	0x08010130

08008b14 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	607b      	str	r3, [r7, #4]
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73fb      	strb	r3, [r7, #15]
 8008b20:	460b      	mov	r3, r1
 8008b22:	81bb      	strh	r3, [r7, #12]
 8008b24:	4613      	mov	r3, r2
 8008b26:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8008b28:	89bb      	ldrh	r3, [r7, #12]
 8008b2a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8008b2c:	89ba      	ldrh	r2, [r7, #12]
 8008b2e:	897b      	ldrh	r3, [r7, #10]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d221      	bcs.n	8008b78 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8008b34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d111      	bne.n	8008b64 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	7e9b      	ldrb	r3, [r3, #26]
 8008b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d115      	bne.n	8008b78 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8008b4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d007      	beq.n	8008b64 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d103      	bne.n	8008b64 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d009      	beq.n	8008b78 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8008b64:	89bb      	ldrh	r3, [r7, #12]
 8008b66:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8008b6a:	f023 0203 	bic.w	r2, r3, #3
 8008b6e:	897b      	ldrh	r3, [r7, #10]
 8008b70:	4293      	cmp	r3, r2
 8008b72:	bf28      	it	cs
 8008b74:	4613      	movcs	r3, r2
 8008b76:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8008b78:	8af9      	ldrh	r1, [r7, #22]
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fb fa2c 	bl	8003fdc <pbuf_alloc>
 8008b84:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e019      	b.n	8008bc4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d006      	beq.n	8008ba6 <tcp_pbuf_prealloc+0x92>
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <tcp_pbuf_prealloc+0xb8>)
 8008b9a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8008b9e:	490c      	ldr	r1, [pc, #48]	; (8008bd0 <tcp_pbuf_prealloc+0xbc>)
 8008ba0:	480c      	ldr	r0, [pc, #48]	; (8008bd4 <tcp_pbuf_prealloc+0xc0>)
 8008ba2:	f005 fabf 	bl	800e124 <iprintf>
  *oversize = p->len - length;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	895a      	ldrh	r2, [r3, #10]
 8008baa:	89bb      	ldrh	r3, [r7, #12]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	89ba      	ldrh	r2, [r7, #12]
 8008bb8:	811a      	strh	r2, [r3, #8]
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	891a      	ldrh	r2, [r3, #8]
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	815a      	strh	r2, [r3, #10]
  return p;
 8008bc2:	693b      	ldr	r3, [r7, #16]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	080100cc 	.word	0x080100cc
 8008bd0:	08010170 	.word	0x08010170
 8008bd4:	08010130 	.word	0x08010130

08008bd8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	7d1b      	ldrb	r3, [r3, #20]
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d00e      	beq.n	8008c0a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8008bf0:	2b07      	cmp	r3, #7
 8008bf2:	d00a      	beq.n	8008c0a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d006      	beq.n	8008c0a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d002      	beq.n	8008c0a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8008c04:	f06f 030a 	mvn.w	r3, #10
 8008c08:	e04f      	b.n	8008caa <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8008c0a:	887b      	ldrh	r3, [r7, #2]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <tcp_write_checks+0x3c>
    return ERR_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	e04a      	b.n	8008caa <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c1a:	887a      	ldrh	r2, [r7, #2]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d909      	bls.n	8008c34 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	7e9b      	ldrb	r3, [r3, #26]
 8008c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8008c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c32:	e03a      	b.n	8008caa <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c3a:	2b08      	cmp	r3, #8
 8008c3c:	d806      	bhi.n	8008c4c <tcp_write_checks+0x74>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c44:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d909      	bls.n	8008c60 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	7e9b      	ldrb	r3, [r3, #26]
 8008c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8008c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5e:	e024      	b.n	8008caa <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00f      	beq.n	8008c8a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d11a      	bne.n	8008ca8 <tcp_write_checks+0xd0>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d116      	bne.n	8008ca8 <tcp_write_checks+0xd0>
 8008c7a:	4b0e      	ldr	r3, [pc, #56]	; (8008cb4 <tcp_write_checks+0xdc>)
 8008c7c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8008c80:	490d      	ldr	r1, [pc, #52]	; (8008cb8 <tcp_write_checks+0xe0>)
 8008c82:	480e      	ldr	r0, [pc, #56]	; (8008cbc <tcp_write_checks+0xe4>)
 8008c84:	f005 fa4e 	bl	800e124 <iprintf>
 8008c88:	e00e      	b.n	8008ca8 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d103      	bne.n	8008c9a <tcp_write_checks+0xc2>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d006      	beq.n	8008ca8 <tcp_write_checks+0xd0>
 8008c9a:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <tcp_write_checks+0xdc>)
 8008c9c:	f240 1259 	movw	r2, #345	; 0x159
 8008ca0:	4907      	ldr	r1, [pc, #28]	; (8008cc0 <tcp_write_checks+0xe8>)
 8008ca2:	4806      	ldr	r0, [pc, #24]	; (8008cbc <tcp_write_checks+0xe4>)
 8008ca4:	f005 fa3e 	bl	800e124 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	080100cc 	.word	0x080100cc
 8008cb8:	08010184 	.word	0x08010184
 8008cbc:	08010130 	.word	0x08010130
 8008cc0:	080101c0 	.word	0x080101c0

08008cc4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8008cc4:	b590      	push	{r4, r7, lr}
 8008cc6:	b09b      	sub	sp, #108	; 0x6c
 8008cc8:	af04      	add	r7, sp, #16
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4611      	mov	r1, r2
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	80fb      	strh	r3, [r7, #6]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cea:	2300      	movs	r3, #0
 8008cec:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d12:	085b      	lsrs	r3, r3, #1
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	bf28      	it	cs
 8008d1e:	4613      	movcs	r3, r2
 8008d20:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8008d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <tcp_write+0x6a>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d2c:	e000      	b.n	8008d30 <tcp_write+0x6c>
 8008d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d30:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d109      	bne.n	8008d4c <tcp_write+0x88>
 8008d38:	4b92      	ldr	r3, [pc, #584]	; (8008f84 <tcp_write+0x2c0>)
 8008d3a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8008d3e:	4992      	ldr	r1, [pc, #584]	; (8008f88 <tcp_write+0x2c4>)
 8008d40:	4892      	ldr	r0, [pc, #584]	; (8008f8c <tcp_write+0x2c8>)
 8008d42:	f005 f9ef 	bl	800e124 <iprintf>
 8008d46:	f06f 030f 	mvn.w	r3, #15
 8008d4a:	e30a      	b.n	8009362 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8008d4c:	88fb      	ldrh	r3, [r7, #6]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff ff41 	bl	8008bd8 <tcp_write_checks>
 8008d56:	4603      	mov	r3, r0
 8008d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8008d5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <tcp_write+0xa6>
    return err;
 8008d64:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008d68:	e2fb      	b.n	8009362 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 80f5 	beq.w	8008f68 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d82:	653b      	str	r3, [r7, #80]	; 0x50
 8008d84:	e002      	b.n	8008d8c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8008d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1f8      	bne.n	8008d86 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d96:	7a9b      	ldrb	r3, [r3, #10]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	f003 0304 	and.w	r3, r3, #4
 8008da0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008da2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008da6:	891b      	ldrh	r3, [r3, #8]
 8008da8:	4619      	mov	r1, r3
 8008daa:	8c3b      	ldrh	r3, [r7, #32]
 8008dac:	440b      	add	r3, r1
 8008dae:	429a      	cmp	r2, r3
 8008db0:	da06      	bge.n	8008dc0 <tcp_write+0xfc>
 8008db2:	4b74      	ldr	r3, [pc, #464]	; (8008f84 <tcp_write+0x2c0>)
 8008db4:	f240 12c7 	movw	r2, #455	; 0x1c7
 8008db8:	4975      	ldr	r1, [pc, #468]	; (8008f90 <tcp_write+0x2cc>)
 8008dba:	4874      	ldr	r0, [pc, #464]	; (8008f8c <tcp_write+0x2c8>)
 8008dbc:	f005 f9b2 	bl	800e124 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8008dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc2:	891a      	ldrh	r2, [r3, #8]
 8008dc4:	8c3b      	ldrh	r3, [r7, #32]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008dd6:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8008dd8:	8a7b      	ldrh	r3, [r7, #18]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d027      	beq.n	8008e2e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8008dde:	8a7b      	ldrh	r3, [r7, #18]
 8008de0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d206      	bcs.n	8008df4 <tcp_write+0x130>
 8008de6:	4b67      	ldr	r3, [pc, #412]	; (8008f84 <tcp_write+0x2c0>)
 8008de8:	f240 12d9 	movw	r2, #473	; 0x1d9
 8008dec:	4969      	ldr	r1, [pc, #420]	; (8008f94 <tcp_write+0x2d0>)
 8008dee:	4867      	ldr	r0, [pc, #412]	; (8008f8c <tcp_write+0x2c8>)
 8008df0:	f005 f998 	bl	800e124 <iprintf>
      seg = last_unsent;
 8008df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8008df8:	8a7b      	ldrh	r3, [r7, #18]
 8008dfa:	88fa      	ldrh	r2, [r7, #6]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d901      	bls.n	8008e04 <tcp_write+0x140>
 8008e00:	8a7b      	ldrh	r3, [r7, #18]
 8008e02:	e000      	b.n	8008e06 <tcp_write+0x142>
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	bfa8      	it	ge
 8008e0c:	4613      	movge	r3, r2
 8008e0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8008e10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008e14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e16:	4413      	add	r3, r2
 8008e18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8008e1c:	8a7a      	ldrh	r2, [r7, #18]
 8008e1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8008e26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008e28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8008e2e:	8a7b      	ldrh	r3, [r7, #18]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <tcp_write+0x188>
 8008e34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008e38:	88fb      	ldrh	r3, [r7, #6]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d006      	beq.n	8008e4c <tcp_write+0x188>
 8008e3e:	4b51      	ldr	r3, [pc, #324]	; (8008f84 <tcp_write+0x2c0>)
 8008e40:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008e44:	4954      	ldr	r1, [pc, #336]	; (8008f98 <tcp_write+0x2d4>)
 8008e46:	4851      	ldr	r0, [pc, #324]	; (8008f8c <tcp_write+0x2c8>)
 8008e48:	f005 f96c 	bl	800e124 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8008e4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008e50:	88fb      	ldrh	r3, [r7, #6]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	f080 8168 	bcs.w	8009128 <tcp_write+0x464>
 8008e58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8164 	beq.w	8009128 <tcp_write+0x464>
 8008e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e62:	891b      	ldrh	r3, [r3, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 815f 	beq.w	8009128 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008e6a:	88fa      	ldrh	r2, [r7, #6]
 8008e6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e70:	1ad2      	subs	r2, r2, r3
 8008e72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008e74:	4293      	cmp	r3, r2
 8008e76:	bfa8      	it	ge
 8008e78:	4613      	movge	r3, r2
 8008e7a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8008e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e7e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008e80:	797b      	ldrb	r3, [r7, #5]
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d027      	beq.n	8008eda <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8008e8a:	f107 0012 	add.w	r0, r7, #18
 8008e8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008e90:	8bf9      	ldrh	r1, [r7, #30]
 8008e92:	2301      	movs	r3, #1
 8008e94:	9302      	str	r3, [sp, #8]
 8008e96:	797b      	ldrb	r3, [r7, #5]
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2004      	movs	r0, #4
 8008ea2:	f7ff fe37 	bl	8008b14 <tcp_pbuf_prealloc>
 8008ea6:	6578      	str	r0, [r7, #84]	; 0x54
 8008ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 8227 	beq.w	80092fe <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8008eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eb2:	6858      	ldr	r0, [r3, #4]
 8008eb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	4413      	add	r3, r2
 8008ebc:	8bfa      	ldrh	r2, [r7, #30]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	f005 f91d 	bl	800e0fe <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8008ec4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008ec6:	f7fb fc8f 	bl	80047e8 <pbuf_clen>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	461a      	mov	r2, r3
 8008ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008ed8:	e03f      	b.n	8008f5a <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8008eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee0:	e002      	b.n	8008ee8 <tcp_write+0x224>
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1f8      	bne.n	8008ee2 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	7b1b      	ldrb	r3, [r3, #12]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d115      	bne.n	8008f24 <tcp_write+0x260>
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008efe:	8952      	ldrh	r2, [r2, #10]
 8008f00:	4413      	add	r3, r2
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d10d      	bne.n	8008f24 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8008f08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d006      	beq.n	8008f1e <tcp_write+0x25a>
 8008f10:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <tcp_write+0x2c0>)
 8008f12:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008f16:	4921      	ldr	r1, [pc, #132]	; (8008f9c <tcp_write+0x2d8>)
 8008f18:	481c      	ldr	r0, [pc, #112]	; (8008f8c <tcp_write+0x2c8>)
 8008f1a:	f005 f903 	bl	800e124 <iprintf>
          extendlen = seglen;
 8008f1e:	8bfb      	ldrh	r3, [r7, #30]
 8008f20:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008f22:	e01a      	b.n	8008f5a <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8008f24:	8bfb      	ldrh	r3, [r7, #30]
 8008f26:	2201      	movs	r2, #1
 8008f28:	4619      	mov	r1, r3
 8008f2a:	2004      	movs	r0, #4
 8008f2c:	f7fb f856 	bl	8003fdc <pbuf_alloc>
 8008f30:	6578      	str	r0, [r7, #84]	; 0x54
 8008f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 81e4 	beq.w	8009302 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8008f3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	441a      	add	r2, r3
 8008f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f44:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8008f46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f48:	f7fb fc4e 	bl	80047e8 <pbuf_clen>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008f54:	4413      	add	r3, r2
 8008f56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8008f5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008f5e:	8bfb      	ldrh	r3, [r7, #30]
 8008f60:	4413      	add	r3, r2
 8008f62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008f66:	e0df      	b.n	8009128 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 80da 	beq.w	8009128 <tcp_write+0x464>
 8008f74:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <tcp_write+0x2c0>)
 8008f76:	f240 2225 	movw	r2, #549	; 0x225
 8008f7a:	4909      	ldr	r1, [pc, #36]	; (8008fa0 <tcp_write+0x2dc>)
 8008f7c:	4803      	ldr	r0, [pc, #12]	; (8008f8c <tcp_write+0x2c8>)
 8008f7e:	f005 f8d1 	bl	800e124 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8008f82:	e0d1      	b.n	8009128 <tcp_write+0x464>
 8008f84:	080100cc 	.word	0x080100cc
 8008f88:	080101f4 	.word	0x080101f4
 8008f8c:	08010130 	.word	0x08010130
 8008f90:	08010228 	.word	0x08010228
 8008f94:	08010240 	.word	0x08010240
 8008f98:	08010260 	.word	0x08010260
 8008f9c:	08010280 	.word	0x08010280
 8008fa0:	080102ac 	.word	0x080102ac
    struct pbuf *p;
    u16_t left = len - pos;
 8008fa4:	88fa      	ldrh	r2, [r7, #6]
 8008fa6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8008fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8008fba:	8b7a      	ldrh	r2, [r7, #26]
 8008fbc:	8bbb      	ldrh	r3, [r7, #28]
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	bf28      	it	cs
 8008fc2:	4613      	movcs	r3, r2
 8008fc4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008fc6:	797b      	ldrb	r3, [r7, #5]
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d036      	beq.n	800903e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8008fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	8b3b      	ldrh	r3, [r7, #24]
 8008fd8:	4413      	add	r3, r2
 8008fda:	b299      	uxth	r1, r3
 8008fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bf0c      	ite	eq
 8008fe2:	2301      	moveq	r3, #1
 8008fe4:	2300      	movne	r3, #0
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f107 0012 	add.w	r0, r7, #18
 8008fec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008fee:	9302      	str	r3, [sp, #8]
 8008ff0:	797b      	ldrb	r3, [r7, #5]
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	f7ff fd8a 	bl	8008b14 <tcp_pbuf_prealloc>
 8009000:	6338      	str	r0, [r7, #48]	; 0x30
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 817e 	beq.w	8009306 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	895b      	ldrh	r3, [r3, #10]
 800900e:	8b3a      	ldrh	r2, [r7, #24]
 8009010:	429a      	cmp	r2, r3
 8009012:	d906      	bls.n	8009022 <tcp_write+0x35e>
 8009014:	4b8f      	ldr	r3, [pc, #572]	; (8009254 <tcp_write+0x590>)
 8009016:	f240 2241 	movw	r2, #577	; 0x241
 800901a:	498f      	ldr	r1, [pc, #572]	; (8009258 <tcp_write+0x594>)
 800901c:	488f      	ldr	r0, [pc, #572]	; (800925c <tcp_write+0x598>)
 800901e:	f005 f881 	bl	800e124 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800902a:	18d0      	adds	r0, r2, r3
 800902c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	4413      	add	r3, r2
 8009034:	8b3a      	ldrh	r2, [r7, #24]
 8009036:	4619      	mov	r1, r3
 8009038:	f005 f861 	bl	800e0fe <memcpy>
 800903c:	e02e      	b.n	800909c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800903e:	8a7b      	ldrh	r3, [r7, #18]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d006      	beq.n	8009052 <tcp_write+0x38e>
 8009044:	4b83      	ldr	r3, [pc, #524]	; (8009254 <tcp_write+0x590>)
 8009046:	f240 224b 	movw	r2, #587	; 0x24b
 800904a:	4985      	ldr	r1, [pc, #532]	; (8009260 <tcp_write+0x59c>)
 800904c:	4883      	ldr	r0, [pc, #524]	; (800925c <tcp_write+0x598>)
 800904e:	f005 f869 	bl	800e124 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009052:	8b3b      	ldrh	r3, [r7, #24]
 8009054:	2201      	movs	r2, #1
 8009056:	4619      	mov	r1, r3
 8009058:	2000      	movs	r0, #0
 800905a:	f7fa ffbf 	bl	8003fdc <pbuf_alloc>
 800905e:	6178      	str	r0, [r7, #20]
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 8151 	beq.w	800930a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8009068:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	441a      	add	r2, r3
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009078:	b29b      	uxth	r3, r3
 800907a:	2200      	movs	r2, #0
 800907c:	4619      	mov	r1, r3
 800907e:	2000      	movs	r0, #0
 8009080:	f7fa ffac 	bl	8003fdc <pbuf_alloc>
 8009084:	6338      	str	r0, [r7, #48]	; 0x30
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	2b00      	cmp	r3, #0
 800908a:	d103      	bne.n	8009094 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800908c:	6978      	ldr	r0, [r7, #20]
 800908e:	f7fb fb17 	bl	80046c0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8009092:	e13d      	b.n	8009310 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8009094:	6979      	ldr	r1, [r7, #20]
 8009096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009098:	f7fb fbe0 	bl	800485c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800909c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800909e:	f7fb fba3 	bl	80047e8 <pbuf_clen>
 80090a2:	4603      	mov	r3, r0
 80090a4:	461a      	mov	r2, r3
 80090a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80090aa:	4413      	add	r3, r2
 80090ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80090b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80090b4:	2b09      	cmp	r3, #9
 80090b6:	d805      	bhi.n	80090c4 <tcp_write+0x400>
 80090b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80090bc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d903      	bls.n	80090cc <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80090c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090c6:	f7fb fafb 	bl	80046c0 <pbuf_free>
      goto memerr;
 80090ca:	e121      	b.n	8009310 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80090d4:	441a      	add	r2, r3
 80090d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	4613      	mov	r3, r2
 80090de:	2200      	movs	r2, #0
 80090e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7ff fc8e 	bl	8008a04 <tcp_create_segment>
 80090e8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80090ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 810e 	beq.w	800930e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80090f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d102      	bne.n	80090fe <tcp_write+0x43a>
      queue = seg;
 80090f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090fa:	647b      	str	r3, [r7, #68]	; 0x44
 80090fc:	e00c      	b.n	8009118 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80090fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009100:	2b00      	cmp	r3, #0
 8009102:	d106      	bne.n	8009112 <tcp_write+0x44e>
 8009104:	4b53      	ldr	r3, [pc, #332]	; (8009254 <tcp_write+0x590>)
 8009106:	f240 2285 	movw	r2, #645	; 0x285
 800910a:	4956      	ldr	r1, [pc, #344]	; (8009264 <tcp_write+0x5a0>)
 800910c:	4853      	ldr	r0, [pc, #332]	; (800925c <tcp_write+0x598>)
 800910e:	f005 f809 	bl	800e124 <iprintf>
      prev_seg->next = seg;
 8009112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009116:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8009118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800911c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009120:	8b3b      	ldrh	r3, [r7, #24]
 8009122:	4413      	add	r3, r2
 8009124:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8009128:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800912c:	88fb      	ldrh	r3, [r7, #6]
 800912e:	429a      	cmp	r2, r3
 8009130:	f4ff af38 	bcc.w	8008fa4 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8009134:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009136:	2b00      	cmp	r3, #0
 8009138:	d02c      	beq.n	8009194 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800913a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009140:	e01e      	b.n	8009180 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	891a      	ldrh	r2, [r3, #8]
 8009146:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009148:	4413      	add	r3, r2
 800914a:	b29a      	uxth	r2, r3
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d110      	bne.n	800917a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800915e:	8952      	ldrh	r2, [r2, #10]
 8009160:	4413      	add	r3, r2
 8009162:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	4618      	mov	r0, r3
 8009168:	f004 ffc9 	bl	800e0fe <memcpy>
        p->len += oversize_used;
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	895a      	ldrh	r2, [r3, #10]
 8009170:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009172:	4413      	add	r3, r2
 8009174:	b29a      	uxth	r2, r3
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1dd      	bne.n	8009142 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8009186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009188:	891a      	ldrh	r2, [r3, #8]
 800918a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800918c:	4413      	add	r3, r2
 800918e:	b29a      	uxth	r2, r3
 8009190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009192:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8009194:	8a7a      	ldrh	r2, [r7, #18]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800919c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d018      	beq.n	80091d4 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80091a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d106      	bne.n	80091b6 <tcp_write+0x4f2>
 80091a8:	4b2a      	ldr	r3, [pc, #168]	; (8009254 <tcp_write+0x590>)
 80091aa:	f240 22bb 	movw	r2, #699	; 0x2bb
 80091ae:	492e      	ldr	r1, [pc, #184]	; (8009268 <tcp_write+0x5a4>)
 80091b0:	482a      	ldr	r0, [pc, #168]	; (800925c <tcp_write+0x598>)
 80091b2:	f004 ffb7 	bl	800e124 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80091b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fb fb4d 	bl	800485c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80091c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c4:	891a      	ldrh	r2, [r3, #8]
 80091c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091c8:	891b      	ldrh	r3, [r3, #8]
 80091ca:	4413      	add	r3, r2
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091d0:	811a      	strh	r2, [r3, #8]
 80091d2:	e037      	b.n	8009244 <tcp_write+0x580>
  } else if (extendlen > 0) {
 80091d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d034      	beq.n	8009244 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80091da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <tcp_write+0x524>
 80091e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <tcp_write+0x532>
 80091e8:	4b1a      	ldr	r3, [pc, #104]	; (8009254 <tcp_write+0x590>)
 80091ea:	f240 22c1 	movw	r2, #705	; 0x2c1
 80091ee:	491f      	ldr	r1, [pc, #124]	; (800926c <tcp_write+0x5a8>)
 80091f0:	481a      	ldr	r0, [pc, #104]	; (800925c <tcp_write+0x598>)
 80091f2:	f004 ff97 	bl	800e124 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80091f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80091fc:	e009      	b.n	8009212 <tcp_write+0x54e>
      p->tot_len += extendlen;
 80091fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009200:	891a      	ldrh	r2, [r3, #8]
 8009202:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009204:	4413      	add	r3, r2
 8009206:	b29a      	uxth	r2, r3
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	62bb      	str	r3, [r7, #40]	; 0x28
 8009212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1f1      	bne.n	80091fe <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	891a      	ldrh	r2, [r3, #8]
 800921e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009220:	4413      	add	r3, r2
 8009222:	b29a      	uxth	r2, r3
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	895a      	ldrh	r2, [r3, #10]
 800922c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800922e:	4413      	add	r3, r2
 8009230:	b29a      	uxth	r2, r3
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8009236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009238:	891a      	ldrh	r2, [r3, #8]
 800923a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800923c:	4413      	add	r3, r2
 800923e:	b29a      	uxth	r2, r3
 8009240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009242:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8009244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009246:	2b00      	cmp	r3, #0
 8009248:	d112      	bne.n	8009270 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800924e:	669a      	str	r2, [r3, #104]	; 0x68
 8009250:	e011      	b.n	8009276 <tcp_write+0x5b2>
 8009252:	bf00      	nop
 8009254:	080100cc 	.word	0x080100cc
 8009258:	080102dc 	.word	0x080102dc
 800925c:	08010130 	.word	0x08010130
 8009260:	0801031c 	.word	0x0801031c
 8009264:	0801032c 	.word	0x0801032c
 8009268:	08010340 	.word	0x08010340
 800926c:	08010378 	.word	0x08010378
  } else {
    last_unsent->next = queue;
 8009270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009274:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800927a:	88fb      	ldrh	r3, [r7, #6]
 800927c:	441a      	add	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009288:	88fb      	ldrh	r3, [r7, #6]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	b29a      	uxth	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800929a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00e      	beq.n	80092c6 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <tcp_write+0x602>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d106      	bne.n	80092c6 <tcp_write+0x602>
 80092b8:	4b2c      	ldr	r3, [pc, #176]	; (800936c <tcp_write+0x6a8>)
 80092ba:	f240 22ed 	movw	r2, #749	; 0x2ed
 80092be:	492c      	ldr	r1, [pc, #176]	; (8009370 <tcp_write+0x6ac>)
 80092c0:	482c      	ldr	r0, [pc, #176]	; (8009374 <tcp_write+0x6b0>)
 80092c2:	f004 ff2f 	bl	800e124 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80092c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d016      	beq.n	80092fa <tcp_write+0x636>
 80092cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d012      	beq.n	80092fa <tcp_write+0x636>
 80092d4:	797b      	ldrb	r3, [r7, #5]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10d      	bne.n	80092fa <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80092de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	899b      	ldrh	r3, [r3, #12]
 80092e4:	b29c      	uxth	r4, r3
 80092e6:	2008      	movs	r0, #8
 80092e8:	f7fa f8c5 	bl	8003476 <lwip_htons>
 80092ec:	4603      	mov	r3, r0
 80092ee:	461a      	mov	r2, r3
 80092f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	4322      	orrs	r2, r4
 80092f6:	b292      	uxth	r2, r2
 80092f8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	e031      	b.n	8009362 <tcp_write+0x69e>
          goto memerr;
 80092fe:	bf00      	nop
 8009300:	e006      	b.n	8009310 <tcp_write+0x64c>
            goto memerr;
 8009302:	bf00      	nop
 8009304:	e004      	b.n	8009310 <tcp_write+0x64c>
        goto memerr;
 8009306:	bf00      	nop
 8009308:	e002      	b.n	8009310 <tcp_write+0x64c>
        goto memerr;
 800930a:	bf00      	nop
 800930c:	e000      	b.n	8009310 <tcp_write+0x64c>
      goto memerr;
 800930e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	7e9b      	ldrb	r3, [r3, #26]
 8009314:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009318:	b2da      	uxtb	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800931e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <tcp_write+0x666>
    pbuf_free(concat_p);
 8009324:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009326:	f7fb f9cb 	bl	80046c0 <pbuf_free>
  }
  if (queue != NULL) {
 800932a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <tcp_write+0x672>
    tcp_segs_free(queue);
 8009330:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009332:	f7fc fd64 	bl	8005dfe <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00e      	beq.n	800935e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <tcp_write+0x69a>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800934c:	2b00      	cmp	r3, #0
 800934e:	d106      	bne.n	800935e <tcp_write+0x69a>
 8009350:	4b06      	ldr	r3, [pc, #24]	; (800936c <tcp_write+0x6a8>)
 8009352:	f240 3202 	movw	r2, #770	; 0x302
 8009356:	4906      	ldr	r1, [pc, #24]	; (8009370 <tcp_write+0x6ac>)
 8009358:	4806      	ldr	r0, [pc, #24]	; (8009374 <tcp_write+0x6b0>)
 800935a:	f004 fee3 	bl	800e124 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800935e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009362:	4618      	mov	r0, r3
 8009364:	375c      	adds	r7, #92	; 0x5c
 8009366:	46bd      	mov	sp, r7
 8009368:	bd90      	pop	{r4, r7, pc}
 800936a:	bf00      	nop
 800936c:	080100cc 	.word	0x080100cc
 8009370:	080103b0 	.word	0x080103b0
 8009374:	08010130 	.word	0x08010130

08009378 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08a      	sub	sp, #40	; 0x28
 800937c:	af02      	add	r7, sp, #8
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009388:	2300      	movs	r3, #0
 800938a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800938c:	78fb      	ldrb	r3, [r7, #3]
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d106      	bne.n	80093a4 <tcp_enqueue_flags+0x2c>
 8009396:	4b6f      	ldr	r3, [pc, #444]	; (8009554 <tcp_enqueue_flags+0x1dc>)
 8009398:	f240 321b 	movw	r2, #795	; 0x31b
 800939c:	496e      	ldr	r1, [pc, #440]	; (8009558 <tcp_enqueue_flags+0x1e0>)
 800939e:	486f      	ldr	r0, [pc, #444]	; (800955c <tcp_enqueue_flags+0x1e4>)
 80093a0:	f004 fec0 	bl	800e124 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093aa:	2b08      	cmp	r3, #8
 80093ac:	d806      	bhi.n	80093bc <tcp_enqueue_flags+0x44>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093b4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d90e      	bls.n	80093da <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80093bc:	78fb      	ldrb	r3, [r7, #3]
 80093be:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7e9b      	ldrb	r3, [r3, #26]
 80093ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80093d4:	f04f 33ff 	mov.w	r3, #4294967295
 80093d8:	e0b7      	b.n	800954a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80093e4:	2301      	movs	r3, #1
 80093e6:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80093e8:	7ffb      	ldrb	r3, [r7, #31]
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	2200      	movs	r2, #0
 80093fa:	4619      	mov	r1, r3
 80093fc:	2000      	movs	r0, #0
 80093fe:	f7fa fded 	bl	8003fdc <pbuf_alloc>
 8009402:	6138      	str	r0, [r7, #16]
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d109      	bne.n	800941e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	7e9b      	ldrb	r3, [r3, #26]
 800940e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009412:	b2da      	uxtb	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009418:	f04f 33ff 	mov.w	r3, #4294967295
 800941c:	e095      	b.n	800954a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	895a      	ldrh	r2, [r3, #10]
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	b29b      	uxth	r3, r3
 8009426:	429a      	cmp	r2, r3
 8009428:	d206      	bcs.n	8009438 <tcp_enqueue_flags+0xc0>
 800942a:	4b4a      	ldr	r3, [pc, #296]	; (8009554 <tcp_enqueue_flags+0x1dc>)
 800942c:	f240 3241 	movw	r2, #833	; 0x341
 8009430:	494b      	ldr	r1, [pc, #300]	; (8009560 <tcp_enqueue_flags+0x1e8>)
 8009432:	484a      	ldr	r0, [pc, #296]	; (800955c <tcp_enqueue_flags+0x1e4>)
 8009434:	f004 fe76 	bl	800e124 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800943c:	78fa      	ldrb	r2, [r7, #3]
 800943e:	7ffb      	ldrb	r3, [r7, #31]
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	460b      	mov	r3, r1
 8009444:	6939      	ldr	r1, [r7, #16]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7ff fadc 	bl	8008a04 <tcp_create_segment>
 800944c:	60f8      	str	r0, [r7, #12]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d109      	bne.n	8009468 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	7e9b      	ldrb	r3, [r3, #26]
 8009458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800945c:	b2da      	uxtb	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009462:	f04f 33ff 	mov.w	r3, #4294967295
 8009466:	e070      	b.n	800954a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	f003 0303 	and.w	r3, r3, #3
 8009470:	2b00      	cmp	r3, #0
 8009472:	d006      	beq.n	8009482 <tcp_enqueue_flags+0x10a>
 8009474:	4b37      	ldr	r3, [pc, #220]	; (8009554 <tcp_enqueue_flags+0x1dc>)
 8009476:	f240 3249 	movw	r2, #841	; 0x349
 800947a:	493a      	ldr	r1, [pc, #232]	; (8009564 <tcp_enqueue_flags+0x1ec>)
 800947c:	4837      	ldr	r0, [pc, #220]	; (800955c <tcp_enqueue_flags+0x1e4>)
 800947e:	f004 fe51 	bl	800e124 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	891b      	ldrh	r3, [r3, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d006      	beq.n	8009498 <tcp_enqueue_flags+0x120>
 800948a:	4b32      	ldr	r3, [pc, #200]	; (8009554 <tcp_enqueue_flags+0x1dc>)
 800948c:	f240 324a 	movw	r2, #842	; 0x34a
 8009490:	4935      	ldr	r1, [pc, #212]	; (8009568 <tcp_enqueue_flags+0x1f0>)
 8009492:	4832      	ldr	r0, [pc, #200]	; (800955c <tcp_enqueue_flags+0x1e4>)
 8009494:	f004 fe46 	bl	800e124 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800949c:	2b00      	cmp	r3, #0
 800949e:	d103      	bne.n	80094a8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	669a      	str	r2, [r3, #104]	; 0x68
 80094a6:	e00d      	b.n	80094c4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094ac:	61bb      	str	r3, [r7, #24]
 80094ae:	e002      	b.n	80094b6 <tcp_enqueue_flags+0x13e>
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	61bb      	str	r3, [r7, #24]
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f8      	bne.n	80094b0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <tcp_enqueue_flags+0x168>
 80094d6:	78fb      	ldrb	r3, [r7, #3]
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d004      	beq.n	80094ea <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80094ea:	78fb      	ldrb	r3, [r7, #3]
 80094ec:	f003 0301 	and.w	r3, r3, #1
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d006      	beq.n	8009502 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	7e9b      	ldrb	r3, [r3, #26]
 80094f8:	f043 0320 	orr.w	r3, r3, #32
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	4618      	mov	r0, r3
 8009508:	f7fb f96e 	bl	80047e8 <pbuf_clen>
 800950c:	4603      	mov	r3, r0
 800950e:	461a      	mov	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009516:	4413      	add	r3, r2
 8009518:	b29a      	uxth	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00e      	beq.n	8009548 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10a      	bne.n	8009548 <tcp_enqueue_flags+0x1d0>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <tcp_enqueue_flags+0x1d0>
 800953a:	4b06      	ldr	r3, [pc, #24]	; (8009554 <tcp_enqueue_flags+0x1dc>)
 800953c:	f240 326d 	movw	r2, #877	; 0x36d
 8009540:	490a      	ldr	r1, [pc, #40]	; (800956c <tcp_enqueue_flags+0x1f4>)
 8009542:	4806      	ldr	r0, [pc, #24]	; (800955c <tcp_enqueue_flags+0x1e4>)
 8009544:	f004 fdee 	bl	800e124 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3720      	adds	r7, #32
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	080100cc 	.word	0x080100cc
 8009558:	080103d0 	.word	0x080103d0
 800955c:	08010130 	.word	0x08010130
 8009560:	08010428 	.word	0x08010428
 8009564:	08010464 	.word	0x08010464
 8009568:	0801047c 	.word	0x0801047c
 800956c:	080104a8 	.word	0x080104a8

08009570 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009570:	b590      	push	{r4, r7, lr}
 8009572:	b08b      	sub	sp, #44	; 0x2c
 8009574:	af04      	add	r7, sp, #16
 8009576:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800957c:	7dbb      	ldrb	r3, [r7, #22]
 800957e:	b29c      	uxth	r4, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009584:	4618      	mov	r0, r3
 8009586:	f7f9 ff84 	bl	8003492 <lwip_htonl>
 800958a:	4603      	mov	r3, r0
 800958c:	2200      	movs	r2, #0
 800958e:	4621      	mov	r1, r4
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff f97b 	bl	800888c <tcp_output_alloc_header>
 8009596:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	7e9b      	ldrb	r3, [r3, #26]
 80095a2:	f043 0303 	orr.w	r3, r3, #3
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80095ac:	f06f 0301 	mvn.w	r3, #1
 80095b0:	e036      	b.n	8009620 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3304      	adds	r3, #4
 80095b6:	4618      	mov	r0, r3
 80095b8:	f002 fad8 	bl	800bb6c <ip4_route>
 80095bc:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d102      	bne.n	80095ca <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80095c4:	23fc      	movs	r3, #252	; 0xfc
 80095c6:	75fb      	strb	r3, [r7, #23]
 80095c8:	e012      	b.n	80095f0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80095ca:	6879      	ldr	r1, [r7, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	1d18      	adds	r0, r3, #4
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	7a9c      	ldrb	r4, [r3, #10]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	7a5b      	ldrb	r3, [r3, #9]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	9202      	str	r2, [sp, #8]
 80095dc:	2206      	movs	r2, #6
 80095de:	9201      	str	r2, [sp, #4]
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	4623      	mov	r3, r4
 80095e4:	4602      	mov	r2, r0
 80095e6:	6938      	ldr	r0, [r7, #16]
 80095e8:	f002 fc68 	bl	800bebc <ip4_output_if>
 80095ec:	4603      	mov	r3, r0
 80095ee:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80095f0:	6938      	ldr	r0, [r7, #16]
 80095f2:	f7fb f865 	bl	80046c0 <pbuf_free>

  if (err != ERR_OK) {
 80095f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	7e9b      	ldrb	r3, [r3, #26]
 8009602:	f043 0303 	orr.w	r3, r3, #3
 8009606:	b2da      	uxtb	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	769a      	strb	r2, [r3, #26]
 800960c:	e006      	b.n	800961c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	7e9b      	ldrb	r3, [r3, #26]
 8009612:	f023 0303 	bic.w	r3, r3, #3
 8009616:	b2da      	uxtb	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800961c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009620:	4618      	mov	r0, r3
 8009622:	371c      	adds	r7, #28
 8009624:	46bd      	mov	sp, r7
 8009626:	bd90      	pop	{r4, r7, pc}

08009628 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009628:	b5b0      	push	{r4, r5, r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	7d1b      	ldrb	r3, [r3, #20]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d106      	bne.n	8009646 <tcp_output+0x1e>
 8009638:	4b9b      	ldr	r3, [pc, #620]	; (80098a8 <tcp_output+0x280>)
 800963a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800963e:	499b      	ldr	r1, [pc, #620]	; (80098ac <tcp_output+0x284>)
 8009640:	489b      	ldr	r0, [pc, #620]	; (80098b0 <tcp_output+0x288>)
 8009642:	f004 fd6f 	bl	800e124 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009646:	4b9b      	ldr	r3, [pc, #620]	; (80098b4 <tcp_output+0x28c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	429a      	cmp	r2, r3
 800964e:	d101      	bne.n	8009654 <tcp_output+0x2c>
    return ERR_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	e1cf      	b.n	80099f4 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009660:	429a      	cmp	r2, r3
 8009662:	d203      	bcs.n	800966c <tcp_output+0x44>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800966a:	e002      	b.n	8009672 <tcp_output+0x4a>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009672:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009678:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	7e9b      	ldrb	r3, [r3, #26]
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b00      	cmp	r3, #0
 8009684:	d017      	beq.n	80096b6 <tcp_output+0x8e>
 8009686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00f      	beq.n	80096ac <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	4618      	mov	r0, r3
 8009694:	f7f9 fefd 	bl	8003492 <lwip_htonl>
 8009698:	4602      	mov	r2, r0
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a2:	8912      	ldrh	r2, [r2, #8]
 80096a4:	4413      	add	r3, r2
     (seg == NULL ||
 80096a6:	69ba      	ldr	r2, [r7, #24]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d204      	bcs.n	80096b6 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff ff5f 	bl	8009570 <tcp_send_empty_ack>
 80096b2:	4603      	mov	r3, r0
 80096b4:	e19e      	b.n	80099f4 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ba:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d007      	beq.n	80096d2 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80096c2:	e002      	b.n	80096ca <tcp_output+0xa2>
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	623b      	str	r3, [r7, #32]
 80096ca:	6a3b      	ldr	r3, [r7, #32]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1f8      	bne.n	80096c4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4618      	mov	r0, r3
 80096d8:	f002 fa48 	bl	800bb6c <ip4_route>
 80096dc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d102      	bne.n	80096ea <tcp_output+0xc2>
    return ERR_RTE;
 80096e4:	f06f 0303 	mvn.w	r3, #3
 80096e8:	e184      	b.n	80099f4 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d003      	beq.n	80096f8 <tcp_output+0xd0>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d111      	bne.n	800971c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <tcp_output+0xdc>
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	3304      	adds	r3, #4
 8009702:	e000      	b.n	8009706 <tcp_output+0xde>
 8009704:	2300      	movs	r3, #0
 8009706:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d102      	bne.n	8009714 <tcp_output+0xec>
      return ERR_RTE;
 800970e:	f06f 0303 	mvn.w	r3, #3
 8009712:	e16f      	b.n	80099f4 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 813e 	beq.w	80099a0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	4618      	mov	r0, r3
 800972c:	f7f9 feb1 	bl	8003492 <lwip_htonl>
 8009730:	4602      	mov	r2, r0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800973a:	8912      	ldrh	r2, [r2, #8]
 800973c:	4413      	add	r3, r2
  if (seg != NULL &&
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	429a      	cmp	r2, r3
 8009742:	f080 812d 	bcs.w	80099a0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 8129 	beq.w	80099a0 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009754:	461a      	mov	r2, r3
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	4293      	cmp	r3, r2
 800975a:	f040 8121 	bne.w	80099a0 <tcp_output+0x378>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009762:	2b00      	cmp	r3, #0
 8009764:	f040 811c 	bne.w	80099a0 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800976e:	2b00      	cmp	r3, #0
 8009770:	f040 812b 	bne.w	80099ca <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8009784:	e121      	b.n	80099ca <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	899b      	ldrh	r3, [r3, #12]
 800978c:	b29b      	uxth	r3, r3
 800978e:	4618      	mov	r0, r3
 8009790:	f7f9 fe71 	bl	8003476 <lwip_htons>
 8009794:	4603      	mov	r3, r0
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	2b00      	cmp	r3, #0
 800979c:	d006      	beq.n	80097ac <tcp_output+0x184>
 800979e:	4b42      	ldr	r3, [pc, #264]	; (80098a8 <tcp_output+0x280>)
 80097a0:	f240 4246 	movw	r2, #1094	; 0x446
 80097a4:	4944      	ldr	r1, [pc, #272]	; (80098b8 <tcp_output+0x290>)
 80097a6:	4842      	ldr	r0, [pc, #264]	; (80098b0 <tcp_output+0x288>)
 80097a8:	f004 fcbc 	bl	800e124 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d01f      	beq.n	80097f4 <tcp_output+0x1cc>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7e9b      	ldrb	r3, [r3, #26]
 80097b8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d119      	bne.n	80097f4 <tcp_output+0x1cc>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00b      	beq.n	80097e0 <tcp_output+0x1b8>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d110      	bne.n	80097f4 <tcp_output+0x1cc>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097d6:	891a      	ldrh	r2, [r3, #8]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097dc:	429a      	cmp	r2, r3
 80097de:	d209      	bcs.n	80097f4 <tcp_output+0x1cc>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <tcp_output+0x1cc>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097f0:	2b08      	cmp	r3, #8
 80097f2:	d901      	bls.n	80097f8 <tcp_output+0x1d0>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e000      	b.n	80097fa <tcp_output+0x1d2>
 80097f8:	2300      	movs	r3, #0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d106      	bne.n	800980c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7e9b      	ldrb	r3, [r3, #26]
 8009802:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 80e1 	beq.w	80099ce <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	7d1b      	ldrb	r3, [r3, #20]
 8009810:	2b02      	cmp	r3, #2
 8009812:	d00d      	beq.n	8009830 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	899b      	ldrh	r3, [r3, #12]
 800981a:	b29c      	uxth	r4, r3
 800981c:	2010      	movs	r0, #16
 800981e:	f7f9 fe2a 	bl	8003476 <lwip_htons>
 8009822:	4603      	mov	r3, r0
 8009824:	461a      	mov	r2, r3
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	4322      	orrs	r2, r4
 800982c:	b292      	uxth	r2, r2
 800982e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009836:	f000 f8e1 	bl	80099fc <tcp_output_segment>
 800983a:	4603      	mov	r3, r0
 800983c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800983e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d009      	beq.n	800985a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	7e9b      	ldrb	r3, [r3, #26]
 800984a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800984e:	b2da      	uxtb	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	769a      	strb	r2, [r3, #26]
      return err;
 8009854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009858:	e0cc      	b.n	80099f4 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	7d1b      	ldrb	r3, [r3, #20]
 8009866:	2b02      	cmp	r3, #2
 8009868:	d006      	beq.n	8009878 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	7e9b      	ldrb	r3, [r3, #26]
 800986e:	f023 0303 	bic.w	r3, r3, #3
 8009872:	b2da      	uxtb	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	4618      	mov	r0, r3
 8009880:	f7f9 fe07 	bl	8003492 <lwip_htonl>
 8009884:	4604      	mov	r4, r0
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	891b      	ldrh	r3, [r3, #8]
 800988a:	461d      	mov	r5, r3
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	899b      	ldrh	r3, [r3, #12]
 8009892:	b29b      	uxth	r3, r3
 8009894:	4618      	mov	r0, r3
 8009896:	f7f9 fdee 	bl	8003476 <lwip_htons>
 800989a:	4603      	mov	r3, r0
 800989c:	f003 0303 	and.w	r3, r3, #3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00b      	beq.n	80098bc <tcp_output+0x294>
 80098a4:	2301      	movs	r3, #1
 80098a6:	e00a      	b.n	80098be <tcp_output+0x296>
 80098a8:	080100cc 	.word	0x080100cc
 80098ac:	080104d0 	.word	0x080104d0
 80098b0:	08010130 	.word	0x08010130
 80098b4:	2000375c 	.word	0x2000375c
 80098b8:	080104f8 	.word	0x080104f8
 80098bc:	2300      	movs	r3, #0
 80098be:	442b      	add	r3, r5
 80098c0:	4423      	add	r3, r4
 80098c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	da02      	bge.n	80098d6 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	891b      	ldrh	r3, [r3, #8]
 80098da:	461c      	mov	r4, r3
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	899b      	ldrh	r3, [r3, #12]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7f9 fdc6 	bl	8003476 <lwip_htons>
 80098ea:	4603      	mov	r3, r0
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <tcp_output+0x2d0>
 80098f4:	2301      	movs	r3, #1
 80098f6:	e000      	b.n	80098fa <tcp_output+0x2d2>
 80098f8:	2300      	movs	r3, #0
 80098fa:	4423      	add	r3, r4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d049      	beq.n	8009994 <tcp_output+0x36c>
      seg->next = NULL;
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d105      	bne.n	800991a <tcp_output+0x2f2>
        pcb->unacked = seg;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009912:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	623b      	str	r3, [r7, #32]
 8009918:	e03f      	b.n	800999a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	4618      	mov	r0, r3
 8009922:	f7f9 fdb6 	bl	8003492 <lwip_htonl>
 8009926:	4604      	mov	r4, r0
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	4618      	mov	r0, r3
 8009930:	f7f9 fdaf 	bl	8003492 <lwip_htonl>
 8009934:	4603      	mov	r3, r0
 8009936:	1ae3      	subs	r3, r4, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	da24      	bge.n	8009986 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	336c      	adds	r3, #108	; 0x6c
 8009940:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009942:	e002      	b.n	800994a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d011      	beq.n	8009976 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	4618      	mov	r0, r3
 800995c:	f7f9 fd99 	bl	8003492 <lwip_htonl>
 8009960:	4604      	mov	r4, r0
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	4618      	mov	r0, r3
 800996a:	f7f9 fd92 	bl	8003492 <lwip_htonl>
 800996e:	4603      	mov	r3, r0
 8009970:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009972:	2b00      	cmp	r3, #0
 8009974:	dbe6      	blt.n	8009944 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	e009      	b.n	800999a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	623b      	str	r3, [r7, #32]
 8009992:	e002      	b.n	800999a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009996:	f7fc fa46 	bl	8005e26 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d015      	beq.n	80099d2 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7f9 fd70 	bl	8003492 <lwip_htonl>
 80099b2:	4602      	mov	r2, r0
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099bc:	8912      	ldrh	r2, [r2, #8]
 80099be:	4413      	add	r3, r2
  while (seg != NULL &&
 80099c0:	69ba      	ldr	r2, [r7, #24]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	f4bf aedf 	bcs.w	8009786 <tcp_output+0x15e>
  }
output_done:
 80099c8:	e003      	b.n	80099d2 <tcp_output+0x3aa>
    goto output_done;
 80099ca:	bf00      	nop
 80099cc:	e002      	b.n	80099d4 <tcp_output+0x3ac>
      break;
 80099ce:	bf00      	nop
 80099d0:	e000      	b.n	80099d4 <tcp_output+0x3ac>
output_done:
 80099d2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d103      	bne.n	80099e4 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	7e9b      	ldrb	r3, [r3, #26]
 80099e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3728      	adds	r7, #40	; 0x28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bdb0      	pop	{r4, r5, r7, pc}

080099fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80099fc:	b5b0      	push	{r4, r5, r7, lr}
 80099fe:	b08c      	sub	sp, #48	; 0x30
 8009a00:	af04      	add	r7, sp, #16
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	89db      	ldrh	r3, [r3, #14]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d001      	beq.n	8009a16 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e08b      	b.n	8009b2e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	68dc      	ldr	r4, [r3, #12]
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f7f9 fd37 	bl	8003492 <lwip_htonl>
 8009a24:	4603      	mov	r3, r0
 8009a26:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	68dc      	ldr	r4, [r3, #12]
 8009a30:	4610      	mov	r0, r2
 8009a32:	f7f9 fd20 	bl	8003476 <lwip_htons>
 8009a36:	4603      	mov	r3, r0
 8009a38:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009a42:	441a      	add	r2, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	3314      	adds	r3, #20
 8009a4e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	7a9b      	ldrb	r3, [r3, #10]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d014      	beq.n	8009a86 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4619      	mov	r1, r3
 8009a62:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009a66:	f7fc fc73 	bl	8006350 <tcp_eff_send_mss_impl>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009a6e:	8b7b      	ldrh	r3, [r7, #26]
 8009a70:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7f9 fd0c 	bl	8003492 <lwip_htonl>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	3304      	adds	r3, #4
 8009a84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	da02      	bge.n	8009a96 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2200      	movs	r2, #0
 8009a94:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10c      	bne.n	8009ab8 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8009a9e:	4b26      	ldr	r3, [pc, #152]	; (8009b38 <tcp_output_segment+0x13c>)
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7f9 fcf0 	bl	8003492 <lwip_htonl>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	461a      	mov	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	8959      	ldrh	r1, [r3, #10]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	8b3a      	ldrh	r2, [r7, #24]
 8009ad4:	1a8a      	subs	r2, r1, r2
 8009ad6:	b292      	uxth	r2, r2
 8009ad8:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	8919      	ldrh	r1, [r3, #8]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	8b3a      	ldrh	r2, [r7, #24]
 8009ae6:	1a8a      	subs	r2, r1, r2
 8009ae8:	b292      	uxth	r2, r2
 8009aea:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	68d2      	ldr	r2, [r2, #12]
 8009af4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	741a      	strb	r2, [r3, #16]
 8009afe:	2200      	movs	r2, #0
 8009b00:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6858      	ldr	r0, [r3, #4]
 8009b06:	68b9      	ldr	r1, [r7, #8]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	1d1c      	adds	r4, r3, #4
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	7a9d      	ldrb	r5, [r3, #10]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	7a5b      	ldrb	r3, [r3, #9]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	9202      	str	r2, [sp, #8]
 8009b18:	2206      	movs	r2, #6
 8009b1a:	9201      	str	r2, [sp, #4]
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	462b      	mov	r3, r5
 8009b20:	4622      	mov	r2, r4
 8009b22:	f002 f9cb 	bl	800bebc <ip4_output_if>
 8009b26:	4603      	mov	r3, r0
 8009b28:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8009b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3720      	adds	r7, #32
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bdb0      	pop	{r4, r5, r7, pc}
 8009b36:	bf00      	nop
 8009b38:	2000374c 	.word	0x2000374c

08009b3c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b08c      	sub	sp, #48	; 0x30
 8009b40:	af04      	add	r7, sp, #16
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2114      	movs	r1, #20
 8009b4e:	2001      	movs	r0, #1
 8009b50:	f7fa fa44 	bl	8003fdc <pbuf_alloc>
 8009b54:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d05b      	beq.n	8009c14 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	895b      	ldrh	r3, [r3, #10]
 8009b60:	2b13      	cmp	r3, #19
 8009b62:	d806      	bhi.n	8009b72 <tcp_rst+0x36>
 8009b64:	4b2d      	ldr	r3, [pc, #180]	; (8009c1c <tcp_rst+0xe0>)
 8009b66:	f240 524d 	movw	r2, #1357	; 0x54d
 8009b6a:	492d      	ldr	r1, [pc, #180]	; (8009c20 <tcp_rst+0xe4>)
 8009b6c:	482d      	ldr	r0, [pc, #180]	; (8009c24 <tcp_rst+0xe8>)
 8009b6e:	f004 fad9 	bl	800e124 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8009b78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7f9 fc7b 	bl	8003476 <lwip_htons>
 8009b80:	4603      	mov	r3, r0
 8009b82:	461a      	mov	r2, r3
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009b88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f9 fc73 	bl	8003476 <lwip_htons>
 8009b90:	4603      	mov	r3, r0
 8009b92:	461a      	mov	r2, r3
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7f9 fc7a 	bl	8003492 <lwip_htonl>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009ba4:	68b8      	ldr	r0, [r7, #8]
 8009ba6:	f7f9 fc74 	bl	8003492 <lwip_htonl>
 8009baa:	4602      	mov	r2, r0
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009bb0:	f245 0014 	movw	r0, #20500	; 0x5014
 8009bb4:	f7f9 fc5f 	bl	8003476 <lwip_htons>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	461a      	mov	r2, r3
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f042 0208 	orr.w	r2, r2, #8
 8009bc8:	739a      	strb	r2, [r3, #14]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009bd0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	741a      	strb	r2, [r3, #16]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	2200      	movs	r2, #0
 8009be0:	749a      	strb	r2, [r3, #18]
 8009be2:	2200      	movs	r2, #0
 8009be4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8009be6:	6838      	ldr	r0, [r7, #0]
 8009be8:	f001 ffc0 	bl	800bb6c <ip4_route>
 8009bec:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00b      	beq.n	8009c0c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	9302      	str	r3, [sp, #8]
 8009bf8:	2306      	movs	r3, #6
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	23ff      	movs	r3, #255	; 0xff
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	69f8      	ldr	r0, [r7, #28]
 8009c08:	f002 f958 	bl	800bebc <ip4_output_if>
  }
  pbuf_free(p);
 8009c0c:	69f8      	ldr	r0, [r7, #28]
 8009c0e:	f7fa fd57 	bl	80046c0 <pbuf_free>
 8009c12:	e000      	b.n	8009c16 <tcp_rst+0xda>
    return;
 8009c14:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009c16:	3720      	adds	r7, #32
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	080100cc 	.word	0x080100cc
 8009c20:	08010100 	.word	0x08010100
 8009c24:	08010130 	.word	0x08010130

08009c28 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d029      	beq.n	8009c8c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c3c:	60fb      	str	r3, [r7, #12]
 8009c3e:	e002      	b.n	8009c46 <tcp_rexmit_rto+0x1e>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1f8      	bne.n	8009c40 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c6a:	2bff      	cmp	r3, #255	; 0xff
 8009c6c:	d007      	beq.n	8009c7e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c74:	3301      	adds	r3, #1
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff fccf 	bl	8009628 <tcp_output>
 8009c8a:	e000      	b.n	8009c8e <tcp_rexmit_rto+0x66>
    return;
 8009c8c:	bf00      	nop
}
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009c94:	b590      	push	{r4, r7, lr}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d043      	beq.n	8009d2c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ca8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3368      	adds	r3, #104	; 0x68
 8009cb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009cb8:	e002      	b.n	8009cc0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d011      	beq.n	8009cec <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7f9 fbde 	bl	8003492 <lwip_htonl>
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7f9 fbd7 	bl	8003492 <lwip_htonl>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dbe6      	blt.n	8009cba <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d103      	bne.n	8009d0a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d10:	2bff      	cmp	r3, #255	; 0xff
 8009d12:	d007      	beq.n	8009d24 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	635a      	str	r2, [r3, #52]	; 0x34
 8009d2a:	e000      	b.n	8009d2e <tcp_rexmit+0x9a>
    return;
 8009d2c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd90      	pop	{r4, r7, pc}

08009d34 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d04c      	beq.n	8009dde <tcp_rexmit_fast+0xaa>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	7e9b      	ldrb	r3, [r3, #26]
 8009d48:	f003 0304 	and.w	r3, r3, #4
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d146      	bne.n	8009dde <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff ff9f 	bl	8009c94 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d208      	bcs.n	8009d78 <tcp_rexmit_fast+0x44>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	da00      	bge.n	8009d72 <tcp_rexmit_fast+0x3e>
 8009d70:	3301      	adds	r3, #1
 8009d72:	105b      	asrs	r3, r3, #1
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	e007      	b.n	8009d88 <tcp_rexmit_fast+0x54>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	da00      	bge.n	8009d84 <tcp_rexmit_fast+0x50>
 8009d82:	3301      	adds	r3, #1
 8009d84:	105b      	asrs	r3, r3, #1
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009d94:	461a      	mov	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d206      	bcs.n	8009dae <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009db8:	4619      	mov	r1, r3
 8009dba:	0049      	lsls	r1, r1, #1
 8009dbc:	440b      	add	r3, r1
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	4413      	add	r3, r2
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	7e9b      	ldrb	r3, [r3, #26]
 8009dce:	f043 0304 	orr.w	r3, r3, #4
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b08a      	sub	sp, #40	; 0x28
 8009dea:	af04      	add	r7, sp, #16
 8009dec:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009df2:	3b01      	subs	r3, #1
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7f9 fb4c 	bl	8003492 <lwip_htonl>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2100      	movs	r1, #0
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7fe fd43 	bl	800888c <tcp_output_alloc_header>
 8009e06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d102      	bne.n	8009e14 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8009e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e12:	e021      	b.n	8009e58 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3304      	adds	r3, #4
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 fea7 	bl	800bb6c <ip4_route>
 8009e1e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d102      	bne.n	8009e2c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8009e26:	23fc      	movs	r3, #252	; 0xfc
 8009e28:	75fb      	strb	r3, [r7, #23]
 8009e2a:	e010      	b.n	8009e4e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	1d1a      	adds	r2, r3, #4
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	7a98      	ldrb	r0, [r3, #10]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	9302      	str	r3, [sp, #8]
 8009e3a:	2306      	movs	r3, #6
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	4603      	mov	r3, r0
 8009e44:	6938      	ldr	r0, [r7, #16]
 8009e46:	f002 f839 	bl	800bebc <ip4_output_if>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009e4e:	6938      	ldr	r0, [r7, #16]
 8009e50:	f7fa fc36 	bl	80046c0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009e60:	b590      	push	{r4, r7, lr}
 8009e62:	b08f      	sub	sp, #60	; 0x3c
 8009e64:	af04      	add	r7, sp, #16
 8009e66:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e6c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d102      	bne.n	8009e7a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e78:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	e085      	b.n	8009f90 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	899b      	ldrh	r3, [r3, #12]
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7f9 faf2 	bl	8003476 <lwip_htons>
 8009e92:	4603      	mov	r3, r0
 8009e94:	f003 0301 	and.w	r3, r3, #1
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d005      	beq.n	8009ea8 <tcp_zero_window_probe+0x48>
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	891b      	ldrh	r3, [r3, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <tcp_zero_window_probe+0x48>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <tcp_zero_window_probe+0x4a>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8009eac:	7ffb      	ldrb	r3, [r7, #31]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bf0c      	ite	eq
 8009eb2:	2301      	moveq	r3, #1
 8009eb4:	2300      	movne	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	8bba      	ldrh	r2, [r7, #28]
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7fe fce1 	bl	800888c <tcp_output_alloc_header>
 8009eca:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d102      	bne.n	8009ed8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8009ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed6:	e05b      	b.n	8009f90 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8009ede:	7ffb      	ldrb	r3, [r7, #31]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00e      	beq.n	8009f02 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	899b      	ldrh	r3, [r3, #12]
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009eee:	b29c      	uxth	r4, r3
 8009ef0:	2011      	movs	r0, #17
 8009ef2:	f7f9 fac0 	bl	8003476 <lwip_htons>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	4323      	orrs	r3, r4
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	819a      	strh	r2, [r3, #12]
 8009f00:	e010      	b.n	8009f24 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	3314      	adds	r3, #20
 8009f08:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009f0a:	6a3b      	ldr	r3, [r7, #32]
 8009f0c:	6858      	ldr	r0, [r3, #4]
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	891a      	ldrh	r2, [r3, #8]
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	891b      	ldrh	r3, [r3, #8]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	6939      	ldr	r1, [r7, #16]
 8009f20:	f7fa fdce 	bl	8004ac0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7f9 fab1 	bl	8003492 <lwip_htonl>
 8009f30:	4603      	mov	r3, r0
 8009f32:	3301      	adds	r3, #1
 8009f34:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	da02      	bge.n	8009f48 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 fe0d 	bl	800bb6c <ip4_route>
 8009f52:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d103      	bne.n	8009f62 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8009f5a:	23fc      	movs	r3, #252	; 0xfc
 8009f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f60:	e011      	b.n	8009f86 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009f62:	6879      	ldr	r1, [r7, #4]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	1d1a      	adds	r2, r3, #4
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7a98      	ldrb	r0, [r3, #10]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	9302      	str	r3, [sp, #8]
 8009f70:	2306      	movs	r3, #6
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	2300      	movs	r3, #0
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	4603      	mov	r3, r0
 8009f7a:	69b8      	ldr	r0, [r7, #24]
 8009f7c:	f001 ff9e 	bl	800bebc <ip4_output_if>
 8009f80:	4603      	mov	r3, r0
 8009f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8009f86:	69b8      	ldr	r0, [r7, #24]
 8009f88:	f7fa fb9a 	bl	80046c0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009f8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	372c      	adds	r7, #44	; 0x2c
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd90      	pop	{r4, r7, pc}

08009f98 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8009fa0:	f7fa fea2 	bl	8004ce8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009fa4:	4b0a      	ldr	r3, [pc, #40]	; (8009fd0 <tcpip_tcp_timer+0x38>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d103      	bne.n	8009fb4 <tcpip_tcp_timer+0x1c>
 8009fac:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <tcpip_tcp_timer+0x3c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d005      	beq.n	8009fc0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4908      	ldr	r1, [pc, #32]	; (8009fd8 <tcpip_tcp_timer+0x40>)
 8009fb8:	20fa      	movs	r0, #250	; 0xfa
 8009fba:	f000 f86f 	bl	800a09c <sys_timeout>
 8009fbe:	e002      	b.n	8009fc6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8009fc0:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <tcpip_tcp_timer+0x44>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
  }
}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	20003748 	.word	0x20003748
 8009fd4:	20003758 	.word	0x20003758
 8009fd8:	08009f99 	.word	0x08009f99
 8009fdc:	20000104 	.word	0x20000104

08009fe0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009fe4:	4b0a      	ldr	r3, [pc, #40]	; (800a010 <tcp_timer_needed+0x30>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10f      	bne.n	800a00c <tcp_timer_needed+0x2c>
 8009fec:	4b09      	ldr	r3, [pc, #36]	; (800a014 <tcp_timer_needed+0x34>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d103      	bne.n	8009ffc <tcp_timer_needed+0x1c>
 8009ff4:	4b08      	ldr	r3, [pc, #32]	; (800a018 <tcp_timer_needed+0x38>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d007      	beq.n	800a00c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8009ffc:	4b04      	ldr	r3, [pc, #16]	; (800a010 <tcp_timer_needed+0x30>)
 8009ffe:	2201      	movs	r2, #1
 800a000:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a002:	2200      	movs	r2, #0
 800a004:	4905      	ldr	r1, [pc, #20]	; (800a01c <tcp_timer_needed+0x3c>)
 800a006:	20fa      	movs	r0, #250	; 0xfa
 800a008:	f000 f848 	bl	800a09c <sys_timeout>
  }
}
 800a00c:	bf00      	nop
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20000104 	.word	0x20000104
 800a014:	20003748 	.word	0x20003748
 800a018:	20003758 	.word	0x20003758
 800a01c:	08009f99 	.word	0x08009f99

0800a020 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	4903      	ldr	r1, [pc, #12]	; (800a048 <cyclic_timer+0x28>)
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 f82e 	bl	800a09c <sys_timeout>
}
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	0800a021 	.word	0x0800a021

0800a04c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a052:	2301      	movs	r3, #1
 800a054:	607b      	str	r3, [r7, #4]
 800a056:	e00e      	b.n	800a076 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a058:	4a0d      	ldr	r2, [pc, #52]	; (800a090 <sys_timeouts_init+0x44>)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	4a0a      	ldr	r2, [pc, #40]	; (800a090 <sys_timeouts_init+0x44>)
 800a066:	4413      	add	r3, r2
 800a068:	461a      	mov	r2, r3
 800a06a:	490a      	ldr	r1, [pc, #40]	; (800a094 <sys_timeouts_init+0x48>)
 800a06c:	f000 f816 	bl	800a09c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3301      	adds	r3, #1
 800a074:	607b      	str	r3, [r7, #4]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d9ed      	bls.n	800a058 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800a07c:	f003 f9d6 	bl	800d42c <sys_now>
 800a080:	4602      	mov	r2, r0
 800a082:	4b05      	ldr	r3, [pc, #20]	; (800a098 <sys_timeouts_init+0x4c>)
 800a084:	601a      	str	r2, [r3, #0]
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	08010ebc 	.word	0x08010ebc
 800a094:	0800a021 	.word	0x0800a021
 800a098:	20000100 	.word	0x20000100

0800a09c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a0a8:	2006      	movs	r0, #6
 800a0aa:	f7f9 fd93 	bl	8003bd4 <memp_malloc>
 800a0ae:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10a      	bne.n	800a0cc <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f040 8084 	bne.w	800a1c6 <sys_timeout+0x12a>
 800a0be:	4b44      	ldr	r3, [pc, #272]	; (800a1d0 <sys_timeout+0x134>)
 800a0c0:	22d4      	movs	r2, #212	; 0xd4
 800a0c2:	4944      	ldr	r1, [pc, #272]	; (800a1d4 <sys_timeout+0x138>)
 800a0c4:	4844      	ldr	r0, [pc, #272]	; (800a1d8 <sys_timeout+0x13c>)
 800a0c6:	f004 f82d 	bl	800e124 <iprintf>
    return;
 800a0ca:	e07c      	b.n	800a1c6 <sys_timeout+0x12a>
  }

  now = sys_now();
 800a0cc:	f003 f9ae 	bl	800d42c <sys_now>
 800a0d0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800a0d2:	4b42      	ldr	r3, [pc, #264]	; (800a1dc <sys_timeout+0x140>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d105      	bne.n	800a0e6 <sys_timeout+0x4a>
    diff = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800a0de:	4a40      	ldr	r2, [pc, #256]	; (800a1e0 <sys_timeout+0x144>)
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	e004      	b.n	800a0f0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800a0e6:	4b3e      	ldr	r3, [pc, #248]	; (800a1e0 <sys_timeout+0x144>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	441a      	add	r2, r3
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a10c:	4b33      	ldr	r3, [pc, #204]	; (800a1dc <sys_timeout+0x140>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d103      	bne.n	800a11c <sys_timeout+0x80>
    next_timeout = timeout;
 800a114:	4a31      	ldr	r2, [pc, #196]	; (800a1dc <sys_timeout+0x140>)
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	6013      	str	r3, [r2, #0]
    return;
 800a11a:	e055      	b.n	800a1c8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800a11c:	4b2f      	ldr	r3, [pc, #188]	; (800a1dc <sys_timeout+0x140>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	429a      	cmp	r2, r3
 800a126:	d20f      	bcs.n	800a148 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800a128:	4b2c      	ldr	r3, [pc, #176]	; (800a1dc <sys_timeout+0x140>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6859      	ldr	r1, [r3, #4]
 800a12e:	4b2b      	ldr	r3, [pc, #172]	; (800a1dc <sys_timeout+0x140>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	1a8a      	subs	r2, r1, r2
 800a136:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800a138:	4b28      	ldr	r3, [pc, #160]	; (800a1dc <sys_timeout+0x140>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a140:	4a26      	ldr	r2, [pc, #152]	; (800a1dc <sys_timeout+0x140>)
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	e03f      	b.n	800a1c8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a148:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <sys_timeout+0x140>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	e036      	b.n	800a1be <sys_timeout+0x122>
      timeout->time -= t->time;
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	1ad2      	subs	r2, r2, r3
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d006      	beq.n	800a174 <sys_timeout+0xd8>
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d921      	bls.n	800a1b8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d009      	beq.n	800a190 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6859      	ldr	r1, [r3, #4]
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	1a8a      	subs	r2, r1, r2
 800a18c:	605a      	str	r2, [r3, #4]
 800a18e:	e00b      	b.n	800a1a8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	429a      	cmp	r2, r3
 800a198:	d206      	bcs.n	800a1a8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800a19a:	4b10      	ldr	r3, [pc, #64]	; (800a1dc <sys_timeout+0x140>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	441a      	add	r2, r3
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	601a      	str	r2, [r3, #0]
        break;
 800a1b6:	e007      	b.n	800a1c8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	61fb      	str	r3, [r7, #28]
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1c5      	bne.n	800a150 <sys_timeout+0xb4>
 800a1c4:	e000      	b.n	800a1c8 <sys_timeout+0x12c>
    return;
 800a1c6:	bf00      	nop
      }
    }
  }
}
 800a1c8:	3720      	adds	r7, #32
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	08010510 	.word	0x08010510
 800a1d4:	08010544 	.word	0x08010544
 800a1d8:	08010584 	.word	0x08010584
 800a1dc:	200000fc 	.word	0x200000fc
 800a1e0:	20000100 	.word	0x20000100

0800a1e4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800a1ea:	4b24      	ldr	r3, [pc, #144]	; (800a27c <sys_check_timeouts+0x98>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d040      	beq.n	800a274 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800a1f2:	f003 f91b 	bl	800d42c <sys_now>
 800a1f6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800a1f8:	4b21      	ldr	r3, [pc, #132]	; (800a280 <sys_check_timeouts+0x9c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800a202:	4b20      	ldr	r3, [pc, #128]	; (800a284 <sys_check_timeouts+0xa0>)
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <sys_check_timeouts+0x2c>
 800a20c:	f7f9 feb6 	bl	8003f7c <pbuf_free_ooseq>
      had_one = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800a214:	4b19      	ldr	r3, [pc, #100]	; (800a27c <sys_check_timeouts+0x98>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d026      	beq.n	800a26e <sys_check_timeouts+0x8a>
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	429a      	cmp	r2, r3
 800a228:	d321      	bcc.n	800a26e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800a22a:	2301      	movs	r3, #1
 800a22c:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	4b13      	ldr	r3, [pc, #76]	; (800a280 <sys_check_timeouts+0x9c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4413      	add	r3, r2
 800a238:	4a11      	ldr	r2, [pc, #68]	; (800a280 <sys_check_timeouts+0x9c>)
 800a23a:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a0c      	ldr	r2, [pc, #48]	; (800a27c <sys_check_timeouts+0x98>)
 800a24c:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a25a:	68b9      	ldr	r1, [r7, #8]
 800a25c:	2006      	movs	r0, #6
 800a25e:	f7f9 fd05 	bl	8003c6c <memp_free>
        if (handler != NULL) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6838      	ldr	r0, [r7, #0]
 800a26c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800a26e:	7cfb      	ldrb	r3, [r7, #19]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1c6      	bne.n	800a202 <sys_check_timeouts+0x1e>
  }
}
 800a274:	bf00      	nop
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	200000fc 	.word	0x200000fc
 800a280:	20000100 	.word	0x20000100
 800a284:	20003740 	.word	0x20003740

0800a288 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a288:	b480      	push	{r7}
 800a28a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a28c:	bf00      	nop
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
	...

0800a298 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a2a2:	4b17      	ldr	r3, [pc, #92]	; (800a300 <udp_new_port+0x68>)
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	b291      	uxth	r1, r2
 800a2aa:	4a15      	ldr	r2, [pc, #84]	; (800a300 <udp_new_port+0x68>)
 800a2ac:	8011      	strh	r1, [r2, #0]
 800a2ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d103      	bne.n	800a2be <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a2b6:	4b12      	ldr	r3, [pc, #72]	; (800a300 <udp_new_port+0x68>)
 800a2b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a2bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2be:	4b11      	ldr	r3, [pc, #68]	; (800a304 <udp_new_port+0x6c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	e011      	b.n	800a2ea <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	8a5a      	ldrh	r2, [r3, #18]
 800a2ca:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <udp_new_port+0x68>)
 800a2cc:	881b      	ldrh	r3, [r3, #0]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d108      	bne.n	800a2e4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	80fb      	strh	r3, [r7, #6]
 800a2d8:	88fb      	ldrh	r3, [r7, #6]
 800a2da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2de:	d3e0      	bcc.n	800a2a2 <udp_new_port+0xa>
        return 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	e007      	b.n	800a2f4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	603b      	str	r3, [r7, #0]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1ea      	bne.n	800a2c6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800a2f0:	4b03      	ldr	r3, [pc, #12]	; (800a300 <udp_new_port+0x68>)
 800a2f2:	881b      	ldrh	r3, [r3, #0]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	2000000c 	.word	0x2000000c
 800a304:	20003760 	.word	0x20003760

0800a308 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	4613      	mov	r3, r2
 800a314:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a316:	79fb      	ldrb	r3, [r7, #7]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d018      	beq.n	800a34e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d013      	beq.n	800a34a <udp_input_local_match+0x42>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00f      	beq.n	800a34a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a32a:	4b14      	ldr	r3, [pc, #80]	; (800a37c <udp_input_local_match+0x74>)
 800a32c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a332:	d00a      	beq.n	800a34a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	4b10      	ldr	r3, [pc, #64]	; (800a37c <udp_input_local_match+0x74>)
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	405a      	eors	r2, r3
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	3308      	adds	r3, #8
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a346:	2b00      	cmp	r3, #0
 800a348:	d110      	bne.n	800a36c <udp_input_local_match+0x64>
          return 1;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e00f      	b.n	800a36e <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d009      	beq.n	800a368 <udp_input_local_match+0x60>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d005      	beq.n	800a368 <udp_input_local_match+0x60>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	4b06      	ldr	r3, [pc, #24]	; (800a37c <udp_input_local_match+0x74>)
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	429a      	cmp	r2, r3
 800a366:	d101      	bne.n	800a36c <udp_input_local_match+0x64>
      return 1;
 800a368:	2301      	movs	r3, #1
 800a36a:	e000      	b.n	800a36e <udp_input_local_match+0x66>
    }
  }

  return 0;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	20000218 	.word	0x20000218

0800a380 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a380:	b590      	push	{r4, r7, lr}
 800a382:	b08d      	sub	sp, #52	; 0x34
 800a384:	af02      	add	r7, sp, #8
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	895b      	ldrh	r3, [r3, #10]
 800a392:	2b07      	cmp	r3, #7
 800a394:	d803      	bhi.n	800a39e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7fa f992 	bl	80046c0 <pbuf_free>
    goto end;
 800a39c:	e0c6      	b.n	800a52c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a3a4:	4b63      	ldr	r3, [pc, #396]	; (800a534 <udp_input+0x1b4>)
 800a3a6:	695a      	ldr	r2, [r3, #20]
 800a3a8:	4b62      	ldr	r3, [pc, #392]	; (800a534 <udp_input+0x1b4>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	f001 fe56 	bl	800c060 <ip4_addr_isbroadcast_u32>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f9 f859 	bl	8003476 <lwip_htons>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	885b      	ldrh	r3, [r3, #2]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f9 f851 	bl	8003476 <lwip_htons>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3e4:	4b54      	ldr	r3, [pc, #336]	; (800a538 <udp_input+0x1b8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ea:	e03b      	b.n	800a464 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	8a5b      	ldrh	r3, [r3, #18]
 800a3f0:	89fa      	ldrh	r2, [r7, #14]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d131      	bne.n	800a45a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a3f6:	7cfb      	ldrb	r3, [r7, #19]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3fe:	f7ff ff83 	bl	800a308 <udp_input_local_match>
 800a402:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a404:	2b00      	cmp	r3, #0
 800a406:	d028      	beq.n	800a45a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	7c1b      	ldrb	r3, [r3, #16]
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	d104      	bne.n	800a41e <udp_input+0x9e>
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	8a9b      	ldrh	r3, [r3, #20]
 800a422:	8a3a      	ldrh	r2, [r7, #16]
 800a424:	429a      	cmp	r2, r3
 800a426:	d118      	bne.n	800a45a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a432:	685a      	ldr	r2, [r3, #4]
 800a434:	4b3f      	ldr	r3, [pc, #252]	; (800a534 <udp_input+0x1b4>)
 800a436:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a438:	429a      	cmp	r2, r3
 800a43a:	d10e      	bne.n	800a45a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d014      	beq.n	800a46c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800a44a:	4b3b      	ldr	r3, [pc, #236]	; (800a538 <udp_input+0x1b8>)
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800a452:	4a39      	ldr	r2, [pc, #228]	; (800a538 <udp_input+0x1b8>)
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800a458:	e008      	b.n	800a46c <udp_input+0xec>
      }
    }

    prev = pcb;
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1c0      	bne.n	800a3ec <udp_input+0x6c>
 800a46a:	e000      	b.n	800a46e <udp_input+0xee>
        break;
 800a46c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	2b00      	cmp	r3, #0
 800a472:	d101      	bne.n	800a478 <udp_input+0xf8>
    pcb = uncon_pcb;
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <udp_input+0x104>
    for_us = 1;
 800a47e:	2301      	movs	r3, #1
 800a480:	76fb      	strb	r3, [r7, #27]
 800a482:	e00a      	b.n	800a49a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	3304      	adds	r3, #4
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	4b2a      	ldr	r3, [pc, #168]	; (800a534 <udp_input+0x1b4>)
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	429a      	cmp	r2, r3
 800a490:	bf0c      	ite	eq
 800a492:	2301      	moveq	r3, #1
 800a494:	2300      	movne	r3, #0
 800a496:	b2db      	uxtb	r3, r3
 800a498:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800a49a:	7efb      	ldrb	r3, [r7, #27]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d042      	beq.n	800a526 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800a4a0:	f06f 0107 	mvn.w	r1, #7
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7fa f8e7 	bl	8004678 <pbuf_header>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00a      	beq.n	800a4c6 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800a4b0:	4b22      	ldr	r3, [pc, #136]	; (800a53c <udp_input+0x1bc>)
 800a4b2:	f240 1255 	movw	r2, #341	; 0x155
 800a4b6:	4922      	ldr	r1, [pc, #136]	; (800a540 <udp_input+0x1c0>)
 800a4b8:	4822      	ldr	r0, [pc, #136]	; (800a544 <udp_input+0x1c4>)
 800a4ba:	f003 fe33 	bl	800e124 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7fa f8fe 	bl	80046c0 <pbuf_free>
      goto end;
 800a4c4:	e032      	b.n	800a52c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d012      	beq.n	800a4f2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00a      	beq.n	800a4ea <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	699c      	ldr	r4, [r3, #24]
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	69d8      	ldr	r0, [r3, #28]
 800a4dc:	8a3b      	ldrh	r3, [r7, #16]
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	4b19      	ldr	r3, [pc, #100]	; (800a548 <udp_input+0x1c8>)
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800a4e8:	e021      	b.n	800a52e <udp_input+0x1ae>
        pbuf_free(p);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7fa f8e8 	bl	80046c0 <pbuf_free>
        goto end;
 800a4f0:	e01c      	b.n	800a52c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a4f2:	7cfb      	ldrb	r3, [r7, #19]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d112      	bne.n	800a51e <udp_input+0x19e>
 800a4f8:	4b0e      	ldr	r3, [pc, #56]	; (800a534 <udp_input+0x1b4>)
 800a4fa:	695b      	ldr	r3, [r3, #20]
 800a4fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a500:	2be0      	cmp	r3, #224	; 0xe0
 800a502:	d00c      	beq.n	800a51e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a504:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <udp_input+0x1b4>)
 800a506:	899b      	ldrh	r3, [r3, #12]
 800a508:	3308      	adds	r3, #8
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	b21b      	sxth	r3, r3
 800a50e:	4619      	mov	r1, r3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7fa f8c3 	bl	800469c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a516:	2103      	movs	r1, #3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 fa9f 	bl	800ba5c <icmp_dest_unreach>
      pbuf_free(p);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7fa f8ce 	bl	80046c0 <pbuf_free>
  return;
 800a524:	e003      	b.n	800a52e <udp_input+0x1ae>
    pbuf_free(p);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7fa f8ca 	bl	80046c0 <pbuf_free>
  return;
 800a52c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a52e:	372c      	adds	r7, #44	; 0x2c
 800a530:	46bd      	mov	sp, r7
 800a532:	bd90      	pop	{r4, r7, pc}
 800a534:	20000218 	.word	0x20000218
 800a538:	20003760 	.word	0x20003760
 800a53c:	080105ac 	.word	0x080105ac
 800a540:	080105dc 	.word	0x080105dc
 800a544:	080105f0 	.word	0x080105f0
 800a548:	20000228 	.word	0x20000228

0800a54c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <udp_send+0x16>
    return ERR_VAL;
 800a55c:	f06f 0305 	mvn.w	r3, #5
 800a560:	e008      	b.n	800a574 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	1d1a      	adds	r2, r3, #4
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	8a9b      	ldrh	r3, [r3, #20]
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f805 	bl	800a57c <udp_sendto>
 800a572:	4603      	mov	r3, r0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af02      	add	r7, sp, #8
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d002      	beq.n	800a59a <udp_sendto+0x1e>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d102      	bne.n	800a5a0 <udp_sendto+0x24>
    return ERR_VAL;
 800a59a:	f06f 0305 	mvn.w	r3, #5
 800a59e:	e013      	b.n	800a5c8 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800a5a0:	6978      	ldr	r0, [r7, #20]
 800a5a2:	f001 fae3 	bl	800bb6c <ip4_route>
 800a5a6:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800a5ae:	f06f 0303 	mvn.w	r3, #3
 800a5b2:	e009      	b.n	800a5c8 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800a5b4:	887a      	ldrh	r2, [r7, #2]
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	68b9      	ldr	r1, [r7, #8]
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 f805 	bl	800a5d0 <udp_sendto_if>
 800a5c6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b088      	sub	sp, #32
 800a5d4:	af02      	add	r7, sp, #8
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <udp_sendto_if+0x1a>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <udp_sendto_if+0x20>
    return ERR_VAL;
 800a5ea:	f06f 0305 	mvn.w	r3, #5
 800a5ee:	e028      	b.n	800a642 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d009      	beq.n	800a60a <udp_sendto_if+0x3a>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d005      	beq.n	800a60a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a606:	2be0      	cmp	r3, #224	; 0xe0
 800a608:	d103      	bne.n	800a612 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	3304      	adds	r3, #4
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	e00b      	b.n	800a62a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	3304      	adds	r3, #4
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d002      	beq.n	800a626 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800a620:	f06f 0303 	mvn.w	r3, #3
 800a624:	e00d      	b.n	800a642 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800a62a:	887a      	ldrh	r2, [r7, #2]
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	9301      	str	r3, [sp, #4]
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	4613      	mov	r3, r2
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	68b9      	ldr	r1, [r7, #8]
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 f806 	bl	800a64c <udp_sendto_if_src>
 800a640:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08c      	sub	sp, #48	; 0x30
 800a650:	af04      	add	r7, sp, #16
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <udp_sendto_if_src+0x1a>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800a666:	f06f 0305 	mvn.w	r3, #5
 800a66a:	e07e      	b.n	800a76a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	8a5b      	ldrh	r3, [r3, #18]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10f      	bne.n	800a694 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a674:	68f9      	ldr	r1, [r7, #12]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	8a5b      	ldrh	r3, [r3, #18]
 800a67a:	461a      	mov	r2, r3
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 f87f 	bl	800a780 <udp_bind>
 800a682:	4603      	mov	r3, r0
 800a684:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800a686:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800a68e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a692:	e06a      	b.n	800a76a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800a694:	2108      	movs	r1, #8
 800a696:	68b8      	ldr	r0, [r7, #8]
 800a698:	f7f9 ffee 	bl	8004678 <pbuf_header>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d014      	beq.n	800a6cc <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2108      	movs	r1, #8
 800a6a6:	2001      	movs	r0, #1
 800a6a8:	f7f9 fc98 	bl	8003fdc <pbuf_alloc>
 800a6ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800a6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b8:	e057      	b.n	800a76a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	891b      	ldrh	r3, [r3, #8]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d006      	beq.n	800a6d0 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800a6c2:	68b9      	ldr	r1, [r7, #8]
 800a6c4:	69f8      	ldr	r0, [r7, #28]
 800a6c6:	f7fa f91f 	bl	8004908 <pbuf_chain>
 800a6ca:	e001      	b.n	800a6d0 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	895b      	ldrh	r3, [r3, #10]
 800a6d4:	2b07      	cmp	r3, #7
 800a6d6:	d806      	bhi.n	800a6e6 <udp_sendto_if_src+0x9a>
 800a6d8:	4b26      	ldr	r3, [pc, #152]	; (800a774 <udp_sendto_if_src+0x128>)
 800a6da:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a6de:	4926      	ldr	r1, [pc, #152]	; (800a778 <udp_sendto_if_src+0x12c>)
 800a6e0:	4826      	ldr	r0, [pc, #152]	; (800a77c <udp_sendto_if_src+0x130>)
 800a6e2:	f003 fd1f 	bl	800e124 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	8a5b      	ldrh	r3, [r3, #18]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7f8 fec0 	bl	8003476 <lwip_htons>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800a6fe:	887b      	ldrh	r3, [r7, #2]
 800a700:	4618      	mov	r0, r3
 800a702:	f7f8 feb8 	bl	8003476 <lwip_htons>
 800a706:	4603      	mov	r3, r0
 800a708:	461a      	mov	r2, r3
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	2200      	movs	r2, #0
 800a712:	719a      	strb	r2, [r3, #6]
 800a714:	2200      	movs	r2, #0
 800a716:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	891b      	ldrh	r3, [r3, #8]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7f8 feaa 	bl	8003476 <lwip_htons>
 800a722:	4603      	mov	r3, r0
 800a724:	461a      	mov	r2, r3
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800a72a:	2311      	movs	r3, #17
 800a72c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	7a9b      	ldrb	r3, [r3, #10]
 800a732:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	7a5b      	ldrb	r3, [r3, #9]
 800a738:	7cb9      	ldrb	r1, [r7, #18]
 800a73a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a73c:	9202      	str	r2, [sp, #8]
 800a73e:	7cfa      	ldrb	r2, [r7, #19]
 800a740:	9201      	str	r2, [sp, #4]
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	460b      	mov	r3, r1
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a74a:	69f8      	ldr	r0, [r7, #28]
 800a74c:	f001 fbe0 	bl	800bf10 <ip4_output_if_src>
 800a750:	4603      	mov	r3, r0
 800a752:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800a754:	69fa      	ldr	r2, [r7, #28]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d004      	beq.n	800a766 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800a75c:	69f8      	ldr	r0, [r7, #28]
 800a75e:	f7f9 ffaf 	bl	80046c0 <pbuf_free>
    q = NULL;
 800a762:	2300      	movs	r3, #0
 800a764:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800a766:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3720      	adds	r7, #32
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	080105ac 	.word	0x080105ac
 800a778:	08010618 	.word	0x08010618
 800a77c:	080105f0 	.word	0x080105f0

0800a780 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	4613      	mov	r3, r2
 800a78c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800a794:	4b30      	ldr	r3, [pc, #192]	; (800a858 <udp_bind+0xd8>)
 800a796:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <udp_bind+0x24>
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d102      	bne.n	800a7aa <udp_bind+0x2a>
    return ERR_VAL;
 800a7a4:	f06f 0305 	mvn.w	r3, #5
 800a7a8:	e052      	b.n	800a850 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a7ae:	4b2b      	ldr	r3, [pc, #172]	; (800a85c <udp_bind+0xdc>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	617b      	str	r3, [r7, #20]
 800a7b4:	e009      	b.n	800a7ca <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d102      	bne.n	800a7c4 <udp_bind+0x44>
      rebind = 1;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	74fb      	strb	r3, [r7, #19]
      break;
 800a7c2:	e005      	b.n	800a7d0 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1f2      	bne.n	800a7b6 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800a7d0:	88fb      	ldrh	r3, [r7, #6]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d109      	bne.n	800a7ea <udp_bind+0x6a>
    port = udp_new_port();
 800a7d6:	f7ff fd5f 	bl	800a298 <udp_new_port>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a7de:	88fb      	ldrh	r3, [r7, #6]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d11e      	bne.n	800a822 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800a7e4:	f06f 0307 	mvn.w	r3, #7
 800a7e8:	e032      	b.n	800a850 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a7ea:	4b1c      	ldr	r3, [pc, #112]	; (800a85c <udp_bind+0xdc>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	617b      	str	r3, [r7, #20]
 800a7f0:	e014      	b.n	800a81c <udp_bind+0x9c>
      if (pcb != ipcb) {
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d00d      	beq.n	800a816 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	8a5b      	ldrh	r3, [r3, #18]
 800a7fe:	88fa      	ldrh	r2, [r7, #6]
 800a800:	429a      	cmp	r2, r3
 800a802:	d108      	bne.n	800a816 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d102      	bne.n	800a816 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800a810:	f06f 0307 	mvn.w	r3, #7
 800a814:	e01c      	b.n	800a850 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1e7      	bne.n	800a7f2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <udp_bind+0xae>
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	e000      	b.n	800a830 <udp_bind+0xb0>
 800a82e:	2300      	movs	r3, #0
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	88fa      	ldrh	r2, [r7, #6]
 800a838:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800a83a:	7cfb      	ldrb	r3, [r7, #19]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d106      	bne.n	800a84e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800a840:	4b06      	ldr	r3, [pc, #24]	; (800a85c <udp_bind+0xdc>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800a848:	4a04      	ldr	r2, [pc, #16]	; (800a85c <udp_bind+0xdc>)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	08010ed4 	.word	0x08010ed4
 800a85c:	20003760 	.word	0x20003760

0800a860 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	4613      	mov	r3, r2
 800a86c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <udp_connect+0x1a>
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d102      	bne.n	800a880 <udp_connect+0x20>
    return ERR_VAL;
 800a87a:	f06f 0305 	mvn.w	r3, #5
 800a87e:	e03e      	b.n	800a8fe <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	8a5b      	ldrh	r3, [r3, #18]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10f      	bne.n	800a8a8 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a888:	68f9      	ldr	r1, [r7, #12]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	8a5b      	ldrh	r3, [r3, #18]
 800a88e:	461a      	mov	r2, r3
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7ff ff75 	bl	800a780 <udp_bind>
 800a896:	4603      	mov	r3, r0
 800a898:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a89a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d002      	beq.n	800a8a8 <udp_connect+0x48>
      return err;
 800a8a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8a6:	e02a      	b.n	800a8fe <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d002      	beq.n	800a8b4 <udp_connect+0x54>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	e000      	b.n	800a8b6 <udp_connect+0x56>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	88fa      	ldrh	r2, [r7, #6]
 800a8be:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	7c1b      	ldrb	r3, [r3, #16]
 800a8c4:	f043 0304 	orr.w	r3, r3, #4
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a8ce:	4b0e      	ldr	r3, [pc, #56]	; (800a908 <udp_connect+0xa8>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	617b      	str	r3, [r7, #20]
 800a8d4:	e008      	b.n	800a8e8 <udp_connect+0x88>
    if (pcb == ipcb) {
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d101      	bne.n	800a8e2 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	e00d      	b.n	800a8fe <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	617b      	str	r3, [r7, #20]
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1f3      	bne.n	800a8d6 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800a8ee:	4b06      	ldr	r3, [pc, #24]	; (800a908 <udp_connect+0xa8>)
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800a8f6:	4a04      	ldr	r2, [pc, #16]	; (800a908 <udp_connect+0xa8>)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20003760 	.word	0x20003760

0800a90c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	61da      	str	r2, [r3, #28]
}
 800a924:	bf00      	nop
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800a938:	4b15      	ldr	r3, [pc, #84]	; (800a990 <udp_remove+0x60>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d105      	bne.n	800a94e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800a942:	4b13      	ldr	r3, [pc, #76]	; (800a990 <udp_remove+0x60>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	4a11      	ldr	r2, [pc, #68]	; (800a990 <udp_remove+0x60>)
 800a94a:	6013      	str	r3, [r2, #0]
 800a94c:	e017      	b.n	800a97e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800a94e:	4b10      	ldr	r3, [pc, #64]	; (800a990 <udp_remove+0x60>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	e010      	b.n	800a978 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d009      	beq.n	800a972 <udp_remove+0x42>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	429a      	cmp	r2, r3
 800a966:	d104      	bne.n	800a972 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68da      	ldr	r2, [r3, #12]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	60da      	str	r2, [r3, #12]
        break;
 800a970:	e005      	b.n	800a97e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1eb      	bne.n	800a956 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	2000      	movs	r0, #0
 800a982:	f7f9 f973 	bl	8003c6c <memp_free>
}
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	20003760 	.word	0x20003760

0800a994 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800a99a:	2000      	movs	r0, #0
 800a99c:	f7f9 f91a 	bl	8003bd4 <memp_malloc>
 800a9a0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d007      	beq.n	800a9b8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f003 fbb1 	bl	800e114 <memset>
    pcb->ttl = UDP_TTL;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	22ff      	movs	r2, #255	; 0xff
 800a9b6:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800a9b8:	687b      	ldr	r3, [r7, #4]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
	...

0800a9c4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d01e      	beq.n	800aa12 <udp_netif_ip_addr_changed+0x4e>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d01a      	beq.n	800aa12 <udp_netif_ip_addr_changed+0x4e>
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d017      	beq.n	800aa12 <udp_netif_ip_addr_changed+0x4e>
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d013      	beq.n	800aa12 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a9ea:	4b0d      	ldr	r3, [pc, #52]	; (800aa20 <udp_netif_ip_addr_changed+0x5c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	e00c      	b.n	800aa0c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d103      	bne.n	800aa06 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1ef      	bne.n	800a9f2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800aa12:	bf00      	nop
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	20003760 	.word	0x20003760

0800aa24 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800aa2c:	4915      	ldr	r1, [pc, #84]	; (800aa84 <etharp_free_entry+0x60>)
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	4613      	mov	r3, r2
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	4413      	add	r3, r2
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	440b      	add	r3, r1
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d013      	beq.n	800aa68 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800aa40:	4910      	ldr	r1, [pc, #64]	; (800aa84 <etharp_free_entry+0x60>)
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	4613      	mov	r3, r2
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	4413      	add	r3, r2
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	440b      	add	r3, r1
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7f9 fe35 	bl	80046c0 <pbuf_free>
    arp_table[i].q = NULL;
 800aa56:	490b      	ldr	r1, [pc, #44]	; (800aa84 <etharp_free_entry+0x60>)
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	4413      	add	r3, r2
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	440b      	add	r3, r1
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800aa68:	4906      	ldr	r1, [pc, #24]	; (800aa84 <etharp_free_entry+0x60>)
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	005b      	lsls	r3, r3, #1
 800aa70:	4413      	add	r3, r2
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	440b      	add	r3, r1
 800aa76:	3314      	adds	r3, #20
 800aa78:	2200      	movs	r2, #0
 800aa7a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800aa7c:	bf00      	nop
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	20000108 	.word	0x20000108

0800aa88 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aa8e:	2300      	movs	r3, #0
 800aa90:	71fb      	strb	r3, [r7, #7]
 800aa92:	e096      	b.n	800abc2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800aa94:	79fa      	ldrb	r2, [r7, #7]
 800aa96:	494f      	ldr	r1, [pc, #316]	; (800abd4 <etharp_tmr+0x14c>)
 800aa98:	4613      	mov	r3, r2
 800aa9a:	005b      	lsls	r3, r3, #1
 800aa9c:	4413      	add	r3, r2
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	440b      	add	r3, r1
 800aaa2:	3314      	adds	r3, #20
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800aaa8:	79bb      	ldrb	r3, [r7, #6]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 8086 	beq.w	800abbc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800aab0:	79fa      	ldrb	r2, [r7, #7]
 800aab2:	4948      	ldr	r1, [pc, #288]	; (800abd4 <etharp_tmr+0x14c>)
 800aab4:	4613      	mov	r3, r2
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	4413      	add	r3, r2
 800aaba:	00db      	lsls	r3, r3, #3
 800aabc:	440b      	add	r3, r1
 800aabe:	3312      	adds	r3, #18
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	3301      	adds	r3, #1
 800aac4:	b298      	uxth	r0, r3
 800aac6:	4943      	ldr	r1, [pc, #268]	; (800abd4 <etharp_tmr+0x14c>)
 800aac8:	4613      	mov	r3, r2
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	4413      	add	r3, r2
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	440b      	add	r3, r1
 800aad2:	3312      	adds	r3, #18
 800aad4:	4602      	mov	r2, r0
 800aad6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800aad8:	79fa      	ldrb	r2, [r7, #7]
 800aada:	493e      	ldr	r1, [pc, #248]	; (800abd4 <etharp_tmr+0x14c>)
 800aadc:	4613      	mov	r3, r2
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	4413      	add	r3, r2
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	440b      	add	r3, r1
 800aae6:	3312      	adds	r3, #18
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800aaee:	d215      	bcs.n	800ab1c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800aaf0:	79fa      	ldrb	r2, [r7, #7]
 800aaf2:	4938      	ldr	r1, [pc, #224]	; (800abd4 <etharp_tmr+0x14c>)
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	4413      	add	r3, r2
 800aafa:	00db      	lsls	r3, r3, #3
 800aafc:	440b      	add	r3, r1
 800aafe:	3314      	adds	r3, #20
 800ab00:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d10f      	bne.n	800ab26 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ab06:	79fa      	ldrb	r2, [r7, #7]
 800ab08:	4932      	ldr	r1, [pc, #200]	; (800abd4 <etharp_tmr+0x14c>)
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	4413      	add	r3, r2
 800ab10:	00db      	lsls	r3, r3, #3
 800ab12:	440b      	add	r3, r1
 800ab14:	3312      	adds	r3, #18
 800ab16:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d904      	bls.n	800ab26 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7ff ff80 	bl	800aa24 <etharp_free_entry>
 800ab24:	e04a      	b.n	800abbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ab26:	79fa      	ldrb	r2, [r7, #7]
 800ab28:	492a      	ldr	r1, [pc, #168]	; (800abd4 <etharp_tmr+0x14c>)
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	005b      	lsls	r3, r3, #1
 800ab2e:	4413      	add	r3, r2
 800ab30:	00db      	lsls	r3, r3, #3
 800ab32:	440b      	add	r3, r1
 800ab34:	3314      	adds	r3, #20
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	2b03      	cmp	r3, #3
 800ab3a:	d10a      	bne.n	800ab52 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ab3c:	79fa      	ldrb	r2, [r7, #7]
 800ab3e:	4925      	ldr	r1, [pc, #148]	; (800abd4 <etharp_tmr+0x14c>)
 800ab40:	4613      	mov	r3, r2
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	4413      	add	r3, r2
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	440b      	add	r3, r1
 800ab4a:	3314      	adds	r3, #20
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	701a      	strb	r2, [r3, #0]
 800ab50:	e034      	b.n	800abbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ab52:	79fa      	ldrb	r2, [r7, #7]
 800ab54:	491f      	ldr	r1, [pc, #124]	; (800abd4 <etharp_tmr+0x14c>)
 800ab56:	4613      	mov	r3, r2
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	4413      	add	r3, r2
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	440b      	add	r3, r1
 800ab60:	3314      	adds	r3, #20
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b04      	cmp	r3, #4
 800ab66:	d10a      	bne.n	800ab7e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ab68:	79fa      	ldrb	r2, [r7, #7]
 800ab6a:	491a      	ldr	r1, [pc, #104]	; (800abd4 <etharp_tmr+0x14c>)
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	4413      	add	r3, r2
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	440b      	add	r3, r1
 800ab76:	3314      	adds	r3, #20
 800ab78:	2202      	movs	r2, #2
 800ab7a:	701a      	strb	r2, [r3, #0]
 800ab7c:	e01e      	b.n	800abbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ab7e:	79fa      	ldrb	r2, [r7, #7]
 800ab80:	4914      	ldr	r1, [pc, #80]	; (800abd4 <etharp_tmr+0x14c>)
 800ab82:	4613      	mov	r3, r2
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	4413      	add	r3, r2
 800ab88:	00db      	lsls	r3, r3, #3
 800ab8a:	440b      	add	r3, r1
 800ab8c:	3314      	adds	r3, #20
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d113      	bne.n	800abbc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ab94:	79fa      	ldrb	r2, [r7, #7]
 800ab96:	490f      	ldr	r1, [pc, #60]	; (800abd4 <etharp_tmr+0x14c>)
 800ab98:	4613      	mov	r3, r2
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	4413      	add	r3, r2
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	440b      	add	r3, r1
 800aba2:	3308      	adds	r3, #8
 800aba4:	6818      	ldr	r0, [r3, #0]
 800aba6:	79fa      	ldrb	r2, [r7, #7]
 800aba8:	4613      	mov	r3, r2
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	4413      	add	r3, r2
 800abae:	00db      	lsls	r3, r3, #3
 800abb0:	4a08      	ldr	r2, [pc, #32]	; (800abd4 <etharp_tmr+0x14c>)
 800abb2:	4413      	add	r3, r2
 800abb4:	3304      	adds	r3, #4
 800abb6:	4619      	mov	r1, r3
 800abb8:	f000 fe38 	bl	800b82c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800abbc:	79fb      	ldrb	r3, [r7, #7]
 800abbe:	3301      	adds	r3, #1
 800abc0:	71fb      	strb	r3, [r7, #7]
 800abc2:	79fb      	ldrb	r3, [r7, #7]
 800abc4:	2b09      	cmp	r3, #9
 800abc6:	f67f af65 	bls.w	800aa94 <etharp_tmr+0xc>
      }
    }
  }
}
 800abca:	bf00      	nop
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	20000108 	.word	0x20000108

0800abd8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	460b      	mov	r3, r1
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800abe6:	230a      	movs	r3, #10
 800abe8:	77fb      	strb	r3, [r7, #31]
 800abea:	230a      	movs	r3, #10
 800abec:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800abee:	230a      	movs	r3, #10
 800abf0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800abf6:	230a      	movs	r3, #10
 800abf8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	833b      	strh	r3, [r7, #24]
 800abfe:	2300      	movs	r3, #0
 800ac00:	82fb      	strh	r3, [r7, #22]
 800ac02:	2300      	movs	r3, #0
 800ac04:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ac06:	2300      	movs	r3, #0
 800ac08:	773b      	strb	r3, [r7, #28]
 800ac0a:	e093      	b.n	800ad34 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800ac0c:	7f3a      	ldrb	r2, [r7, #28]
 800ac0e:	4990      	ldr	r1, [pc, #576]	; (800ae50 <etharp_find_entry+0x278>)
 800ac10:	4613      	mov	r3, r2
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	4413      	add	r3, r2
 800ac16:	00db      	lsls	r3, r3, #3
 800ac18:	440b      	add	r3, r1
 800ac1a:	3314      	adds	r3, #20
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ac20:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ac24:	2b0a      	cmp	r3, #10
 800ac26:	d105      	bne.n	800ac34 <etharp_find_entry+0x5c>
 800ac28:	7cfb      	ldrb	r3, [r7, #19]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d102      	bne.n	800ac34 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800ac2e:	7f3b      	ldrb	r3, [r7, #28]
 800ac30:	777b      	strb	r3, [r7, #29]
 800ac32:	e07c      	b.n	800ad2e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ac34:	7cfb      	ldrb	r3, [r7, #19]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d079      	beq.n	800ad2e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ac3a:	7cfb      	ldrb	r3, [r7, #19]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d009      	beq.n	800ac54 <etharp_find_entry+0x7c>
 800ac40:	7cfb      	ldrb	r3, [r7, #19]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d806      	bhi.n	800ac54 <etharp_find_entry+0x7c>
 800ac46:	4b83      	ldr	r3, [pc, #524]	; (800ae54 <etharp_find_entry+0x27c>)
 800ac48:	f44f 7293 	mov.w	r2, #294	; 0x126
 800ac4c:	4982      	ldr	r1, [pc, #520]	; (800ae58 <etharp_find_entry+0x280>)
 800ac4e:	4883      	ldr	r0, [pc, #524]	; (800ae5c <etharp_find_entry+0x284>)
 800ac50:	f003 fa68 	bl	800e124 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00f      	beq.n	800ac7a <etharp_find_entry+0xa2>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6819      	ldr	r1, [r3, #0]
 800ac5e:	7f3a      	ldrb	r2, [r7, #28]
 800ac60:	487b      	ldr	r0, [pc, #492]	; (800ae50 <etharp_find_entry+0x278>)
 800ac62:	4613      	mov	r3, r2
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	4413      	add	r3, r2
 800ac68:	00db      	lsls	r3, r3, #3
 800ac6a:	4403      	add	r3, r0
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4299      	cmp	r1, r3
 800ac72:	d102      	bne.n	800ac7a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ac74:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ac78:	e0e5      	b.n	800ae46 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ac7a:	7cfb      	ldrb	r3, [r7, #19]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d13b      	bne.n	800acf8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ac80:	7f3a      	ldrb	r2, [r7, #28]
 800ac82:	4973      	ldr	r1, [pc, #460]	; (800ae50 <etharp_find_entry+0x278>)
 800ac84:	4613      	mov	r3, r2
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	4413      	add	r3, r2
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	440b      	add	r3, r1
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d018      	beq.n	800acc6 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800ac94:	7f3a      	ldrb	r2, [r7, #28]
 800ac96:	496e      	ldr	r1, [pc, #440]	; (800ae50 <etharp_find_entry+0x278>)
 800ac98:	4613      	mov	r3, r2
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	4413      	add	r3, r2
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	440b      	add	r3, r1
 800aca2:	3312      	adds	r3, #18
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	8b3a      	ldrh	r2, [r7, #24]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d840      	bhi.n	800ad2e <etharp_find_entry+0x156>
            old_queue = i;
 800acac:	7f3b      	ldrb	r3, [r7, #28]
 800acae:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800acb0:	7f3a      	ldrb	r2, [r7, #28]
 800acb2:	4967      	ldr	r1, [pc, #412]	; (800ae50 <etharp_find_entry+0x278>)
 800acb4:	4613      	mov	r3, r2
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	4413      	add	r3, r2
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	440b      	add	r3, r1
 800acbe:	3312      	adds	r3, #18
 800acc0:	881b      	ldrh	r3, [r3, #0]
 800acc2:	833b      	strh	r3, [r7, #24]
 800acc4:	e033      	b.n	800ad2e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800acc6:	7f3a      	ldrb	r2, [r7, #28]
 800acc8:	4961      	ldr	r1, [pc, #388]	; (800ae50 <etharp_find_entry+0x278>)
 800acca:	4613      	mov	r3, r2
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	4413      	add	r3, r2
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	440b      	add	r3, r1
 800acd4:	3312      	adds	r3, #18
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	8afa      	ldrh	r2, [r7, #22]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d827      	bhi.n	800ad2e <etharp_find_entry+0x156>
            old_pending = i;
 800acde:	7f3b      	ldrb	r3, [r7, #28]
 800ace0:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800ace2:	7f3a      	ldrb	r2, [r7, #28]
 800ace4:	495a      	ldr	r1, [pc, #360]	; (800ae50 <etharp_find_entry+0x278>)
 800ace6:	4613      	mov	r3, r2
 800ace8:	005b      	lsls	r3, r3, #1
 800acea:	4413      	add	r3, r2
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	440b      	add	r3, r1
 800acf0:	3312      	adds	r3, #18
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	82fb      	strh	r3, [r7, #22]
 800acf6:	e01a      	b.n	800ad2e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800acf8:	7cfb      	ldrb	r3, [r7, #19]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d917      	bls.n	800ad2e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800acfe:	7f3a      	ldrb	r2, [r7, #28]
 800ad00:	4953      	ldr	r1, [pc, #332]	; (800ae50 <etharp_find_entry+0x278>)
 800ad02:	4613      	mov	r3, r2
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	4413      	add	r3, r2
 800ad08:	00db      	lsls	r3, r3, #3
 800ad0a:	440b      	add	r3, r1
 800ad0c:	3312      	adds	r3, #18
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	8aba      	ldrh	r2, [r7, #20]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d80b      	bhi.n	800ad2e <etharp_find_entry+0x156>
            old_stable = i;
 800ad16:	7f3b      	ldrb	r3, [r7, #28]
 800ad18:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800ad1a:	7f3a      	ldrb	r2, [r7, #28]
 800ad1c:	494c      	ldr	r1, [pc, #304]	; (800ae50 <etharp_find_entry+0x278>)
 800ad1e:	4613      	mov	r3, r2
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	4413      	add	r3, r2
 800ad24:	00db      	lsls	r3, r3, #3
 800ad26:	440b      	add	r3, r1
 800ad28:	3312      	adds	r3, #18
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ad2e:	7f3b      	ldrb	r3, [r7, #28]
 800ad30:	3301      	adds	r3, #1
 800ad32:	773b      	strb	r3, [r7, #28]
 800ad34:	7f3b      	ldrb	r3, [r7, #28]
 800ad36:	2b09      	cmp	r3, #9
 800ad38:	f67f af68 	bls.w	800ac0c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ad3c:	7afb      	ldrb	r3, [r7, #11]
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d108      	bne.n	800ad58 <etharp_find_entry+0x180>
 800ad46:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ad4a:	2b0a      	cmp	r3, #10
 800ad4c:	d107      	bne.n	800ad5e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ad4e:	7afb      	ldrb	r3, [r7, #11]
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800ad58:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5c:	e073      	b.n	800ae46 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ad5e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ad62:	2b09      	cmp	r3, #9
 800ad64:	dc02      	bgt.n	800ad6c <etharp_find_entry+0x194>
    i = empty;
 800ad66:	7f7b      	ldrb	r3, [r7, #29]
 800ad68:	773b      	strb	r3, [r7, #28]
 800ad6a:	e036      	b.n	800adda <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ad6c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ad70:	2b09      	cmp	r3, #9
 800ad72:	dc13      	bgt.n	800ad9c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800ad74:	7fbb      	ldrb	r3, [r7, #30]
 800ad76:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ad78:	7f3a      	ldrb	r2, [r7, #28]
 800ad7a:	4935      	ldr	r1, [pc, #212]	; (800ae50 <etharp_find_entry+0x278>)
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	4413      	add	r3, r2
 800ad82:	00db      	lsls	r3, r3, #3
 800ad84:	440b      	add	r3, r1
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d018      	beq.n	800adbe <etharp_find_entry+0x1e6>
 800ad8c:	4b31      	ldr	r3, [pc, #196]	; (800ae54 <etharp_find_entry+0x27c>)
 800ad8e:	f240 126f 	movw	r2, #367	; 0x16f
 800ad92:	4933      	ldr	r1, [pc, #204]	; (800ae60 <etharp_find_entry+0x288>)
 800ad94:	4831      	ldr	r0, [pc, #196]	; (800ae5c <etharp_find_entry+0x284>)
 800ad96:	f003 f9c5 	bl	800e124 <iprintf>
 800ad9a:	e010      	b.n	800adbe <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ad9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ada0:	2b09      	cmp	r3, #9
 800ada2:	dc02      	bgt.n	800adaa <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800ada4:	7ffb      	ldrb	r3, [r7, #31]
 800ada6:	773b      	strb	r3, [r7, #28]
 800ada8:	e009      	b.n	800adbe <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800adaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800adae:	2b09      	cmp	r3, #9
 800adb0:	dc02      	bgt.n	800adb8 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800adb2:	7efb      	ldrb	r3, [r7, #27]
 800adb4:	773b      	strb	r3, [r7, #28]
 800adb6:	e002      	b.n	800adbe <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800adb8:	f04f 33ff 	mov.w	r3, #4294967295
 800adbc:	e043      	b.n	800ae46 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800adbe:	7f3b      	ldrb	r3, [r7, #28]
 800adc0:	2b09      	cmp	r3, #9
 800adc2:	d906      	bls.n	800add2 <etharp_find_entry+0x1fa>
 800adc4:	4b23      	ldr	r3, [pc, #140]	; (800ae54 <etharp_find_entry+0x27c>)
 800adc6:	f240 1281 	movw	r2, #385	; 0x181
 800adca:	4926      	ldr	r1, [pc, #152]	; (800ae64 <etharp_find_entry+0x28c>)
 800adcc:	4823      	ldr	r0, [pc, #140]	; (800ae5c <etharp_find_entry+0x284>)
 800adce:	f003 f9a9 	bl	800e124 <iprintf>
    etharp_free_entry(i);
 800add2:	7f3b      	ldrb	r3, [r7, #28]
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff fe25 	bl	800aa24 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800adda:	7f3b      	ldrb	r3, [r7, #28]
 800addc:	2b09      	cmp	r3, #9
 800adde:	d906      	bls.n	800adee <etharp_find_entry+0x216>
 800ade0:	4b1c      	ldr	r3, [pc, #112]	; (800ae54 <etharp_find_entry+0x27c>)
 800ade2:	f240 1285 	movw	r2, #389	; 0x185
 800ade6:	491f      	ldr	r1, [pc, #124]	; (800ae64 <etharp_find_entry+0x28c>)
 800ade8:	481c      	ldr	r0, [pc, #112]	; (800ae5c <etharp_find_entry+0x284>)
 800adea:	f003 f99b 	bl	800e124 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800adee:	7f3a      	ldrb	r2, [r7, #28]
 800adf0:	4917      	ldr	r1, [pc, #92]	; (800ae50 <etharp_find_entry+0x278>)
 800adf2:	4613      	mov	r3, r2
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	4413      	add	r3, r2
 800adf8:	00db      	lsls	r3, r3, #3
 800adfa:	440b      	add	r3, r1
 800adfc:	3314      	adds	r3, #20
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d006      	beq.n	800ae12 <etharp_find_entry+0x23a>
 800ae04:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <etharp_find_entry+0x27c>)
 800ae06:	f240 1287 	movw	r2, #391	; 0x187
 800ae0a:	4917      	ldr	r1, [pc, #92]	; (800ae68 <etharp_find_entry+0x290>)
 800ae0c:	4813      	ldr	r0, [pc, #76]	; (800ae5c <etharp_find_entry+0x284>)
 800ae0e:	f003 f989 	bl	800e124 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00a      	beq.n	800ae2e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ae18:	7f3a      	ldrb	r2, [r7, #28]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6819      	ldr	r1, [r3, #0]
 800ae1e:	480c      	ldr	r0, [pc, #48]	; (800ae50 <etharp_find_entry+0x278>)
 800ae20:	4613      	mov	r3, r2
 800ae22:	005b      	lsls	r3, r3, #1
 800ae24:	4413      	add	r3, r2
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	4403      	add	r3, r0
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ae2e:	7f3a      	ldrb	r2, [r7, #28]
 800ae30:	4907      	ldr	r1, [pc, #28]	; (800ae50 <etharp_find_entry+0x278>)
 800ae32:	4613      	mov	r3, r2
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	4413      	add	r3, r2
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	440b      	add	r3, r1
 800ae3c:	3312      	adds	r3, #18
 800ae3e:	2200      	movs	r2, #0
 800ae40:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800ae42:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3720      	adds	r7, #32
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20000108 	.word	0x20000108
 800ae54:	08010648 	.word	0x08010648
 800ae58:	08010680 	.word	0x08010680
 800ae5c:	080106c0 	.word	0x080106c0
 800ae60:	080106e8 	.word	0x080106e8
 800ae64:	08010700 	.word	0x08010700
 800ae68:	08010714 	.word	0x08010714

0800ae6c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af02      	add	r7, sp, #8
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae80:	2b06      	cmp	r3, #6
 800ae82:	d006      	beq.n	800ae92 <etharp_update_arp_entry+0x26>
 800ae84:	4b48      	ldr	r3, [pc, #288]	; (800afa8 <etharp_update_arp_entry+0x13c>)
 800ae86:	f240 12ab 	movw	r2, #427	; 0x1ab
 800ae8a:	4948      	ldr	r1, [pc, #288]	; (800afac <etharp_update_arp_entry+0x140>)
 800ae8c:	4848      	ldr	r0, [pc, #288]	; (800afb0 <etharp_update_arp_entry+0x144>)
 800ae8e:	f003 f949 	bl	800e124 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d012      	beq.n	800aebe <etharp_update_arp_entry+0x52>
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00e      	beq.n	800aebe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68f9      	ldr	r1, [r7, #12]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f001 f8da 	bl	800c060 <ip4_addr_isbroadcast_u32>
 800aeac:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d105      	bne.n	800aebe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800aeba:	2be0      	cmp	r3, #224	; 0xe0
 800aebc:	d102      	bne.n	800aec4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800aebe:	f06f 030f 	mvn.w	r3, #15
 800aec2:	e06c      	b.n	800af9e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	4619      	mov	r1, r3
 800aeca:	68b8      	ldr	r0, [r7, #8]
 800aecc:	f7ff fe84 	bl	800abd8 <etharp_find_entry>
 800aed0:	4603      	mov	r3, r0
 800aed2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800aed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	da02      	bge.n	800aee2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800aedc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aee0:	e05d      	b.n	800af9e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800aee2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800aee6:	4933      	ldr	r1, [pc, #204]	; (800afb4 <etharp_update_arp_entry+0x148>)
 800aee8:	4613      	mov	r3, r2
 800aeea:	005b      	lsls	r3, r3, #1
 800aeec:	4413      	add	r3, r2
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	440b      	add	r3, r1
 800aef2:	3314      	adds	r3, #20
 800aef4:	2202      	movs	r2, #2
 800aef6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800aef8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800aefc:	492d      	ldr	r1, [pc, #180]	; (800afb4 <etharp_update_arp_entry+0x148>)
 800aefe:	4613      	mov	r3, r2
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	4413      	add	r3, r2
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	440b      	add	r3, r1
 800af08:	3308      	adds	r3, #8
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800af0e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800af12:	4613      	mov	r3, r2
 800af14:	005b      	lsls	r3, r3, #1
 800af16:	4413      	add	r3, r2
 800af18:	00db      	lsls	r3, r3, #3
 800af1a:	3308      	adds	r3, #8
 800af1c:	4a25      	ldr	r2, [pc, #148]	; (800afb4 <etharp_update_arp_entry+0x148>)
 800af1e:	4413      	add	r3, r2
 800af20:	3304      	adds	r3, #4
 800af22:	2206      	movs	r2, #6
 800af24:	6879      	ldr	r1, [r7, #4]
 800af26:	4618      	mov	r0, r3
 800af28:	f003 f8e9 	bl	800e0fe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800af2c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800af30:	4920      	ldr	r1, [pc, #128]	; (800afb4 <etharp_update_arp_entry+0x148>)
 800af32:	4613      	mov	r3, r2
 800af34:	005b      	lsls	r3, r3, #1
 800af36:	4413      	add	r3, r2
 800af38:	00db      	lsls	r3, r3, #3
 800af3a:	440b      	add	r3, r1
 800af3c:	3312      	adds	r3, #18
 800af3e:	2200      	movs	r2, #0
 800af40:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800af42:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800af46:	491b      	ldr	r1, [pc, #108]	; (800afb4 <etharp_update_arp_entry+0x148>)
 800af48:	4613      	mov	r3, r2
 800af4a:	005b      	lsls	r3, r3, #1
 800af4c:	4413      	add	r3, r2
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	440b      	add	r3, r1
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d021      	beq.n	800af9c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800af58:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800af5c:	4915      	ldr	r1, [pc, #84]	; (800afb4 <etharp_update_arp_entry+0x148>)
 800af5e:	4613      	mov	r3, r2
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	4413      	add	r3, r2
 800af64:	00db      	lsls	r3, r3, #3
 800af66:	440b      	add	r3, r1
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800af6c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800af70:	4910      	ldr	r1, [pc, #64]	; (800afb4 <etharp_update_arp_entry+0x148>)
 800af72:	4613      	mov	r3, r2
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	4413      	add	r3, r2
 800af78:	00db      	lsls	r3, r3, #3
 800af7a:	440b      	add	r3, r1
 800af7c:	2200      	movs	r2, #0
 800af7e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800af86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6939      	ldr	r1, [r7, #16]
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f001 ff07 	bl	800cda4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800af96:	6938      	ldr	r0, [r7, #16]
 800af98:	f7f9 fb92 	bl	80046c0 <pbuf_free>
  }
  return ERR_OK;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	08010648 	.word	0x08010648
 800afac:	08010740 	.word	0x08010740
 800afb0:	080106c0 	.word	0x080106c0
 800afb4:	20000108 	.word	0x20000108

0800afb8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]
 800afc4:	e01f      	b.n	800b006 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800afc6:	7bfa      	ldrb	r2, [r7, #15]
 800afc8:	4912      	ldr	r1, [pc, #72]	; (800b014 <etharp_cleanup_netif+0x5c>)
 800afca:	4613      	mov	r3, r2
 800afcc:	005b      	lsls	r3, r3, #1
 800afce:	4413      	add	r3, r2
 800afd0:	00db      	lsls	r3, r3, #3
 800afd2:	440b      	add	r3, r1
 800afd4:	3314      	adds	r3, #20
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00f      	beq.n	800b000 <etharp_cleanup_netif+0x48>
 800afe0:	7bfa      	ldrb	r2, [r7, #15]
 800afe2:	490c      	ldr	r1, [pc, #48]	; (800b014 <etharp_cleanup_netif+0x5c>)
 800afe4:	4613      	mov	r3, r2
 800afe6:	005b      	lsls	r3, r3, #1
 800afe8:	4413      	add	r3, r2
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	440b      	add	r3, r1
 800afee:	3308      	adds	r3, #8
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d103      	bne.n	800b000 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff fd12 	bl	800aa24 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	3301      	adds	r3, #1
 800b004:	73fb      	strb	r3, [r7, #15]
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	2b09      	cmp	r3, #9
 800b00a:	d9dc      	bls.n	800afc6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b00c:	bf00      	nop
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20000108 	.word	0x20000108

0800b018 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b018:	b5b0      	push	{r4, r5, r7, lr}
 800b01a:	b08a      	sub	sp, #40	; 0x28
 800b01c:	af04      	add	r7, sp, #16
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d107      	bne.n	800b038 <etharp_input+0x20>
 800b028:	4b3d      	ldr	r3, [pc, #244]	; (800b120 <etharp_input+0x108>)
 800b02a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800b02e:	493d      	ldr	r1, [pc, #244]	; (800b124 <etharp_input+0x10c>)
 800b030:	483d      	ldr	r0, [pc, #244]	; (800b128 <etharp_input+0x110>)
 800b032:	f003 f877 	bl	800e124 <iprintf>
 800b036:	e06f      	b.n	800b118 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	881b      	ldrh	r3, [r3, #0]
 800b042:	b29b      	uxth	r3, r3
 800b044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b048:	d10c      	bne.n	800b064 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b04e:	2b06      	cmp	r3, #6
 800b050:	d108      	bne.n	800b064 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b056:	2b04      	cmp	r3, #4
 800b058:	d104      	bne.n	800b064 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	885b      	ldrh	r3, [r3, #2]
 800b05e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b060:	2b08      	cmp	r3, #8
 800b062:	d003      	beq.n	800b06c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7f9 fb2b 	bl	80046c0 <pbuf_free>
    return;
 800b06a:	e055      	b.n	800b118 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	330e      	adds	r3, #14
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	3318      	adds	r3, #24
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	3304      	adds	r3, #4
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d102      	bne.n	800b08c <etharp_input+0x74>
    for_us = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	75fb      	strb	r3, [r7, #23]
 800b08a:	e009      	b.n	800b0a0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	3304      	adds	r3, #4
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	429a      	cmp	r2, r3
 800b096:	bf0c      	ite	eq
 800b098:	2301      	moveq	r3, #1
 800b09a:	2300      	movne	r3, #0
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f103 0208 	add.w	r2, r3, #8
 800b0a6:	7dfb      	ldrb	r3, [r7, #23]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <etharp_input+0x98>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e000      	b.n	800b0b2 <etharp_input+0x9a>
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	f107 010c 	add.w	r1, r7, #12
 800b0b6:	6838      	ldr	r0, [r7, #0]
 800b0b8:	f7ff fed8 	bl	800ae6c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	88db      	ldrh	r3, [r3, #6]
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0c6:	d003      	beq.n	800b0d0 <etharp_input+0xb8>
 800b0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0cc:	d01e      	beq.n	800b10c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800b0ce:	e020      	b.n	800b112 <etharp_input+0xfa>
    if (for_us) {
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d01c      	beq.n	800b110 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	3208      	adds	r2, #8
      etharp_raw(netif,
 800b0f0:	2102      	movs	r1, #2
 800b0f2:	9103      	str	r1, [sp, #12]
 800b0f4:	f107 010c 	add.w	r1, r7, #12
 800b0f8:	9102      	str	r1, [sp, #8]
 800b0fa:	9201      	str	r2, [sp, #4]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	462b      	mov	r3, r5
 800b100:	4622      	mov	r2, r4
 800b102:	4601      	mov	r1, r0
 800b104:	6838      	ldr	r0, [r7, #0]
 800b106:	f000 fae3 	bl	800b6d0 <etharp_raw>
    break;
 800b10a:	e001      	b.n	800b110 <etharp_input+0xf8>
    break;
 800b10c:	bf00      	nop
 800b10e:	e000      	b.n	800b112 <etharp_input+0xfa>
    break;
 800b110:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f7f9 fad4 	bl	80046c0 <pbuf_free>
}
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bdb0      	pop	{r4, r5, r7, pc}
 800b11e:	bf00      	nop
 800b120:	08010648 	.word	0x08010648
 800b124:	08010798 	.word	0x08010798
 800b128:	080106c0 	.word	0x080106c0

0800b12c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af02      	add	r7, sp, #8
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	4613      	mov	r3, r2
 800b138:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b13a:	79fa      	ldrb	r2, [r7, #7]
 800b13c:	4944      	ldr	r1, [pc, #272]	; (800b250 <etharp_output_to_arp_index+0x124>)
 800b13e:	4613      	mov	r3, r2
 800b140:	005b      	lsls	r3, r3, #1
 800b142:	4413      	add	r3, r2
 800b144:	00db      	lsls	r3, r3, #3
 800b146:	440b      	add	r3, r1
 800b148:	3314      	adds	r3, #20
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d806      	bhi.n	800b15e <etharp_output_to_arp_index+0x32>
 800b150:	4b40      	ldr	r3, [pc, #256]	; (800b254 <etharp_output_to_arp_index+0x128>)
 800b152:	f240 22ed 	movw	r2, #749	; 0x2ed
 800b156:	4940      	ldr	r1, [pc, #256]	; (800b258 <etharp_output_to_arp_index+0x12c>)
 800b158:	4840      	ldr	r0, [pc, #256]	; (800b25c <etharp_output_to_arp_index+0x130>)
 800b15a:	f002 ffe3 	bl	800e124 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b15e:	79fa      	ldrb	r2, [r7, #7]
 800b160:	493b      	ldr	r1, [pc, #236]	; (800b250 <etharp_output_to_arp_index+0x124>)
 800b162:	4613      	mov	r3, r2
 800b164:	005b      	lsls	r3, r3, #1
 800b166:	4413      	add	r3, r2
 800b168:	00db      	lsls	r3, r3, #3
 800b16a:	440b      	add	r3, r1
 800b16c:	3314      	adds	r3, #20
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	2b02      	cmp	r3, #2
 800b172:	d153      	bne.n	800b21c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b174:	79fa      	ldrb	r2, [r7, #7]
 800b176:	4936      	ldr	r1, [pc, #216]	; (800b250 <etharp_output_to_arp_index+0x124>)
 800b178:	4613      	mov	r3, r2
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	4413      	add	r3, r2
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	440b      	add	r3, r1
 800b182:	3312      	adds	r3, #18
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b18a:	d919      	bls.n	800b1c0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b18c:	79fa      	ldrb	r2, [r7, #7]
 800b18e:	4613      	mov	r3, r2
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	4413      	add	r3, r2
 800b194:	00db      	lsls	r3, r3, #3
 800b196:	4a2e      	ldr	r2, [pc, #184]	; (800b250 <etharp_output_to_arp_index+0x124>)
 800b198:	4413      	add	r3, r2
 800b19a:	3304      	adds	r3, #4
 800b19c:	4619      	mov	r1, r3
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f000 fb44 	bl	800b82c <etharp_request>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d138      	bne.n	800b21c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b1aa:	79fa      	ldrb	r2, [r7, #7]
 800b1ac:	4928      	ldr	r1, [pc, #160]	; (800b250 <etharp_output_to_arp_index+0x124>)
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	4413      	add	r3, r2
 800b1b4:	00db      	lsls	r3, r3, #3
 800b1b6:	440b      	add	r3, r1
 800b1b8:	3314      	adds	r3, #20
 800b1ba:	2203      	movs	r2, #3
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	e02d      	b.n	800b21c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b1c0:	79fa      	ldrb	r2, [r7, #7]
 800b1c2:	4923      	ldr	r1, [pc, #140]	; (800b250 <etharp_output_to_arp_index+0x124>)
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	4413      	add	r3, r2
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	440b      	add	r3, r1
 800b1ce:	3312      	adds	r3, #18
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b1d6:	d321      	bcc.n	800b21c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b1d8:	79fa      	ldrb	r2, [r7, #7]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	005b      	lsls	r3, r3, #1
 800b1de:	4413      	add	r3, r2
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	4a1b      	ldr	r2, [pc, #108]	; (800b250 <etharp_output_to_arp_index+0x124>)
 800b1e4:	4413      	add	r3, r2
 800b1e6:	1d19      	adds	r1, r3, #4
 800b1e8:	79fa      	ldrb	r2, [r7, #7]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	4413      	add	r3, r2
 800b1f0:	00db      	lsls	r3, r3, #3
 800b1f2:	3308      	adds	r3, #8
 800b1f4:	4a16      	ldr	r2, [pc, #88]	; (800b250 <etharp_output_to_arp_index+0x124>)
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f000 faf3 	bl	800b7e8 <etharp_request_dst>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d109      	bne.n	800b21c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b208:	79fa      	ldrb	r2, [r7, #7]
 800b20a:	4911      	ldr	r1, [pc, #68]	; (800b250 <etharp_output_to_arp_index+0x124>)
 800b20c:	4613      	mov	r3, r2
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	4413      	add	r3, r2
 800b212:	00db      	lsls	r3, r3, #3
 800b214:	440b      	add	r3, r1
 800b216:	3314      	adds	r3, #20
 800b218:	2203      	movs	r2, #3
 800b21a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800b222:	79fa      	ldrb	r2, [r7, #7]
 800b224:	4613      	mov	r3, r2
 800b226:	005b      	lsls	r3, r3, #1
 800b228:	4413      	add	r3, r2
 800b22a:	00db      	lsls	r3, r3, #3
 800b22c:	3308      	adds	r3, #8
 800b22e:	4a08      	ldr	r2, [pc, #32]	; (800b250 <etharp_output_to_arp_index+0x124>)
 800b230:	4413      	add	r3, r2
 800b232:	1d1a      	adds	r2, r3, #4
 800b234:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	4613      	mov	r3, r2
 800b23c:	460a      	mov	r2, r1
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f001 fdaf 	bl	800cda4 <ethernet_output>
 800b246:	4603      	mov	r3, r0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	20000108 	.word	0x20000108
 800b254:	08010648 	.word	0x08010648
 800b258:	080107b8 	.word	0x080107b8
 800b25c:	080106c0 	.word	0x080106c0

0800b260 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b08a      	sub	sp, #40	; 0x28
 800b264:	af02      	add	r7, sp, #8
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d106      	bne.n	800b284 <etharp_output+0x24>
 800b276:	4b69      	ldr	r3, [pc, #420]	; (800b41c <etharp_output+0x1bc>)
 800b278:	f240 321b 	movw	r2, #795	; 0x31b
 800b27c:	4968      	ldr	r1, [pc, #416]	; (800b420 <etharp_output+0x1c0>)
 800b27e:	4869      	ldr	r0, [pc, #420]	; (800b424 <etharp_output+0x1c4>)
 800b280:	f002 ff50 	bl	800e124 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d106      	bne.n	800b298 <etharp_output+0x38>
 800b28a:	4b64      	ldr	r3, [pc, #400]	; (800b41c <etharp_output+0x1bc>)
 800b28c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b290:	4965      	ldr	r1, [pc, #404]	; (800b428 <etharp_output+0x1c8>)
 800b292:	4864      	ldr	r0, [pc, #400]	; (800b424 <etharp_output+0x1c4>)
 800b294:	f002 ff46 	bl	800e124 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d106      	bne.n	800b2ac <etharp_output+0x4c>
 800b29e:	4b5f      	ldr	r3, [pc, #380]	; (800b41c <etharp_output+0x1bc>)
 800b2a0:	f240 321d 	movw	r2, #797	; 0x31d
 800b2a4:	4961      	ldr	r1, [pc, #388]	; (800b42c <etharp_output+0x1cc>)
 800b2a6:	485f      	ldr	r0, [pc, #380]	; (800b424 <etharp_output+0x1c4>)
 800b2a8:	f002 ff3c 	bl	800e124 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68f9      	ldr	r1, [r7, #12]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f000 fed4 	bl	800c060 <ip4_addr_isbroadcast_u32>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d002      	beq.n	800b2c4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b2be:	4b5c      	ldr	r3, [pc, #368]	; (800b430 <etharp_output+0x1d0>)
 800b2c0:	61fb      	str	r3, [r7, #28]
 800b2c2:	e09b      	b.n	800b3fc <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2cc:	2be0      	cmp	r3, #224	; 0xe0
 800b2ce:	d118      	bne.n	800b302 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b2d8:	235e      	movs	r3, #94	; 0x5e
 800b2da:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	3302      	adds	r3, #2
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	3303      	adds	r3, #3
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b2fa:	f107 0310 	add.w	r3, r7, #16
 800b2fe:	61fb      	str	r3, [r7, #28]
 800b300:	e07c      	b.n	800b3fc <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	3304      	adds	r3, #4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	405a      	eors	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3308      	adds	r3, #8
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4013      	ands	r3, r2
 800b316:	2b00      	cmp	r3, #0
 800b318:	d012      	beq.n	800b340 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b320:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b324:	4293      	cmp	r3, r2
 800b326:	d00b      	beq.n	800b340 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	330c      	adds	r3, #12
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	330c      	adds	r3, #12
 800b336:	61bb      	str	r3, [r7, #24]
 800b338:	e002      	b.n	800b340 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b33a:	f06f 0303 	mvn.w	r3, #3
 800b33e:	e069      	b.n	800b414 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b340:	4b3c      	ldr	r3, [pc, #240]	; (800b434 <etharp_output+0x1d4>)
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	4619      	mov	r1, r3
 800b346:	4a3c      	ldr	r2, [pc, #240]	; (800b438 <etharp_output+0x1d8>)
 800b348:	460b      	mov	r3, r1
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	440b      	add	r3, r1
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	4413      	add	r3, r2
 800b352:	3314      	adds	r3, #20
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	2b01      	cmp	r3, #1
 800b358:	d917      	bls.n	800b38a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	4b35      	ldr	r3, [pc, #212]	; (800b434 <etharp_output+0x1d4>)
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	4934      	ldr	r1, [pc, #208]	; (800b438 <etharp_output+0x1d8>)
 800b366:	4603      	mov	r3, r0
 800b368:	005b      	lsls	r3, r3, #1
 800b36a:	4403      	add	r3, r0
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	440b      	add	r3, r1
 800b370:	3304      	adds	r3, #4
 800b372:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b374:	429a      	cmp	r2, r3
 800b376:	d108      	bne.n	800b38a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b378:	4b2e      	ldr	r3, [pc, #184]	; (800b434 <etharp_output+0x1d4>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	68b9      	ldr	r1, [r7, #8]
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f7ff fed3 	bl	800b12c <etharp_output_to_arp_index>
 800b386:	4603      	mov	r3, r0
 800b388:	e044      	b.n	800b414 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b38a:	2300      	movs	r3, #0
 800b38c:	75fb      	strb	r3, [r7, #23]
 800b38e:	e02a      	b.n	800b3e6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b390:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b394:	4928      	ldr	r1, [pc, #160]	; (800b438 <etharp_output+0x1d8>)
 800b396:	4613      	mov	r3, r2
 800b398:	005b      	lsls	r3, r3, #1
 800b39a:	4413      	add	r3, r2
 800b39c:	00db      	lsls	r3, r3, #3
 800b39e:	440b      	add	r3, r1
 800b3a0:	3314      	adds	r3, #20
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d918      	bls.n	800b3da <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	6819      	ldr	r1, [r3, #0]
 800b3ac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b3b0:	4821      	ldr	r0, [pc, #132]	; (800b438 <etharp_output+0x1d8>)
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	005b      	lsls	r3, r3, #1
 800b3b6:	4413      	add	r3, r2
 800b3b8:	00db      	lsls	r3, r3, #3
 800b3ba:	4403      	add	r3, r0
 800b3bc:	3304      	adds	r3, #4
 800b3be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b3c0:	4299      	cmp	r1, r3
 800b3c2:	d10a      	bne.n	800b3da <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800b3c4:	7dfa      	ldrb	r2, [r7, #23]
 800b3c6:	4b1b      	ldr	r3, [pc, #108]	; (800b434 <etharp_output+0x1d4>)
 800b3c8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff feab 	bl	800b12c <etharp_output_to_arp_index>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	e01c      	b.n	800b414 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	75fb      	strb	r3, [r7, #23]
 800b3e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3ea:	2b09      	cmp	r3, #9
 800b3ec:	ddd0      	ble.n	800b390 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	69b9      	ldr	r1, [r7, #24]
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f000 f822 	bl	800b43c <etharp_query>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	e00b      	b.n	800b414 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800b402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	68b9      	ldr	r1, [r7, #8]
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f001 fcc9 	bl	800cda4 <ethernet_output>
 800b412:	4603      	mov	r3, r0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3720      	adds	r7, #32
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	08010648 	.word	0x08010648
 800b420:	08010798 	.word	0x08010798
 800b424:	080106c0 	.word	0x080106c0
 800b428:	080107e8 	.word	0x080107e8
 800b42c:	08010788 	.word	0x08010788
 800b430:	08010ed8 	.word	0x08010ed8
 800b434:	200001f8 	.word	0x200001f8
 800b438:	20000108 	.word	0x20000108

0800b43c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08c      	sub	sp, #48	; 0x30
 800b440:	af02      	add	r7, sp, #8
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3325      	adds	r3, #37	; 0x25
 800b44c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b44e:	23ff      	movs	r3, #255	; 0xff
 800b450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68f9      	ldr	r1, [r7, #12]
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 fdfe 	bl	800c060 <ip4_addr_isbroadcast_u32>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10c      	bne.n	800b484 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b472:	2be0      	cmp	r3, #224	; 0xe0
 800b474:	d006      	beq.n	800b484 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d003      	beq.n	800b484 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d102      	bne.n	800b48a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b484:	f06f 030f 	mvn.w	r3, #15
 800b488:	e10f      	b.n	800b6aa <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	2101      	movs	r1, #1
 800b48e:	68b8      	ldr	r0, [r7, #8]
 800b490:	f7ff fba2 	bl	800abd8 <etharp_find_entry>
 800b494:	4603      	mov	r3, r0
 800b496:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800b498:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	da02      	bge.n	800b4a6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800b4a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4a4:	e101      	b.n	800b6aa <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b4a6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b4aa:	4982      	ldr	r1, [pc, #520]	; (800b6b4 <etharp_query+0x278>)
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	005b      	lsls	r3, r3, #1
 800b4b0:	4413      	add	r3, r2
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	440b      	add	r3, r1
 800b4b6:	3314      	adds	r3, #20
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d117      	bne.n	800b4ee <etharp_query+0xb2>
    is_new_entry = 1;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b4c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b4c6:	497b      	ldr	r1, [pc, #492]	; (800b6b4 <etharp_query+0x278>)
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	4413      	add	r3, r2
 800b4ce:	00db      	lsls	r3, r3, #3
 800b4d0:	440b      	add	r3, r1
 800b4d2:	3314      	adds	r3, #20
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b4d8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b4dc:	4975      	ldr	r1, [pc, #468]	; (800b6b4 <etharp_query+0x278>)
 800b4de:	4613      	mov	r3, r2
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	4413      	add	r3, r2
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	440b      	add	r3, r1
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b4ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b4f2:	4970      	ldr	r1, [pc, #448]	; (800b6b4 <etharp_query+0x278>)
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	4413      	add	r3, r2
 800b4fa:	00db      	lsls	r3, r3, #3
 800b4fc:	440b      	add	r3, r1
 800b4fe:	3314      	adds	r3, #20
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d012      	beq.n	800b52c <etharp_query+0xf0>
 800b506:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b50a:	496a      	ldr	r1, [pc, #424]	; (800b6b4 <etharp_query+0x278>)
 800b50c:	4613      	mov	r3, r2
 800b50e:	005b      	lsls	r3, r3, #1
 800b510:	4413      	add	r3, r2
 800b512:	00db      	lsls	r3, r3, #3
 800b514:	440b      	add	r3, r1
 800b516:	3314      	adds	r3, #20
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d806      	bhi.n	800b52c <etharp_query+0xf0>
 800b51e:	4b66      	ldr	r3, [pc, #408]	; (800b6b8 <etharp_query+0x27c>)
 800b520:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b524:	4965      	ldr	r1, [pc, #404]	; (800b6bc <etharp_query+0x280>)
 800b526:	4866      	ldr	r0, [pc, #408]	; (800b6c0 <etharp_query+0x284>)
 800b528:	f002 fdfc 	bl	800e124 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b52c:	6a3b      	ldr	r3, [r7, #32]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d102      	bne.n	800b538 <etharp_query+0xfc>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10c      	bne.n	800b552 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b538:	68b9      	ldr	r1, [r7, #8]
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f000 f976 	bl	800b82c <etharp_request>
 800b540:	4603      	mov	r3, r0
 800b542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d102      	bne.n	800b552 <etharp_query+0x116>
      return result;
 800b54c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b550:	e0ab      	b.n	800b6aa <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d106      	bne.n	800b566 <etharp_query+0x12a>
 800b558:	4b57      	ldr	r3, [pc, #348]	; (800b6b8 <etharp_query+0x27c>)
 800b55a:	f240 32db 	movw	r2, #987	; 0x3db
 800b55e:	4959      	ldr	r1, [pc, #356]	; (800b6c4 <etharp_query+0x288>)
 800b560:	4857      	ldr	r0, [pc, #348]	; (800b6c0 <etharp_query+0x284>)
 800b562:	f002 fddf 	bl	800e124 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b566:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b56a:	4952      	ldr	r1, [pc, #328]	; (800b6b4 <etharp_query+0x278>)
 800b56c:	4613      	mov	r3, r2
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	4413      	add	r3, r2
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	440b      	add	r3, r1
 800b576:	3314      	adds	r3, #20
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d919      	bls.n	800b5b2 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800b57e:	7cfa      	ldrb	r2, [r7, #19]
 800b580:	4b51      	ldr	r3, [pc, #324]	; (800b6c8 <etharp_query+0x28c>)
 800b582:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b584:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b588:	4613      	mov	r3, r2
 800b58a:	005b      	lsls	r3, r3, #1
 800b58c:	4413      	add	r3, r2
 800b58e:	00db      	lsls	r3, r3, #3
 800b590:	3308      	adds	r3, #8
 800b592:	4a48      	ldr	r2, [pc, #288]	; (800b6b4 <etharp_query+0x278>)
 800b594:	4413      	add	r3, r2
 800b596:	1d1a      	adds	r2, r3, #4
 800b598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f001 fbfd 	bl	800cda4 <ethernet_output>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5b0:	e079      	b.n	800b6a6 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b5b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b5b6:	493f      	ldr	r1, [pc, #252]	; (800b6b4 <etharp_query+0x278>)
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	4413      	add	r3, r2
 800b5be:	00db      	lsls	r3, r3, #3
 800b5c0:	440b      	add	r3, r1
 800b5c2:	3314      	adds	r3, #20
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d16d      	bne.n	800b6a6 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b5d2:	e01a      	b.n	800b60a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	895a      	ldrh	r2, [r3, #10]
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	891b      	ldrh	r3, [r3, #8]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d10a      	bne.n	800b5f6 <etharp_query+0x1ba>
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d006      	beq.n	800b5f6 <etharp_query+0x1ba>
 800b5e8:	4b33      	ldr	r3, [pc, #204]	; (800b6b8 <etharp_query+0x27c>)
 800b5ea:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800b5ee:	4937      	ldr	r1, [pc, #220]	; (800b6cc <etharp_query+0x290>)
 800b5f0:	4833      	ldr	r0, [pc, #204]	; (800b6c0 <etharp_query+0x284>)
 800b5f2:	f002 fd97 	bl	800e124 <iprintf>
      if (p->type != PBUF_ROM) {
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	7b1b      	ldrb	r3, [r3, #12]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d002      	beq.n	800b604 <etharp_query+0x1c8>
        copy_needed = 1;
 800b5fe:	2301      	movs	r3, #1
 800b600:	61bb      	str	r3, [r7, #24]
        break;
 800b602:	e005      	b.n	800b610 <etharp_query+0x1d4>
      }
      p = p->next;
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1e1      	bne.n	800b5d4 <etharp_query+0x198>
    }
    if (copy_needed) {
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d017      	beq.n	800b646 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	891b      	ldrh	r3, [r3, #8]
 800b61a:	2200      	movs	r2, #0
 800b61c:	4619      	mov	r1, r3
 800b61e:	2002      	movs	r0, #2
 800b620:	f7f8 fcdc 	bl	8003fdc <pbuf_alloc>
 800b624:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d011      	beq.n	800b650 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800b62c:	6879      	ldr	r1, [r7, #4]
 800b62e:	69f8      	ldr	r0, [r7, #28]
 800b630:	f7f9 f97a 	bl	8004928 <pbuf_copy>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <etharp_query+0x214>
          pbuf_free(p);
 800b63a:	69f8      	ldr	r0, [r7, #28]
 800b63c:	f7f9 f840 	bl	80046c0 <pbuf_free>
          p = NULL;
 800b640:	2300      	movs	r3, #0
 800b642:	61fb      	str	r3, [r7, #28]
 800b644:	e004      	b.n	800b650 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b64a:	69f8      	ldr	r0, [r7, #28]
 800b64c:	f7f9 f8e4 	bl	8004818 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d024      	beq.n	800b6a0 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b656:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b65a:	4916      	ldr	r1, [pc, #88]	; (800b6b4 <etharp_query+0x278>)
 800b65c:	4613      	mov	r3, r2
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	4413      	add	r3, r2
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	440b      	add	r3, r1
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00b      	beq.n	800b684 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800b66c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b670:	4910      	ldr	r1, [pc, #64]	; (800b6b4 <etharp_query+0x278>)
 800b672:	4613      	mov	r3, r2
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	4413      	add	r3, r2
 800b678:	00db      	lsls	r3, r3, #3
 800b67a:	440b      	add	r3, r1
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4618      	mov	r0, r3
 800b680:	f7f9 f81e 	bl	80046c0 <pbuf_free>
      }
      arp_table[i].q = p;
 800b684:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b688:	490a      	ldr	r1, [pc, #40]	; (800b6b4 <etharp_query+0x278>)
 800b68a:	4613      	mov	r3, r2
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	4413      	add	r3, r2
 800b690:	00db      	lsls	r3, r3, #3
 800b692:	440b      	add	r3, r1
 800b694:	69fa      	ldr	r2, [r7, #28]
 800b696:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b698:	2300      	movs	r3, #0
 800b69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b69e:	e002      	b.n	800b6a6 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b6a0:	23ff      	movs	r3, #255	; 0xff
 800b6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b6a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3728      	adds	r7, #40	; 0x28
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000108 	.word	0x20000108
 800b6b8:	08010648 	.word	0x08010648
 800b6bc:	080107f4 	.word	0x080107f4
 800b6c0:	080106c0 	.word	0x080106c0
 800b6c4:	080107e8 	.word	0x080107e8
 800b6c8:	200001f8 	.word	0x200001f8
 800b6cc:	0801081c 	.word	0x0801081c

0800b6d0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08a      	sub	sp, #40	; 0x28
 800b6d4:	af02      	add	r7, sp, #8
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d106      	bne.n	800b6f6 <etharp_raw+0x26>
 800b6e8:	4b3a      	ldr	r3, [pc, #232]	; (800b7d4 <etharp_raw+0x104>)
 800b6ea:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800b6ee:	493a      	ldr	r1, [pc, #232]	; (800b7d8 <etharp_raw+0x108>)
 800b6f0:	483a      	ldr	r0, [pc, #232]	; (800b7dc <etharp_raw+0x10c>)
 800b6f2:	f002 fd17 	bl	800e124 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	211c      	movs	r1, #28
 800b6fa:	2002      	movs	r0, #2
 800b6fc:	f7f8 fc6e 	bl	8003fdc <pbuf_alloc>
 800b700:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b708:	f04f 33ff 	mov.w	r3, #4294967295
 800b70c:	e05d      	b.n	800b7ca <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	895b      	ldrh	r3, [r3, #10]
 800b712:	2b1b      	cmp	r3, #27
 800b714:	d806      	bhi.n	800b724 <etharp_raw+0x54>
 800b716:	4b2f      	ldr	r3, [pc, #188]	; (800b7d4 <etharp_raw+0x104>)
 800b718:	f240 4264 	movw	r2, #1124	; 0x464
 800b71c:	4930      	ldr	r1, [pc, #192]	; (800b7e0 <etharp_raw+0x110>)
 800b71e:	482f      	ldr	r0, [pc, #188]	; (800b7dc <etharp_raw+0x10c>)
 800b720:	f002 fd00 	bl	800e124 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b72a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7f7 fea2 	bl	8003476 <lwip_htons>
 800b732:	4603      	mov	r3, r0
 800b734:	461a      	mov	r2, r3
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b740:	2b06      	cmp	r3, #6
 800b742:	d006      	beq.n	800b752 <etharp_raw+0x82>
 800b744:	4b23      	ldr	r3, [pc, #140]	; (800b7d4 <etharp_raw+0x104>)
 800b746:	f240 426b 	movw	r2, #1131	; 0x46b
 800b74a:	4926      	ldr	r1, [pc, #152]	; (800b7e4 <etharp_raw+0x114>)
 800b74c:	4823      	ldr	r0, [pc, #140]	; (800b7dc <etharp_raw+0x10c>)
 800b74e:	f002 fce9 	bl	800e124 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	3308      	adds	r3, #8
 800b756:	2206      	movs	r2, #6
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f002 fccf 	bl	800e0fe <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	3312      	adds	r3, #18
 800b764:	2206      	movs	r2, #6
 800b766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b768:	4618      	mov	r0, r3
 800b76a:	f002 fcc8 	bl	800e0fe <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	330e      	adds	r3, #14
 800b772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b774:	6812      	ldr	r2, [r2, #0]
 800b776:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	3318      	adds	r3, #24
 800b77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77e:	6812      	ldr	r2, [r2, #0]
 800b780:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
 800b788:	2200      	movs	r2, #0
 800b78a:	f042 0201 	orr.w	r2, r2, #1
 800b78e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2200      	movs	r2, #0
 800b794:	f042 0208 	orr.w	r2, r2, #8
 800b798:	709a      	strb	r2, [r3, #2]
 800b79a:	2200      	movs	r2, #0
 800b79c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	2206      	movs	r2, #6
 800b7a2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2204      	movs	r2, #4
 800b7a8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b7aa:	f640 0306 	movw	r3, #2054	; 0x806
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	69b9      	ldr	r1, [r7, #24]
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f001 faf4 	bl	800cda4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b7bc:	69b8      	ldr	r0, [r7, #24]
 800b7be:	f7f8 ff7f 	bl	80046c0 <pbuf_free>
  p = NULL;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b7c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3720      	adds	r7, #32
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	08010648 	.word	0x08010648
 800b7d8:	08010798 	.word	0x08010798
 800b7dc:	080106c0 	.word	0x080106c0
 800b7e0:	08010838 	.word	0x08010838
 800b7e4:	0801086c 	.word	0x0801086c

0800b7e8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af04      	add	r7, sp, #16
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b804:	2201      	movs	r2, #1
 800b806:	9203      	str	r2, [sp, #12]
 800b808:	68ba      	ldr	r2, [r7, #8]
 800b80a:	9202      	str	r2, [sp, #8]
 800b80c:	4a06      	ldr	r2, [pc, #24]	; (800b828 <etharp_request_dst+0x40>)
 800b80e:	9201      	str	r2, [sp, #4]
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	4603      	mov	r3, r0
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f7ff ff5a 	bl	800b6d0 <etharp_raw>
 800b81c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	08010ee0 	.word	0x08010ee0

0800b82c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b836:	4a05      	ldr	r2, [pc, #20]	; (800b84c <etharp_request+0x20>)
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7ff ffd4 	bl	800b7e8 <etharp_request_dst>
 800b840:	4603      	mov	r3, r0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	08010ed8 	.word	0x08010ed8

0800b850 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08e      	sub	sp, #56	; 0x38
 800b854:	af04      	add	r7, sp, #16
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b85a:	4b7a      	ldr	r3, [pc, #488]	; (800ba44 <icmp_input+0x1f4>)
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	b29b      	uxth	r3, r3
 800b866:	f003 030f 	and.w	r3, r3, #15
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800b870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b872:	2b13      	cmp	r3, #19
 800b874:	f240 80d1 	bls.w	800ba1a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	895b      	ldrh	r3, [r3, #10]
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	f240 80ce 	bls.w	800ba1e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b88c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 80bb 	beq.w	800ba0c <icmp_input+0x1bc>
 800b896:	2b08      	cmp	r3, #8
 800b898:	f040 80bb 	bne.w	800ba12 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800b89c:	4b6a      	ldr	r3, [pc, #424]	; (800ba48 <icmp_input+0x1f8>)
 800b89e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b8a0:	4b68      	ldr	r3, [pc, #416]	; (800ba44 <icmp_input+0x1f4>)
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8a8:	2be0      	cmp	r3, #224	; 0xe0
 800b8aa:	f000 80bf 	beq.w	800ba2c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b8ae:	4b65      	ldr	r3, [pc, #404]	; (800ba44 <icmp_input+0x1f4>)
 800b8b0:	695a      	ldr	r2, [r3, #20]
 800b8b2:	4b64      	ldr	r3, [pc, #400]	; (800ba44 <icmp_input+0x1f4>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	f000 fbd1 	bl	800c060 <ip4_addr_isbroadcast_u32>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f040 80b5 	bne.w	800ba30 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	891b      	ldrh	r3, [r3, #8]
 800b8ca:	2b07      	cmp	r3, #7
 800b8cc:	f240 80a9 	bls.w	800ba22 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800b8d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b8d2:	330e      	adds	r3, #14
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	b21b      	sxth	r3, r3
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7f8 fecc 	bl	8004678 <pbuf_header>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d046      	beq.n	800b974 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	891a      	ldrh	r2, [r3, #8]
 800b8ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b8ec:	4413      	add	r3, r2
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	2002      	movs	r0, #2
 800b8f6:	f7f8 fb71 	bl	8003fdc <pbuf_alloc>
 800b8fa:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f000 8098 	beq.w	800ba34 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	895b      	ldrh	r3, [r3, #10]
 800b908:	461a      	mov	r2, r3
 800b90a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b90c:	3308      	adds	r3, #8
 800b90e:	429a      	cmp	r2, r3
 800b910:	d203      	bcs.n	800b91a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800b912:	69b8      	ldr	r0, [r7, #24]
 800b914:	f7f8 fed4 	bl	80046c0 <pbuf_free>
        goto icmperr;
 800b918:	e08d      	b.n	800ba36 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b922:	4618      	mov	r0, r3
 800b924:	f002 fbeb 	bl	800e0fe <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800b928:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b92a:	425b      	negs	r3, r3
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	b21b      	sxth	r3, r3
 800b930:	4619      	mov	r1, r3
 800b932:	69b8      	ldr	r0, [r7, #24]
 800b934:	f7f8 fea0 	bl	8004678 <pbuf_header>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d009      	beq.n	800b952 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b93e:	4b43      	ldr	r3, [pc, #268]	; (800ba4c <icmp_input+0x1fc>)
 800b940:	22af      	movs	r2, #175	; 0xaf
 800b942:	4943      	ldr	r1, [pc, #268]	; (800ba50 <icmp_input+0x200>)
 800b944:	4843      	ldr	r0, [pc, #268]	; (800ba54 <icmp_input+0x204>)
 800b946:	f002 fbed 	bl	800e124 <iprintf>
        pbuf_free(r);
 800b94a:	69b8      	ldr	r0, [r7, #24]
 800b94c:	f7f8 feb8 	bl	80046c0 <pbuf_free>
        goto icmperr;
 800b950:	e071      	b.n	800ba36 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	69b8      	ldr	r0, [r7, #24]
 800b956:	f7f8 ffe7 	bl	8004928 <pbuf_copy>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800b960:	69b8      	ldr	r0, [r7, #24]
 800b962:	f7f8 fead 	bl	80046c0 <pbuf_free>
        goto icmperr;
 800b966:	e066      	b.n	800ba36 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7f8 fea9 	bl	80046c0 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	607b      	str	r3, [r7, #4]
 800b972:	e015      	b.n	800b9a0 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800b974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b976:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800b97a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b97e:	33f2      	adds	r3, #242	; 0xf2
 800b980:	b29b      	uxth	r3, r3
 800b982:	b21b      	sxth	r3, r3
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7f8 fe76 	bl	8004678 <pbuf_header>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d006      	beq.n	800b9a0 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b992:	4b2e      	ldr	r3, [pc, #184]	; (800ba4c <icmp_input+0x1fc>)
 800b994:	22c0      	movs	r2, #192	; 0xc0
 800b996:	4930      	ldr	r1, [pc, #192]	; (800ba58 <icmp_input+0x208>)
 800b998:	482e      	ldr	r0, [pc, #184]	; (800ba54 <icmp_input+0x204>)
 800b99a:	f002 fbc3 	bl	800e124 <iprintf>
        goto icmperr;
 800b99e:	e04a      	b.n	800ba36 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800b9a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7f8 fe63 	bl	8004678 <pbuf_header>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d12b      	bne.n	800ba10 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b9c6:	4b1f      	ldr	r3, [pc, #124]	; (800ba44 <icmp_input+0x1f4>)
 800b9c8:	691a      	ldr	r2, [r3, #16]
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	709a      	strb	r2, [r3, #2]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	22ff      	movs	r2, #255	; 0xff
 800b9e2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	729a      	strb	r2, [r3, #10]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	9302      	str	r3, [sp, #8]
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	9301      	str	r3, [sp, #4]
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	23ff      	movs	r3, #255	; 0xff
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	69f9      	ldr	r1, [r7, #28]
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 fa5b 	bl	800bebc <ip4_output_if>
 800ba06:	4603      	mov	r3, r0
 800ba08:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800ba0a:	e001      	b.n	800ba10 <icmp_input+0x1c0>
    break;
 800ba0c:	bf00      	nop
 800ba0e:	e000      	b.n	800ba12 <icmp_input+0x1c2>
    break;
 800ba10:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7f8 fe54 	bl	80046c0 <pbuf_free>
  return;
 800ba18:	e011      	b.n	800ba3e <icmp_input+0x1ee>
    goto lenerr;
 800ba1a:	bf00      	nop
 800ba1c:	e002      	b.n	800ba24 <icmp_input+0x1d4>
    goto lenerr;
 800ba1e:	bf00      	nop
 800ba20:	e000      	b.n	800ba24 <icmp_input+0x1d4>
      goto lenerr;
 800ba22:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7f8 fe4b 	bl	80046c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ba2a:	e008      	b.n	800ba3e <icmp_input+0x1ee>
      goto icmperr;
 800ba2c:	bf00      	nop
 800ba2e:	e002      	b.n	800ba36 <icmp_input+0x1e6>
      goto icmperr;
 800ba30:	bf00      	nop
 800ba32:	e000      	b.n	800ba36 <icmp_input+0x1e6>
        goto icmperr;
 800ba34:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7f8 fe42 	bl	80046c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ba3c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ba3e:	3728      	adds	r7, #40	; 0x28
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	20000218 	.word	0x20000218
 800ba48:	2000022c 	.word	0x2000022c
 800ba4c:	080108b0 	.word	0x080108b0
 800ba50:	080108e8 	.word	0x080108e8
 800ba54:	08010920 	.word	0x08010920
 800ba58:	08010948 	.word	0x08010948

0800ba5c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	2103      	movs	r1, #3
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 f814 	bl	800ba9c <icmp_send_response>
}
 800ba74:	bf00      	nop
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ba88:	78fb      	ldrb	r3, [r7, #3]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	210b      	movs	r1, #11
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f804 	bl	800ba9c <icmp_send_response>
}
 800ba94:	bf00      	nop
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b08c      	sub	sp, #48	; 0x30
 800baa0:	af04      	add	r7, sp, #16
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	460b      	mov	r3, r1
 800baa6:	70fb      	strb	r3, [r7, #3]
 800baa8:	4613      	mov	r3, r2
 800baaa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800baac:	2200      	movs	r2, #0
 800baae:	2124      	movs	r1, #36	; 0x24
 800bab0:	2001      	movs	r0, #1
 800bab2:	f7f8 fa93 	bl	8003fdc <pbuf_alloc>
 800bab6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d04c      	beq.n	800bb58 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	895b      	ldrh	r3, [r3, #10]
 800bac2:	2b23      	cmp	r3, #35	; 0x23
 800bac4:	d806      	bhi.n	800bad4 <icmp_send_response+0x38>
 800bac6:	4b26      	ldr	r3, [pc, #152]	; (800bb60 <icmp_send_response+0xc4>)
 800bac8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800bacc:	4925      	ldr	r1, [pc, #148]	; (800bb64 <icmp_send_response+0xc8>)
 800bace:	4826      	ldr	r0, [pc, #152]	; (800bb68 <icmp_send_response+0xcc>)
 800bad0:	f002 fb28 	bl	800e124 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	78fa      	ldrb	r2, [r7, #3]
 800bae4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	78ba      	ldrb	r2, [r7, #2]
 800baea:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2200      	movs	r2, #0
 800baf0:	711a      	strb	r2, [r3, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	2200      	movs	r2, #0
 800bafa:	719a      	strb	r2, [r3, #6]
 800bafc:	2200      	movs	r2, #0
 800bafe:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f103 0008 	add.w	r0, r3, #8
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	221c      	movs	r2, #28
 800bb0e:	4619      	mov	r1, r3
 800bb10:	f002 faf5 	bl	800e0fe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800bb1a:	f107 030c 	add.w	r3, r7, #12
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 f824 	bl	800bb6c <ip4_route>
 800bb24:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d011      	beq.n	800bb50 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	709a      	strb	r2, [r3, #2]
 800bb32:	2200      	movs	r2, #0
 800bb34:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800bb36:	f107 020c 	add.w	r2, r7, #12
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	9302      	str	r3, [sp, #8]
 800bb3e:	2301      	movs	r3, #1
 800bb40:	9301      	str	r3, [sp, #4]
 800bb42:	2300      	movs	r3, #0
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	23ff      	movs	r3, #255	; 0xff
 800bb48:	2100      	movs	r1, #0
 800bb4a:	69f8      	ldr	r0, [r7, #28]
 800bb4c:	f000 f9b6 	bl	800bebc <ip4_output_if>
  }
  pbuf_free(q);
 800bb50:	69f8      	ldr	r0, [r7, #28]
 800bb52:	f7f8 fdb5 	bl	80046c0 <pbuf_free>
 800bb56:	e000      	b.n	800bb5a <icmp_send_response+0xbe>
    return;
 800bb58:	bf00      	nop
}
 800bb5a:	3720      	adds	r7, #32
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	080108b0 	.word	0x080108b0
 800bb64:	0801097c 	.word	0x0801097c
 800bb68:	08010920 	.word	0x08010920

0800bb6c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800bb74:	4b30      	ldr	r3, [pc, #192]	; (800bc38 <ip4_route+0xcc>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	60fb      	str	r3, [r7, #12]
 800bb7a:	e036      	b.n	800bbea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d02b      	beq.n	800bbe4 <ip4_route+0x78>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bb92:	089b      	lsrs	r3, r3, #2
 800bb94:	f003 0301 	and.w	r3, r3, #1
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d022      	beq.n	800bbe4 <ip4_route+0x78>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3304      	adds	r3, #4
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d01d      	beq.n	800bbe4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	405a      	eors	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4013      	ands	r3, r2
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	e033      	b.n	800bc2c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bbca:	f003 0302 	and.w	r3, r3, #2
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d108      	bne.n	800bbe4 <ip4_route+0x78>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	330c      	adds	r3, #12
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d101      	bne.n	800bbe4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	e023      	b.n	800bc2c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	60fb      	str	r3, [r7, #12]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1c5      	bne.n	800bb7c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bbf0:	4b12      	ldr	r3, [pc, #72]	; (800bc3c <ip4_route+0xd0>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d015      	beq.n	800bc24 <ip4_route+0xb8>
 800bbf8:	4b10      	ldr	r3, [pc, #64]	; (800bc3c <ip4_route+0xd0>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bc00:	f003 0301 	and.w	r3, r3, #1
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00d      	beq.n	800bc24 <ip4_route+0xb8>
 800bc08:	4b0c      	ldr	r3, [pc, #48]	; (800bc3c <ip4_route+0xd0>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bc10:	f003 0304 	and.w	r3, r3, #4
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d005      	beq.n	800bc24 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800bc18:	4b08      	ldr	r3, [pc, #32]	; (800bc3c <ip4_route+0xd0>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bc24:	2300      	movs	r3, #0
 800bc26:	e001      	b.n	800bc2c <ip4_route+0xc0>
  }

  return netif_default;
 800bc28:	4b04      	ldr	r3, [pc, #16]	; (800bc3c <ip4_route+0xd0>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3714      	adds	r7, #20
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	20003738 	.word	0x20003738
 800bc3c:	2000373c 	.word	0x2000373c

0800bc40 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	091b      	lsrs	r3, r3, #4
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	d004      	beq.n	800bc66 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7f8 fd2f 	bl	80046c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	e122      	b.n	800beac <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	f003 030f 	and.w	r3, r3, #15
 800bc70:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800bc72:	897b      	ldrh	r3, [r7, #10]
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	885b      	ldrh	r3, [r3, #2]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7f7 fbf9 	bl	8003476 <lwip_htons>
 800bc84:	4603      	mov	r3, r0
 800bc86:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	891b      	ldrh	r3, [r3, #8]
 800bc8c:	893a      	ldrh	r2, [r7, #8]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d204      	bcs.n	800bc9c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800bc92:	893b      	ldrh	r3, [r7, #8]
 800bc94:	4619      	mov	r1, r3
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7f8 fb9e 	bl	80043d8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	895b      	ldrh	r3, [r3, #10]
 800bca0:	897a      	ldrh	r2, [r7, #10]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d807      	bhi.n	800bcb6 <ip4_input+0x76>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	891b      	ldrh	r3, [r3, #8]
 800bcaa:	893a      	ldrh	r2, [r7, #8]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d802      	bhi.n	800bcb6 <ip4_input+0x76>
 800bcb0:	897b      	ldrh	r3, [r7, #10]
 800bcb2:	2b13      	cmp	r3, #19
 800bcb4:	d804      	bhi.n	800bcc0 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f7f8 fd02 	bl	80046c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	e0f5      	b.n	800beac <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	4a7b      	ldr	r2, [pc, #492]	; (800beb4 <ip4_input+0x274>)
 800bcc6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	4a79      	ldr	r2, [pc, #484]	; (800beb4 <ip4_input+0x274>)
 800bcce:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bcd0:	4b78      	ldr	r3, [pc, #480]	; (800beb4 <ip4_input+0x274>)
 800bcd2:	695b      	ldr	r3, [r3, #20]
 800bcd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcd8:	2be0      	cmp	r3, #224	; 0xe0
 800bcda:	d112      	bne.n	800bd02 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d007      	beq.n	800bcfc <ip4_input+0xbc>
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	3304      	adds	r3, #4
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <ip4_input+0xbc>
      netif = inp;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	613b      	str	r3, [r7, #16]
 800bcfa:	e041      	b.n	800bd80 <ip4_input+0x140>
    } else {
      netif = NULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	613b      	str	r3, [r7, #16]
 800bd00:	e03e      	b.n	800bd80 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800bd02:	2301      	movs	r3, #1
 800bd04:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd10:	f003 0301 	and.w	r3, r3, #1
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d014      	beq.n	800bd44 <ip4_input+0x104>
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00f      	beq.n	800bd44 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bd24:	4b63      	ldr	r3, [pc, #396]	; (800beb4 <ip4_input+0x274>)
 800bd26:	695a      	ldr	r2, [r3, #20]
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d026      	beq.n	800bd80 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bd32:	4b60      	ldr	r3, [pc, #384]	; (800beb4 <ip4_input+0x274>)
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	6939      	ldr	r1, [r7, #16]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 f991 	bl	800c060 <ip4_addr_isbroadcast_u32>
 800bd3e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d11d      	bne.n	800bd80 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00d      	beq.n	800bd66 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800bd4a:	4b5a      	ldr	r3, [pc, #360]	; (800beb4 <ip4_input+0x274>)
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b7f      	cmp	r3, #127	; 0x7f
 800bd52:	d102      	bne.n	800bd5a <ip4_input+0x11a>
          netif = NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	613b      	str	r3, [r7, #16]
          break;
 800bd58:	e012      	b.n	800bd80 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800bd5e:	4b56      	ldr	r3, [pc, #344]	; (800beb8 <ip4_input+0x278>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	613b      	str	r3, [r7, #16]
 800bd64:	e002      	b.n	800bd6c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d102      	bne.n	800bd7a <ip4_input+0x13a>
        netif = netif->next;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1c4      	bne.n	800bd0a <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bd80:	4b4c      	ldr	r3, [pc, #304]	; (800beb4 <ip4_input+0x274>)
 800bd82:	691b      	ldr	r3, [r3, #16]
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 f96a 	bl	800c060 <ip4_addr_isbroadcast_u32>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d105      	bne.n	800bd9e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800bd92:	4b48      	ldr	r3, [pc, #288]	; (800beb4 <ip4_input+0x274>)
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bd9a:	2be0      	cmp	r3, #224	; 0xe0
 800bd9c:	d104      	bne.n	800bda8 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7f8 fc8e 	bl	80046c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	e081      	b.n	800beac <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d104      	bne.n	800bdb8 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7f8 fc86 	bl	80046c0 <pbuf_free>
    return ERR_OK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	e079      	b.n	800beac <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	88db      	ldrh	r3, [r3, #6]
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800bdc4:	4013      	ands	r3, r2
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00b      	beq.n	800bde2 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fc8e 	bl	800c6ec <ip4_reass>
 800bdd0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <ip4_input+0x19c>
      return ERR_OK;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	e067      	b.n	800beac <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800bde2:	4a34      	ldr	r2, [pc, #208]	; (800beb4 <ip4_input+0x274>)
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800bde8:	4a32      	ldr	r2, [pc, #200]	; (800beb4 <ip4_input+0x274>)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800bdee:	4a31      	ldr	r2, [pc, #196]	; (800beb4 <ip4_input+0x274>)
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	f003 030f 	and.w	r3, r3, #15
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	b29a      	uxth	r2, r3
 800be04:	4b2b      	ldr	r3, [pc, #172]	; (800beb4 <ip4_input+0x274>)
 800be06:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800be08:	897b      	ldrh	r3, [r7, #10]
 800be0a:	425b      	negs	r3, r3
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	b21b      	sxth	r3, r3
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7f8 fc30 	bl	8004678 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	7a5b      	ldrb	r3, [r3, #9]
 800be1c:	2b06      	cmp	r3, #6
 800be1e:	d009      	beq.n	800be34 <ip4_input+0x1f4>
 800be20:	2b11      	cmp	r3, #17
 800be22:	d002      	beq.n	800be2a <ip4_input+0x1ea>
 800be24:	2b01      	cmp	r3, #1
 800be26:	d00a      	beq.n	800be3e <ip4_input+0x1fe>
 800be28:	e00e      	b.n	800be48 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f7fe faa7 	bl	800a380 <udp_input>
      break;
 800be32:	e028      	b.n	800be86 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f7fa fb10 	bl	800645c <tcp_input>
      break;
 800be3c:	e023      	b.n	800be86 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7ff fd05 	bl	800b850 <icmp_input>
      break;
 800be46:	e01e      	b.n	800be86 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800be48:	4b1a      	ldr	r3, [pc, #104]	; (800beb4 <ip4_input+0x274>)
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	6939      	ldr	r1, [r7, #16]
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 f906 	bl	800c060 <ip4_addr_isbroadcast_u32>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d112      	bne.n	800be80 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800be5a:	4b16      	ldr	r3, [pc, #88]	; (800beb4 <ip4_input+0x274>)
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800be62:	2be0      	cmp	r3, #224	; 0xe0
 800be64:	d00c      	beq.n	800be80 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800be66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800be6a:	4619      	mov	r1, r3
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f7f8 fc15 	bl	800469c <pbuf_header_force>
        p->payload = iphdr;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800be78:	2102      	movs	r1, #2
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7ff fdee 	bl	800ba5c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7f8 fc1d 	bl	80046c0 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800be86:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <ip4_input+0x274>)
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800be8c:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <ip4_input+0x274>)
 800be8e:	2200      	movs	r2, #0
 800be90:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800be92:	4b08      	ldr	r3, [pc, #32]	; (800beb4 <ip4_input+0x274>)
 800be94:	2200      	movs	r2, #0
 800be96:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800be98:	4b06      	ldr	r3, [pc, #24]	; (800beb4 <ip4_input+0x274>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <ip4_input+0x274>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800bea4:	4b03      	ldr	r3, [pc, #12]	; (800beb4 <ip4_input+0x274>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	20000218 	.word	0x20000218
 800beb8:	20003738 	.word	0x20003738

0800bebc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b08a      	sub	sp, #40	; 0x28
 800bec0:	af04      	add	r7, sp, #16
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d009      	beq.n	800bee8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <ip4_output_if+0x26>
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d102      	bne.n	800bee8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800bee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee4:	3304      	adds	r3, #4
 800bee6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800bee8:	78fa      	ldrb	r2, [r7, #3]
 800beea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beec:	9302      	str	r3, [sp, #8]
 800beee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bef2:	9301      	str	r3, [sp, #4]
 800bef4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	4613      	mov	r3, r2
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	6979      	ldr	r1, [r7, #20]
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f000 f805 	bl	800bf10 <ip4_output_if_src>
 800bf06:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3718      	adds	r7, #24
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b088      	sub	sp, #32
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	89db      	ldrh	r3, [r3, #14]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d006      	beq.n	800bf34 <ip4_output_if_src+0x24>
 800bf26:	4b48      	ldr	r3, [pc, #288]	; (800c048 <ip4_output_if_src+0x138>)
 800bf28:	f240 3233 	movw	r2, #819	; 0x333
 800bf2c:	4947      	ldr	r1, [pc, #284]	; (800c04c <ip4_output_if_src+0x13c>)
 800bf2e:	4848      	ldr	r0, [pc, #288]	; (800c050 <ip4_output_if_src+0x140>)
 800bf30:	f002 f8f8 	bl	800e124 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d060      	beq.n	800bffc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800bf3a:	2314      	movs	r3, #20
 800bf3c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800bf3e:	2114      	movs	r1, #20
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7f8 fb99 	bl	8004678 <pbuf_header>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d002      	beq.n	800bf52 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bf4c:	f06f 0301 	mvn.w	r3, #1
 800bf50:	e075      	b.n	800c03e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	895b      	ldrh	r3, [r3, #10]
 800bf5c:	2b13      	cmp	r3, #19
 800bf5e:	d806      	bhi.n	800bf6e <ip4_output_if_src+0x5e>
 800bf60:	4b39      	ldr	r3, [pc, #228]	; (800c048 <ip4_output_if_src+0x138>)
 800bf62:	f240 3261 	movw	r2, #865	; 0x361
 800bf66:	493b      	ldr	r1, [pc, #236]	; (800c054 <ip4_output_if_src+0x144>)
 800bf68:	4839      	ldr	r0, [pc, #228]	; (800c050 <ip4_output_if_src+0x140>)
 800bf6a:	f002 f8db 	bl	800e124 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	78fa      	ldrb	r2, [r7, #3]
 800bf72:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800bf7a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bf84:	8b7b      	ldrh	r3, [r7, #26]
 800bf86:	089b      	lsrs	r3, r3, #2
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bf9c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	891b      	ldrh	r3, [r3, #8]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7f7 fa67 	bl	8003476 <lwip_htons>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	461a      	mov	r2, r3
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	719a      	strb	r2, [r3, #6]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800bfba:	4b27      	ldr	r3, [pc, #156]	; (800c058 <ip4_output_if_src+0x148>)
 800bfbc:	881b      	ldrh	r3, [r3, #0]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7f7 fa59 	bl	8003476 <lwip_htons>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800bfcc:	4b22      	ldr	r3, [pc, #136]	; (800c058 <ip4_output_if_src+0x148>)
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	4b20      	ldr	r3, [pc, #128]	; (800c058 <ip4_output_if_src+0x148>)
 800bfd6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d104      	bne.n	800bfe8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800bfde:	4b1f      	ldr	r3, [pc, #124]	; (800c05c <ip4_output_if_src+0x14c>)
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	60da      	str	r2, [r3, #12]
 800bfe6:	e003      	b.n	800bff0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	2200      	movs	r2, #0
 800bff4:	729a      	strb	r2, [r3, #10]
 800bff6:	2200      	movs	r2, #0
 800bff8:	72da      	strb	r2, [r3, #11]
 800bffa:	e008      	b.n	800c00e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c008:	f107 0314 	add.w	r3, r7, #20
 800c00c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00c      	beq.n	800c030 <ip4_output_if_src+0x120>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	891a      	ldrh	r2, [r3, #8]
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c01e:	429a      	cmp	r2, r3
 800c020:	d906      	bls.n	800c030 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f000 fd0a 	bl	800ca40 <ip4_frag>
 800c02c:	4603      	mov	r3, r0
 800c02e:	e006      	b.n	800c03e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	68f9      	ldr	r1, [r7, #12]
 800c038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c03a:	4798      	blx	r3
 800c03c:	4603      	mov	r3, r0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3720      	adds	r7, #32
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	080109a8 	.word	0x080109a8
 800c04c:	080109dc 	.word	0x080109dc
 800c050:	080109e8 	.word	0x080109e8
 800c054:	08010a10 	.word	0x08010a10
 800c058:	200001fa 	.word	0x200001fa
 800c05c:	08010ed4 	.word	0x08010ed4

0800c060 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c074:	d002      	beq.n	800c07c <ip4_addr_isbroadcast_u32+0x1c>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d101      	bne.n	800c080 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e02a      	b.n	800c0d6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c086:	f003 0302 	and.w	r3, r3, #2
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d101      	bne.n	800c092 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c08e:	2300      	movs	r3, #0
 800c090:	e021      	b.n	800c0d6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	3304      	adds	r3, #4
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d101      	bne.n	800c0a2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	e019      	b.n	800c0d6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	405a      	eors	r2, r3
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10d      	bne.n	800c0d4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	3308      	adds	r3, #8
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	43da      	mvns	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	3308      	adds	r3, #8
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d101      	bne.n	800c0d4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e000      	b.n	800c0d6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c0d4:	2300      	movs	r3, #0
  }
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c0ee:	4b12      	ldr	r3, [pc, #72]	; (800c138 <ip_reass_tmr+0x54>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c0f4:	e018      	b.n	800c128 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	7fdb      	ldrb	r3, [r3, #31]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00b      	beq.n	800c116 <ip_reass_tmr+0x32>
      r->timer--;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	7fdb      	ldrb	r3, [r3, #31]
 800c102:	3b01      	subs	r3, #1
 800c104:	b2da      	uxtb	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	e008      	b.n	800c128 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c120:	68b9      	ldr	r1, [r7, #8]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f80a 	bl	800c13c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e3      	bne.n	800c0f6 <ip_reass_tmr+0x12>
     }
   }
}
 800c12e:	bf00      	nop
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	200001fc 	.word	0x200001fc

0800c13c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c146:	2300      	movs	r3, #0
 800c148:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d105      	bne.n	800c15e <ip_reass_free_complete_datagram+0x22>
 800c152:	4b45      	ldr	r3, [pc, #276]	; (800c268 <ip_reass_free_complete_datagram+0x12c>)
 800c154:	22ab      	movs	r2, #171	; 0xab
 800c156:	4945      	ldr	r1, [pc, #276]	; (800c26c <ip_reass_free_complete_datagram+0x130>)
 800c158:	4845      	ldr	r0, [pc, #276]	; (800c270 <ip_reass_free_complete_datagram+0x134>)
 800c15a:	f001 ffe3 	bl	800e124 <iprintf>
  if (prev != NULL) {
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00a      	beq.n	800c17a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d005      	beq.n	800c17a <ip_reass_free_complete_datagram+0x3e>
 800c16e:	4b3e      	ldr	r3, [pc, #248]	; (800c268 <ip_reass_free_complete_datagram+0x12c>)
 800c170:	22ad      	movs	r2, #173	; 0xad
 800c172:	4940      	ldr	r1, [pc, #256]	; (800c274 <ip_reass_free_complete_datagram+0x138>)
 800c174:	483e      	ldr	r0, [pc, #248]	; (800c270 <ip_reass_free_complete_datagram+0x134>)
 800c176:	f001 ffd5 	bl	800e124 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	889b      	ldrh	r3, [r3, #4]
 800c186:	b29b      	uxth	r3, r3
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d12a      	bne.n	800c1e2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	6858      	ldr	r0, [r3, #4]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	2214      	movs	r2, #20
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	f001 ffaa 	bl	800e0fe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	69b8      	ldr	r0, [r7, #24]
 800c1ae:	f7ff fc65 	bl	800ba7c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c1b2:	69b8      	ldr	r0, [r7, #24]
 800c1b4:	f7f8 fb18 	bl	80047e8 <pbuf_clen>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c1bc:	8bfa      	ldrh	r2, [r7, #30]
 800c1be:	8a7b      	ldrh	r3, [r7, #18]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1c6:	db05      	blt.n	800c1d4 <ip_reass_free_complete_datagram+0x98>
 800c1c8:	4b27      	ldr	r3, [pc, #156]	; (800c268 <ip_reass_free_complete_datagram+0x12c>)
 800c1ca:	22bc      	movs	r2, #188	; 0xbc
 800c1cc:	492a      	ldr	r1, [pc, #168]	; (800c278 <ip_reass_free_complete_datagram+0x13c>)
 800c1ce:	4828      	ldr	r0, [pc, #160]	; (800c270 <ip_reass_free_complete_datagram+0x134>)
 800c1d0:	f001 ffa8 	bl	800e124 <iprintf>
    pbufs_freed += clen;
 800c1d4:	8bfa      	ldrh	r2, [r7, #30]
 800c1d6:	8a7b      	ldrh	r3, [r7, #18]
 800c1d8:	4413      	add	r3, r2
 800c1da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c1dc:	69b8      	ldr	r0, [r7, #24]
 800c1de:	f7f8 fa6f 	bl	80046c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c1e8:	e01f      	b.n	800c22a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7f8 faf4 	bl	80047e8 <pbuf_clen>
 800c200:	4603      	mov	r3, r0
 800c202:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c204:	8bfa      	ldrh	r2, [r7, #30]
 800c206:	8a7b      	ldrh	r3, [r7, #18]
 800c208:	4413      	add	r3, r2
 800c20a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c20e:	db05      	blt.n	800c21c <ip_reass_free_complete_datagram+0xe0>
 800c210:	4b15      	ldr	r3, [pc, #84]	; (800c268 <ip_reass_free_complete_datagram+0x12c>)
 800c212:	22cc      	movs	r2, #204	; 0xcc
 800c214:	4918      	ldr	r1, [pc, #96]	; (800c278 <ip_reass_free_complete_datagram+0x13c>)
 800c216:	4816      	ldr	r0, [pc, #88]	; (800c270 <ip_reass_free_complete_datagram+0x134>)
 800c218:	f001 ff84 	bl	800e124 <iprintf>
    pbufs_freed += clen;
 800c21c:	8bfa      	ldrh	r2, [r7, #30]
 800c21e:	8a7b      	ldrh	r3, [r7, #18]
 800c220:	4413      	add	r3, r2
 800c222:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f7f8 fa4b 	bl	80046c0 <pbuf_free>
  while (p != NULL) {
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1dc      	bne.n	800c1ea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f8c2 	bl	800c3bc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800c238:	4b10      	ldr	r3, [pc, #64]	; (800c27c <ip_reass_free_complete_datagram+0x140>)
 800c23a:	881b      	ldrh	r3, [r3, #0]
 800c23c:	8bfa      	ldrh	r2, [r7, #30]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d905      	bls.n	800c24e <ip_reass_free_complete_datagram+0x112>
 800c242:	4b09      	ldr	r3, [pc, #36]	; (800c268 <ip_reass_free_complete_datagram+0x12c>)
 800c244:	22d2      	movs	r2, #210	; 0xd2
 800c246:	490e      	ldr	r1, [pc, #56]	; (800c280 <ip_reass_free_complete_datagram+0x144>)
 800c248:	4809      	ldr	r0, [pc, #36]	; (800c270 <ip_reass_free_complete_datagram+0x134>)
 800c24a:	f001 ff6b 	bl	800e124 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800c24e:	4b0b      	ldr	r3, [pc, #44]	; (800c27c <ip_reass_free_complete_datagram+0x140>)
 800c250:	881a      	ldrh	r2, [r3, #0]
 800c252:	8bfb      	ldrh	r3, [r7, #30]
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	b29a      	uxth	r2, r3
 800c258:	4b08      	ldr	r3, [pc, #32]	; (800c27c <ip_reass_free_complete_datagram+0x140>)
 800c25a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c25c:	8bfb      	ldrh	r3, [r7, #30]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3720      	adds	r7, #32
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	08010a40 	.word	0x08010a40
 800c26c:	08010a7c 	.word	0x08010a7c
 800c270:	08010a88 	.word	0x08010a88
 800c274:	08010ab0 	.word	0x08010ab0
 800c278:	08010ac4 	.word	0x08010ac4
 800c27c:	20000200 	.word	0x20000200
 800c280:	08010ae4 	.word	0x08010ae4

0800c284 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08a      	sub	sp, #40	; 0x28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c28e:	2300      	movs	r3, #0
 800c290:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c292:	2300      	movs	r3, #0
 800c294:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c296:	2300      	movs	r3, #0
 800c298:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c2a2:	4b28      	ldr	r3, [pc, #160]	; (800c344 <ip_reass_remove_oldest_datagram+0xc0>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c2a8:	e030      	b.n	800c30c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	695a      	ldr	r2, [r3, #20]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d10c      	bne.n	800c2d0 <ip_reass_remove_oldest_datagram+0x4c>
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b8:	699a      	ldr	r2, [r3, #24]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d106      	bne.n	800c2d0 <ip_reass_remove_oldest_datagram+0x4c>
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c4:	899a      	ldrh	r2, [r3, #12]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	889b      	ldrh	r3, [r3, #4]
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d014      	beq.n	800c2fa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c2d6:	6a3b      	ldr	r3, [r7, #32]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d104      	bne.n	800c2e6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2de:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	61bb      	str	r3, [r7, #24]
 800c2e4:	e009      	b.n	800c2fa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	7fda      	ldrb	r2, [r3, #31]
 800c2ea:	6a3b      	ldr	r3, [r7, #32]
 800c2ec:	7fdb      	ldrb	r3, [r3, #31]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d803      	bhi.n	800c2fa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d001      	beq.n	800c306 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c304:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1cb      	bne.n	800c2aa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d008      	beq.n	800c32a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c318:	69b9      	ldr	r1, [r7, #24]
 800c31a:	6a38      	ldr	r0, [r7, #32]
 800c31c:	f7ff ff0e 	bl	800c13c <ip_reass_free_complete_datagram>
 800c320:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	4413      	add	r3, r2
 800c328:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	429a      	cmp	r2, r3
 800c330:	da02      	bge.n	800c338 <ip_reass_remove_oldest_datagram+0xb4>
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2b01      	cmp	r3, #1
 800c336:	dcac      	bgt.n	800c292 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c338:	697b      	ldr	r3, [r7, #20]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3728      	adds	r7, #40	; 0x28
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	200001fc 	.word	0x200001fc

0800c348 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c352:	2004      	movs	r0, #4
 800c354:	f7f7 fc3e 	bl	8003bd4 <memp_malloc>
 800c358:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d110      	bne.n	800c382 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7ff ff8e 	bl	800c284 <ip_reass_remove_oldest_datagram>
 800c368:	4602      	mov	r2, r0
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	4293      	cmp	r3, r2
 800c36e:	dc03      	bgt.n	800c378 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c370:	2004      	movs	r0, #4
 800c372:	f7f7 fc2f 	bl	8003bd4 <memp_malloc>
 800c376:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800c37e:	2300      	movs	r3, #0
 800c380:	e016      	b.n	800c3b0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c382:	2220      	movs	r2, #32
 800c384:	2100      	movs	r1, #0
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f001 fec4 	bl	800e114 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2203      	movs	r2, #3
 800c390:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c392:	4b09      	ldr	r3, [pc, #36]	; (800c3b8 <ip_reass_enqueue_new_datagram+0x70>)
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c39a:	4a07      	ldr	r2, [pc, #28]	; (800c3b8 <ip_reass_enqueue_new_datagram+0x70>)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	2214      	movs	r2, #20
 800c3a6:	6879      	ldr	r1, [r7, #4]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f001 fea8 	bl	800e0fe <memcpy>
  return ipr;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	200001fc 	.word	0x200001fc

0800c3bc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c3c6:	4b10      	ldr	r3, [pc, #64]	; (800c408 <ip_reass_dequeue_datagram+0x4c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d104      	bne.n	800c3da <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a0c      	ldr	r2, [pc, #48]	; (800c408 <ip_reass_dequeue_datagram+0x4c>)
 800c3d6:	6013      	str	r3, [r2, #0]
 800c3d8:	e00d      	b.n	800c3f6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d106      	bne.n	800c3ee <ip_reass_dequeue_datagram+0x32>
 800c3e0:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <ip_reass_dequeue_datagram+0x50>)
 800c3e2:	f240 1245 	movw	r2, #325	; 0x145
 800c3e6:	490a      	ldr	r1, [pc, #40]	; (800c410 <ip_reass_dequeue_datagram+0x54>)
 800c3e8:	480a      	ldr	r0, [pc, #40]	; (800c414 <ip_reass_dequeue_datagram+0x58>)
 800c3ea:	f001 fe9b 	bl	800e124 <iprintf>
    prev->next = ipr->next;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	2004      	movs	r0, #4
 800c3fa:	f7f7 fc37 	bl	8003c6c <memp_free>
}
 800c3fe:	bf00      	nop
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	200001fc 	.word	0x200001fc
 800c40c:	08010a40 	.word	0x08010a40
 800c410:	08010b00 	.word	0x08010b00
 800c414:	08010a88 	.word	0x08010a88

0800c418 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08c      	sub	sp, #48	; 0x30
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800c424:	2300      	movs	r3, #0
 800c426:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c428:	2301      	movs	r3, #1
 800c42a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	885b      	ldrh	r3, [r3, #2]
 800c436:	b29b      	uxth	r3, r3
 800c438:	4618      	mov	r0, r3
 800c43a:	f7f7 f81c 	bl	8003476 <lwip_htons>
 800c43e:	4603      	mov	r3, r0
 800c440:	461a      	mov	r2, r3
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	b29b      	uxth	r3, r3
 800c448:	f003 030f 	and.w	r3, r3, #15
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	b29b      	uxth	r3, r3
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	88db      	ldrh	r3, [r3, #6]
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7f7 f80a 	bl	8003476 <lwip_htons>
 800c462:	4603      	mov	r3, r0
 800c464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c468:	b29b      	uxth	r3, r3
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	2200      	movs	r2, #0
 800c478:	701a      	strb	r2, [r3, #0]
 800c47a:	2200      	movs	r2, #0
 800c47c:	705a      	strb	r2, [r3, #1]
 800c47e:	2200      	movs	r2, #0
 800c480:	709a      	strb	r2, [r3, #2]
 800c482:	2200      	movs	r2, #0
 800c484:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	8b3a      	ldrh	r2, [r7, #24]
 800c48a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800c48c:	8b3a      	ldrh	r2, [r7, #24]
 800c48e:	8b7b      	ldrh	r3, [r7, #26]
 800c490:	4413      	add	r3, r2
 800c492:	b29a      	uxth	r2, r3
 800c494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c496:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
 800c49e:	e061      	b.n	800c564 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	889b      	ldrh	r3, [r3, #4]
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	889b      	ldrh	r3, [r3, #4]
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d232      	bcs.n	800c51c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ba:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d01f      	beq.n	800c502 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c4:	889b      	ldrh	r3, [r3, #4]
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	88db      	ldrh	r3, [r3, #6]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	f0c0 80e3 	bcc.w	800c69a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800c4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d6:	88db      	ldrh	r3, [r3, #6]
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	889b      	ldrh	r3, [r3, #4]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	f200 80da 	bhi.w	800c69a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ee:	88db      	ldrh	r3, [r3, #6]
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f4:	889b      	ldrh	r3, [r3, #4]
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d037      	beq.n	800c56c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c500:	e034      	b.n	800c56c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800c502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c504:	88db      	ldrh	r3, [r3, #6]
 800c506:	b29a      	uxth	r2, r3
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	889b      	ldrh	r3, [r3, #4]
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	429a      	cmp	r2, r3
 800c510:	f200 80c5 	bhi.w	800c69e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	605a      	str	r2, [r3, #4]
      break;
 800c51a:	e027      	b.n	800c56c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51e:	889b      	ldrh	r3, [r3, #4]
 800c520:	b29a      	uxth	r2, r3
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	889b      	ldrh	r3, [r3, #4]
 800c526:	b29b      	uxth	r3, r3
 800c528:	429a      	cmp	r2, r3
 800c52a:	f000 80ba 	beq.w	800c6a2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c530:	889b      	ldrh	r3, [r3, #4]
 800c532:	b29a      	uxth	r2, r3
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	88db      	ldrh	r3, [r3, #6]
 800c538:	b29b      	uxth	r3, r3
 800c53a:	429a      	cmp	r2, r3
 800c53c:	f0c0 80b3 	bcc.w	800c6a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c542:	2b00      	cmp	r3, #0
 800c544:	d009      	beq.n	800c55a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800c546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c548:	88db      	ldrh	r3, [r3, #6]
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	889b      	ldrh	r3, [r3, #4]
 800c550:	b29b      	uxth	r3, r3
 800c552:	429a      	cmp	r2, r3
 800c554:	d001      	beq.n	800c55a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c566:	2b00      	cmp	r3, #0
 800c568:	d19a      	bne.n	800c4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800c56a:	e000      	b.n	800c56e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800c56c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c570:	2b00      	cmp	r3, #0
 800c572:	d12d      	bne.n	800c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800c574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c576:	2b00      	cmp	r3, #0
 800c578:	d01c      	beq.n	800c5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57c:	88db      	ldrh	r3, [r3, #6]
 800c57e:	b29a      	uxth	r2, r3
 800c580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c582:	889b      	ldrh	r3, [r3, #4]
 800c584:	b29b      	uxth	r3, r3
 800c586:	429a      	cmp	r2, r3
 800c588:	d906      	bls.n	800c598 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800c58a:	4b51      	ldr	r3, [pc, #324]	; (800c6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c58c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800c590:	4950      	ldr	r1, [pc, #320]	; (800c6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c592:	4851      	ldr	r0, [pc, #324]	; (800c6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c594:	f001 fdc6 	bl	800e124 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a0:	88db      	ldrh	r3, [r3, #6]
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a6:	889b      	ldrh	r3, [r3, #4]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d010      	beq.n	800c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	623b      	str	r3, [r7, #32]
 800c5b2:	e00d      	b.n	800c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d006      	beq.n	800c5ca <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800c5bc:	4b44      	ldr	r3, [pc, #272]	; (800c6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c5be:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800c5c2:	4946      	ldr	r1, [pc, #280]	; (800c6dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c5c4:	4844      	ldr	r0, [pc, #272]	; (800c6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c5c6:	f001 fdad 	bl	800e124 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d105      	bne.n	800c5e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	7f9b      	ldrb	r3, [r3, #30]
 800c5da:	f003 0301 	and.w	r3, r3, #1
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d059      	beq.n	800c696 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d04f      	beq.n	800c688 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d006      	beq.n	800c5fe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	889b      	ldrh	r3, [r3, #4]
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d002      	beq.n	800c604 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	623b      	str	r3, [r7, #32]
 800c602:	e041      	b.n	800c688 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c606:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c60e:	e012      	b.n	800c636 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c618:	88db      	ldrh	r3, [r3, #6]
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	889b      	ldrh	r3, [r3, #4]
 800c620:	b29b      	uxth	r3, r3
 800c622:	429a      	cmp	r2, r3
 800c624:	d002      	beq.n	800c62c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	623b      	str	r3, [r7, #32]
            break;
 800c62a:	e007      	b.n	800c63c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800c62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1e9      	bne.n	800c610 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d022      	beq.n	800c688 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d106      	bne.n	800c658 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800c64a:	4b21      	ldr	r3, [pc, #132]	; (800c6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c64c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800c650:	4923      	ldr	r1, [pc, #140]	; (800c6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c652:	4821      	ldr	r0, [pc, #132]	; (800c6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c654:	f001 fd66 	bl	800e124 <iprintf>
          LWIP_ASSERT("sanity check",
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c660:	429a      	cmp	r2, r3
 800c662:	d106      	bne.n	800c672 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800c664:	4b1a      	ldr	r3, [pc, #104]	; (800c6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c666:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c66a:	491d      	ldr	r1, [pc, #116]	; (800c6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c66c:	481a      	ldr	r0, [pc, #104]	; (800c6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c66e:	f001 fd59 	bl	800e124 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d006      	beq.n	800c688 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800c67a:	4b15      	ldr	r3, [pc, #84]	; (800c6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c67c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800c680:	4918      	ldr	r1, [pc, #96]	; (800c6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c682:	4815      	ldr	r0, [pc, #84]	; (800c6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c684:	f001 fd4e 	bl	800e124 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	bf14      	ite	ne
 800c68e:	2301      	movne	r3, #1
 800c690:	2300      	moveq	r3, #0
 800c692:	b2db      	uxtb	r3, r3
 800c694:	e018      	b.n	800c6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c696:	2300      	movs	r3, #0
 800c698:	e016      	b.n	800c6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800c69a:	bf00      	nop
 800c69c:	e004      	b.n	800c6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800c69e:	bf00      	nop
 800c6a0:	e002      	b.n	800c6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800c6a2:	bf00      	nop
 800c6a4:	e000      	b.n	800c6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800c6a6:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800c6a8:	68b8      	ldr	r0, [r7, #8]
 800c6aa:	f7f8 f89d 	bl	80047e8 <pbuf_clen>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	4b0d      	ldr	r3, [pc, #52]	; (800c6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c6b4:	881b      	ldrh	r3, [r3, #0]
 800c6b6:	1a9b      	subs	r3, r3, r2
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	4b0b      	ldr	r3, [pc, #44]	; (800c6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c6bc:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800c6be:	68b8      	ldr	r0, [r7, #8]
 800c6c0:	f7f7 fffe 	bl	80046c0 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c6c4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3730      	adds	r7, #48	; 0x30
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	08010a40 	.word	0x08010a40
 800c6d4:	08010b1c 	.word	0x08010b1c
 800c6d8:	08010a88 	.word	0x08010a88
 800c6dc:	08010b3c 	.word	0x08010b3c
 800c6e0:	08010b74 	.word	0x08010b74
 800c6e4:	08010b84 	.word	0x08010b84
 800c6e8:	20000200 	.word	0x20000200

0800c6ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08e      	sub	sp, #56	; 0x38
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	f003 030f 	and.w	r3, r3, #15
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	2b14      	cmp	r3, #20
 800c706:	f040 8131 	bne.w	800c96c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	88db      	ldrh	r3, [r3, #6]
 800c70e:	b29b      	uxth	r3, r3
 800c710:	4618      	mov	r0, r3
 800c712:	f7f6 feb0 	bl	8003476 <lwip_htons>
 800c716:	4603      	mov	r3, r0
 800c718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	00db      	lsls	r3, r3, #3
 800c720:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c724:	885b      	ldrh	r3, [r3, #2]
 800c726:	b29b      	uxth	r3, r3
 800c728:	4618      	mov	r0, r3
 800c72a:	f7f6 fea4 	bl	8003476 <lwip_htons>
 800c72e:	4603      	mov	r3, r0
 800c730:	461a      	mov	r2, r3
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	b29b      	uxth	r3, r3
 800c738:	f003 030f 	and.w	r3, r3, #15
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	b29b      	uxth	r3, r3
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7f8 f84e 	bl	80047e8 <pbuf_clen>
 800c74c:	4603      	mov	r3, r0
 800c74e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c750:	4b8d      	ldr	r3, [pc, #564]	; (800c988 <ip4_reass+0x29c>)
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	461a      	mov	r2, r3
 800c756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c758:	4413      	add	r3, r2
 800c75a:	2b0a      	cmp	r3, #10
 800c75c:	dd10      	ble.n	800c780 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c75e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c760:	4619      	mov	r1, r3
 800c762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c764:	f7ff fd8e 	bl	800c284 <ip_reass_remove_oldest_datagram>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 8100 	beq.w	800c970 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c770:	4b85      	ldr	r3, [pc, #532]	; (800c988 <ip4_reass+0x29c>)
 800c772:	881b      	ldrh	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c778:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c77a:	2b0a      	cmp	r3, #10
 800c77c:	f300 80f8 	bgt.w	800c970 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c780:	4b82      	ldr	r3, [pc, #520]	; (800c98c <ip4_reass+0x2a0>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	633b      	str	r3, [r7, #48]	; 0x30
 800c786:	e015      	b.n	800c7b4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	695a      	ldr	r2, [r3, #20]
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	429a      	cmp	r2, r3
 800c792:	d10c      	bne.n	800c7ae <ip4_reass+0xc2>
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	699a      	ldr	r2, [r3, #24]
 800c798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d106      	bne.n	800c7ae <ip4_reass+0xc2>
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	899a      	ldrh	r2, [r3, #12]
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	889b      	ldrh	r3, [r3, #4]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d006      	beq.n	800c7bc <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	633b      	str	r3, [r7, #48]	; 0x30
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1e6      	bne.n	800c788 <ip4_reass+0x9c>
 800c7ba:	e000      	b.n	800c7be <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c7bc:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d109      	bne.n	800c7d8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c7c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ca:	f7ff fdbd 	bl	800c348 <ip_reass_enqueue_new_datagram>
 800c7ce:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d11c      	bne.n	800c810 <ip4_reass+0x124>
      goto nullreturn;
 800c7d6:	e0ce      	b.n	800c976 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7da:	88db      	ldrh	r3, [r3, #6]
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7f6 fe49 	bl	8003476 <lwip_htons>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d110      	bne.n	800c810 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	89db      	ldrh	r3, [r3, #14]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7f6 fe3f 	bl	8003476 <lwip_htons>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d006      	beq.n	800c810 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c804:	3308      	adds	r3, #8
 800c806:	2214      	movs	r2, #20
 800c808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c80a:	4618      	mov	r0, r3
 800c80c:	f001 fc77 	bl	800e0fe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	88db      	ldrh	r3, [r3, #6]
 800c814:	b29b      	uxth	r3, r3
 800c816:	f003 0320 	and.w	r3, r3, #32
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	bf0c      	ite	eq
 800c81e:	2301      	moveq	r3, #1
 800c820:	2300      	movne	r3, #0
 800c822:	b2db      	uxtb	r3, r3
 800c824:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00e      	beq.n	800c84a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800c82c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c82e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c830:	4413      	add	r3, r2
 800c832:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c834:	8b7a      	ldrh	r2, [r7, #26]
 800c836:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c838:	429a      	cmp	r2, r3
 800c83a:	f0c0 8099 	bcc.w	800c970 <ip4_reass+0x284>
 800c83e:	8b7b      	ldrh	r3, [r7, #26]
 800c840:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800c844:	4293      	cmp	r3, r2
 800c846:	f200 8093 	bhi.w	800c970 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c84a:	69fa      	ldr	r2, [r7, #28]
 800c84c:	6879      	ldr	r1, [r7, #4]
 800c84e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c850:	f7ff fde2 	bl	800c418 <ip_reass_chain_frag_into_datagram_and_validate>
 800c854:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c85c:	f000 808a 	beq.w	800c974 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c860:	4b49      	ldr	r3, [pc, #292]	; (800c988 <ip4_reass+0x29c>)
 800c862:	881a      	ldrh	r2, [r3, #0]
 800c864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c866:	4413      	add	r3, r2
 800c868:	b29a      	uxth	r2, r3
 800c86a:	4b47      	ldr	r3, [pc, #284]	; (800c988 <ip4_reass+0x29c>)
 800c86c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00d      	beq.n	800c890 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800c874:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c878:	4413      	add	r3, r2
 800c87a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87e:	8a7a      	ldrh	r2, [r7, #18]
 800c880:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	7f9b      	ldrb	r3, [r3, #30]
 800c886:	f043 0301 	orr.w	r3, r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d168      	bne.n	800c968 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	8b9b      	ldrh	r3, [r3, #28]
 800c89a:	3314      	adds	r3, #20
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800c8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b6:	3308      	adds	r3, #8
 800c8b8:	2214      	movs	r2, #20
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8be:	f001 fc1e 	bl	800e0fe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c4:	8b9b      	ldrh	r3, [r3, #28]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7f6 fdd5 	bl	8003476 <lwip_htons>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	719a      	strb	r2, [r3, #6]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	729a      	strb	r2, [r3, #10]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c8ee:	e00e      	b.n	800c90e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800c8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800c8f6:	f06f 0113 	mvn.w	r1, #19
 800c8fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c8fc:	f7f7 febc 	bl	8004678 <pbuf_header>
      pbuf_cat(p, r);
 800c900:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7f7 ffaa 	bl	800485c <pbuf_cat>
      r = iprh->next_pbuf;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800c90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1ed      	bne.n	800c8f0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c914:	4b1d      	ldr	r3, [pc, #116]	; (800c98c <ip4_reass+0x2a0>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d102      	bne.n	800c924 <ip4_reass+0x238>
      ipr_prev = NULL;
 800c91e:	2300      	movs	r3, #0
 800c920:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c922:	e010      	b.n	800c946 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c924:	4b19      	ldr	r3, [pc, #100]	; (800c98c <ip4_reass+0x2a0>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c92a:	e007      	b.n	800c93c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c932:	429a      	cmp	r2, r3
 800c934:	d006      	beq.n	800c944 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1f4      	bne.n	800c92c <ip4_reass+0x240>
 800c942:	e000      	b.n	800c946 <ip4_reass+0x25a>
          break;
 800c944:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c94a:	f7ff fd37 	bl	800c3bc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7f7 ff4a 	bl	80047e8 <pbuf_clen>
 800c954:	4603      	mov	r3, r0
 800c956:	461a      	mov	r2, r3
 800c958:	4b0b      	ldr	r3, [pc, #44]	; (800c988 <ip4_reass+0x29c>)
 800c95a:	881b      	ldrh	r3, [r3, #0]
 800c95c:	1a9b      	subs	r3, r3, r2
 800c95e:	b29a      	uxth	r2, r3
 800c960:	4b09      	ldr	r3, [pc, #36]	; (800c988 <ip4_reass+0x29c>)
 800c962:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	e00a      	b.n	800c97e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c968:	2300      	movs	r3, #0
 800c96a:	e008      	b.n	800c97e <ip4_reass+0x292>
    goto nullreturn;
 800c96c:	bf00      	nop
 800c96e:	e002      	b.n	800c976 <ip4_reass+0x28a>

nullreturn:
 800c970:	bf00      	nop
 800c972:	e000      	b.n	800c976 <ip4_reass+0x28a>
    goto nullreturn;
 800c974:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7f7 fea2 	bl	80046c0 <pbuf_free>
  return NULL;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3738      	adds	r7, #56	; 0x38
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	20000200 	.word	0x20000200
 800c98c:	200001fc 	.word	0x200001fc

0800c990 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800c994:	2005      	movs	r0, #5
 800c996:	f7f7 f91d 	bl	8003bd4 <memp_malloc>
 800c99a:	4603      	mov	r3, r0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d106      	bne.n	800c9bc <ip_frag_free_pbuf_custom_ref+0x1c>
 800c9ae:	4b07      	ldr	r3, [pc, #28]	; (800c9cc <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c9b0:	f240 22ae 	movw	r2, #686	; 0x2ae
 800c9b4:	4906      	ldr	r1, [pc, #24]	; (800c9d0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c9b6:	4807      	ldr	r0, [pc, #28]	; (800c9d4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c9b8:	f001 fbb4 	bl	800e124 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c9bc:	6879      	ldr	r1, [r7, #4]
 800c9be:	2005      	movs	r0, #5
 800c9c0:	f7f7 f954 	bl	8003c6c <memp_free>
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	08010a40 	.word	0x08010a40
 800c9d0:	08010ba8 	.word	0x08010ba8
 800c9d4:	08010a88 	.word	0x08010a88

0800c9d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d106      	bne.n	800c9f8 <ipfrag_free_pbuf_custom+0x20>
 800c9ea:	4b11      	ldr	r3, [pc, #68]	; (800ca30 <ipfrag_free_pbuf_custom+0x58>)
 800c9ec:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800c9f0:	4910      	ldr	r1, [pc, #64]	; (800ca34 <ipfrag_free_pbuf_custom+0x5c>)
 800c9f2:	4811      	ldr	r0, [pc, #68]	; (800ca38 <ipfrag_free_pbuf_custom+0x60>)
 800c9f4:	f001 fb96 	bl	800e124 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d006      	beq.n	800ca0e <ipfrag_free_pbuf_custom+0x36>
 800ca00:	4b0b      	ldr	r3, [pc, #44]	; (800ca30 <ipfrag_free_pbuf_custom+0x58>)
 800ca02:	f240 22b9 	movw	r2, #697	; 0x2b9
 800ca06:	490d      	ldr	r1, [pc, #52]	; (800ca3c <ipfrag_free_pbuf_custom+0x64>)
 800ca08:	480b      	ldr	r0, [pc, #44]	; (800ca38 <ipfrag_free_pbuf_custom+0x60>)
 800ca0a:	f001 fb8b 	bl	800e124 <iprintf>
  if (pcr->original != NULL) {
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	695b      	ldr	r3, [r3, #20]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d004      	beq.n	800ca20 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	695b      	ldr	r3, [r3, #20]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7f7 fe50 	bl	80046c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	f7ff ffbd 	bl	800c9a0 <ip_frag_free_pbuf_custom_ref>
}
 800ca26:	bf00      	nop
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	08010a40 	.word	0x08010a40
 800ca34:	08010bb4 	.word	0x08010bb4
 800ca38:	08010a88 	.word	0x08010a88
 800ca3c:	08010bc0 	.word	0x08010bc0

0800ca40 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b092      	sub	sp, #72	; 0x48
 800ca44:	af02      	add	r7, sp, #8
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ca54:	3b14      	subs	r3, #20
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	da00      	bge.n	800ca5c <ip4_frag+0x1c>
 800ca5a:	3307      	adds	r3, #7
 800ca5c:	10db      	asrs	r3, r3, #3
 800ca5e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ca60:	2314      	movs	r3, #20
 800ca62:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	f003 030f 	and.w	r3, r3, #15
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	2b14      	cmp	r3, #20
 800ca7a:	d009      	beq.n	800ca90 <ip4_frag+0x50>
 800ca7c:	4b79      	ldr	r3, [pc, #484]	; (800cc64 <ip4_frag+0x224>)
 800ca7e:	f240 22e1 	movw	r2, #737	; 0x2e1
 800ca82:	4979      	ldr	r1, [pc, #484]	; (800cc68 <ip4_frag+0x228>)
 800ca84:	4879      	ldr	r0, [pc, #484]	; (800cc6c <ip4_frag+0x22c>)
 800ca86:	f001 fb4d 	bl	800e124 <iprintf>
 800ca8a:	f06f 0305 	mvn.w	r3, #5
 800ca8e:	e0e5      	b.n	800cc5c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ca90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca92:	88db      	ldrh	r3, [r3, #6]
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7f6 fced 	bl	8003476 <lwip_htons>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800caa0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800caa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caa6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800caa8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800caaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d009      	beq.n	800cac6 <ip4_frag+0x86>
 800cab2:	4b6c      	ldr	r3, [pc, #432]	; (800cc64 <ip4_frag+0x224>)
 800cab4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cab8:	496d      	ldr	r1, [pc, #436]	; (800cc70 <ip4_frag+0x230>)
 800caba:	486c      	ldr	r0, [pc, #432]	; (800cc6c <ip4_frag+0x22c>)
 800cabc:	f001 fb32 	bl	800e124 <iprintf>
 800cac0:	f06f 0305 	mvn.w	r3, #5
 800cac4:	e0ca      	b.n	800cc5c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	891b      	ldrh	r3, [r3, #8]
 800caca:	3b14      	subs	r3, #20
 800cacc:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800cace:	e0bc      	b.n	800cc4a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800cad0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cad2:	00da      	lsls	r2, r3, #3
 800cad4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cad6:	4293      	cmp	r3, r2
 800cad8:	bfa8      	it	ge
 800cada:	4613      	movge	r3, r2
 800cadc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cade:	2200      	movs	r2, #0
 800cae0:	2114      	movs	r1, #20
 800cae2:	2002      	movs	r0, #2
 800cae4:	f7f7 fa7a 	bl	8003fdc <pbuf_alloc>
 800cae8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800caea:	6a3b      	ldr	r3, [r7, #32]
 800caec:	2b00      	cmp	r3, #0
 800caee:	f000 80b2 	beq.w	800cc56 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	895b      	ldrh	r3, [r3, #10]
 800caf6:	2b13      	cmp	r3, #19
 800caf8:	d806      	bhi.n	800cb08 <ip4_frag+0xc8>
 800cafa:	4b5a      	ldr	r3, [pc, #360]	; (800cc64 <ip4_frag+0x224>)
 800cafc:	f240 3209 	movw	r2, #777	; 0x309
 800cb00:	495c      	ldr	r1, [pc, #368]	; (800cc74 <ip4_frag+0x234>)
 800cb02:	485a      	ldr	r0, [pc, #360]	; (800cc6c <ip4_frag+0x22c>)
 800cb04:	f001 fb0e 	bl	800e124 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	2214      	movs	r2, #20
 800cb0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb10:	4618      	mov	r0, r3
 800cb12:	f001 faf4 	bl	800e0fe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800cb1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800cb20:	e04f      	b.n	800cbc2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	895a      	ldrh	r2, [r3, #10]
 800cb26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800cb2c:	8b7a      	ldrh	r2, [r7, #26]
 800cb2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb30:	4293      	cmp	r3, r2
 800cb32:	bf28      	it	cs
 800cb34:	4613      	movcs	r3, r2
 800cb36:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800cb38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d105      	bne.n	800cb4a <ip4_frag+0x10a>
        poff = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	60fb      	str	r3, [r7, #12]
        continue;
 800cb48:	e03b      	b.n	800cbc2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cb4a:	f7ff ff21 	bl	800c990 <ip_frag_alloc_pbuf_custom_ref>
 800cb4e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d103      	bne.n	800cb5e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800cb56:	6a38      	ldr	r0, [r7, #32]
 800cb58:	f7f7 fdb2 	bl	80046c0 <pbuf_free>
        goto memerr;
 800cb5c:	e07c      	b.n	800cc58 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cb5e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cb64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cb66:	4413      	add	r3, r2
 800cb68:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cb6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cb6c:	9201      	str	r2, [sp, #4]
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	4603      	mov	r3, r0
 800cb72:	2202      	movs	r2, #2
 800cb74:	2004      	movs	r0, #4
 800cb76:	f7f7 fbc5 	bl	8004304 <pbuf_alloced_custom>
 800cb7a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d106      	bne.n	800cb90 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800cb82:	6978      	ldr	r0, [r7, #20]
 800cb84:	f7ff ff0c 	bl	800c9a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cb88:	6a38      	ldr	r0, [r7, #32]
 800cb8a:	f7f7 fd99 	bl	80046c0 <pbuf_free>
        goto memerr;
 800cb8e:	e063      	b.n	800cc58 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f7f7 fe41 	bl	8004818 <pbuf_ref>
      pcr->original = p;
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	4a36      	ldr	r2, [pc, #216]	; (800cc78 <ip4_frag+0x238>)
 800cba0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cba2:	6939      	ldr	r1, [r7, #16]
 800cba4:	6a38      	ldr	r0, [r7, #32]
 800cba6:	f7f7 fe59 	bl	800485c <pbuf_cat>
      left_to_copy -= newpbuflen;
 800cbaa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800cbac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800cbb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d004      	beq.n	800cbc2 <ip4_frag+0x182>
        poff = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cbc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1ac      	bne.n	800cb22 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800cbc8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cbca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbcc:	4413      	add	r3, r2
 800cbce:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800cbd0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cbd6:	3b14      	subs	r3, #20
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	bfd4      	ite	le
 800cbdc:	2301      	movle	r3, #1
 800cbde:	2300      	movgt	r3, #0
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cbe4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cbe6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbea:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d103      	bne.n	800cbfa <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800cbf2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cbf4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cbf8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800cbfa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7f6 fc3a 	bl	8003476 <lwip_htons>
 800cc02:	4603      	mov	r3, r0
 800cc04:	461a      	mov	r2, r3
 800cc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc08:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800cc0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc0c:	3314      	adds	r3, #20
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7f6 fc30 	bl	8003476 <lwip_htons>
 800cc16:	4603      	mov	r3, r0
 800cc18:	461a      	mov	r2, r3
 800cc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc20:	2200      	movs	r2, #0
 800cc22:	729a      	strb	r2, [r3, #10]
 800cc24:	2200      	movs	r2, #0
 800cc26:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	6a39      	ldr	r1, [r7, #32]
 800cc30:	68b8      	ldr	r0, [r7, #8]
 800cc32:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cc34:	6a38      	ldr	r0, [r7, #32]
 800cc36:	f7f7 fd43 	bl	80046c0 <pbuf_free>
    left -= fragsize;
 800cc3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cc3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc3e:	1ad3      	subs	r3, r2, r3
 800cc40:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800cc42:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800cc44:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cc46:	4413      	add	r3, r2
 800cc48:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800cc4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f47f af3f 	bne.w	800cad0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800cc52:	2300      	movs	r3, #0
 800cc54:	e002      	b.n	800cc5c <ip4_frag+0x21c>
      goto memerr;
 800cc56:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cc58:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3740      	adds	r7, #64	; 0x40
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	08010a40 	.word	0x08010a40
 800cc68:	08010bcc 	.word	0x08010bcc
 800cc6c:	08010a88 	.word	0x08010a88
 800cc70:	08010bf4 	.word	0x08010bf4
 800cc74:	08010c10 	.word	0x08010c10
 800cc78:	0800c9d9 	.word	0x0800c9d9

0800cc7c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800cc86:	230e      	movs	r3, #14
 800cc88:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	895b      	ldrh	r3, [r3, #10]
 800cc8e:	2b0e      	cmp	r3, #14
 800cc90:	d977      	bls.n	800cd82 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	7b1a      	ldrb	r2, [r3, #12]
 800cc9c:	7b5b      	ldrb	r3, [r3, #13]
 800cc9e:	021b      	lsls	r3, r3, #8
 800cca0:	4313      	orrs	r3, r2
 800cca2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d023      	beq.n	800ccf8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d10f      	bne.n	800ccd8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	785b      	ldrb	r3, [r3, #1]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d11b      	bne.n	800ccf8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ccc4:	2b5e      	cmp	r3, #94	; 0x5e
 800ccc6:	d117      	bne.n	800ccf8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	7b5b      	ldrb	r3, [r3, #13]
 800cccc:	f043 0310 	orr.w	r3, r3, #16
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	735a      	strb	r2, [r3, #13]
 800ccd6:	e00f      	b.n	800ccf8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	2206      	movs	r2, #6
 800ccdc:	4930      	ldr	r1, [pc, #192]	; (800cda0 <ethernet_input+0x124>)
 800ccde:	4618      	mov	r0, r3
 800cce0:	f001 f9fe 	bl	800e0e0 <memcmp>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d106      	bne.n	800ccf8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	7b5b      	ldrb	r3, [r3, #13]
 800ccee:	f043 0308 	orr.w	r3, r3, #8
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ccf8:	89fb      	ldrh	r3, [r7, #14]
 800ccfa:	2b08      	cmp	r3, #8
 800ccfc:	d003      	beq.n	800cd06 <ethernet_input+0x8a>
 800ccfe:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800cd02:	d01e      	beq.n	800cd42 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800cd04:	e044      	b.n	800cd90 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cd0c:	f003 0308 	and.w	r3, r3, #8
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d038      	beq.n	800cd86 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	895b      	ldrh	r3, [r3, #10]
 800cd18:	461a      	mov	r2, r3
 800cd1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	db33      	blt.n	800cd8a <ethernet_input+0x10e>
 800cd22:	8afb      	ldrh	r3, [r7, #22]
 800cd24:	425b      	negs	r3, r3
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	b21b      	sxth	r3, r3
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f7f7 fca3 	bl	8004678 <pbuf_header>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d128      	bne.n	800cd8a <ethernet_input+0x10e>
        ip4_input(p, netif);
 800cd38:	6839      	ldr	r1, [r7, #0]
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7fe ff80 	bl	800bc40 <ip4_input>
      break;
 800cd40:	e01d      	b.n	800cd7e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cd48:	f003 0308 	and.w	r3, r3, #8
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d01e      	beq.n	800cd8e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	895b      	ldrh	r3, [r3, #10]
 800cd54:	461a      	mov	r2, r3
 800cd56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	db15      	blt.n	800cd8a <ethernet_input+0x10e>
 800cd5e:	8afb      	ldrh	r3, [r7, #22]
 800cd60:	425b      	negs	r3, r3
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	b21b      	sxth	r3, r3
 800cd66:	4619      	mov	r1, r3
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f7f7 fc85 	bl	8004678 <pbuf_header>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10a      	bne.n	800cd8a <ethernet_input+0x10e>
        etharp_input(p, netif);
 800cd74:	6839      	ldr	r1, [r7, #0]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7fe f94e 	bl	800b018 <etharp_input>
      break;
 800cd7c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e00a      	b.n	800cd98 <ethernet_input+0x11c>
    goto free_and_return;
 800cd82:	bf00      	nop
 800cd84:	e004      	b.n	800cd90 <ethernet_input+0x114>
        goto free_and_return;
 800cd86:	bf00      	nop
 800cd88:	e002      	b.n	800cd90 <ethernet_input+0x114>

free_and_return:
 800cd8a:	bf00      	nop
 800cd8c:	e000      	b.n	800cd90 <ethernet_input+0x114>
        goto free_and_return;
 800cd8e:	bf00      	nop
  pbuf_free(p);
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7f7 fc95 	bl	80046c0 <pbuf_free>
  return ERR_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3718      	adds	r7, #24
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	08010ed8 	.word	0x08010ed8

0800cda4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
 800cdb0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800cdb2:	8c3b      	ldrh	r3, [r7, #32]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7f6 fb5e 	bl	8003476 <lwip_htons>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800cdbe:	210e      	movs	r1, #14
 800cdc0:	68b8      	ldr	r0, [r7, #8]
 800cdc2:	f7f7 fc59 	bl	8004678 <pbuf_header>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d125      	bne.n	800ce18 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	8afa      	ldrh	r2, [r7, #22]
 800cdd6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	2206      	movs	r2, #6
 800cddc:	6839      	ldr	r1, [r7, #0]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f001 f98d 	bl	800e0fe <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	3306      	adds	r3, #6
 800cde8:	2206      	movs	r2, #6
 800cdea:	6879      	ldr	r1, [r7, #4]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f001 f986 	bl	800e0fe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cdf8:	2b06      	cmp	r3, #6
 800cdfa:	d006      	beq.n	800ce0a <ethernet_output+0x66>
 800cdfc:	4b0a      	ldr	r3, [pc, #40]	; (800ce28 <ethernet_output+0x84>)
 800cdfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ce02:	490a      	ldr	r1, [pc, #40]	; (800ce2c <ethernet_output+0x88>)
 800ce04:	480a      	ldr	r0, [pc, #40]	; (800ce30 <ethernet_output+0x8c>)
 800ce06:	f001 f98d 	bl	800e124 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	699b      	ldr	r3, [r3, #24]
 800ce0e:	68b9      	ldr	r1, [r7, #8]
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	4798      	blx	r3
 800ce14:	4603      	mov	r3, r0
 800ce16:	e002      	b.n	800ce1e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ce18:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ce1a:	f06f 0301 	mvn.w	r3, #1
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	08010c30 	.word	0x08010c30
 800ce2c:	08010c68 	.word	0x08010c68
 800ce30:	08010c9c 	.word	0x08010c9c

0800ce34 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b08e      	sub	sp, #56	; 0x38
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce40:	2200      	movs	r2, #0
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	605a      	str	r2, [r3, #4]
 800ce46:	609a      	str	r2, [r3, #8]
 800ce48:	60da      	str	r2, [r3, #12]
 800ce4a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a4e      	ldr	r2, [pc, #312]	; (800cf8c <HAL_ETH_MspInit+0x158>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	f040 8096 	bne.w	800cf84 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ce58:	4b4d      	ldr	r3, [pc, #308]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ce5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5c:	4a4c      	ldr	r2, [pc, #304]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ce5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ce62:	6313      	str	r3, [r2, #48]	; 0x30
 800ce64:	4b4a      	ldr	r3, [pc, #296]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ce66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce6c:	623b      	str	r3, [r7, #32]
 800ce6e:	6a3b      	ldr	r3, [r7, #32]
 800ce70:	4b47      	ldr	r3, [pc, #284]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ce72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce74:	4a46      	ldr	r2, [pc, #280]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ce76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce7a:	6313      	str	r3, [r2, #48]	; 0x30
 800ce7c:	4b44      	ldr	r3, [pc, #272]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ce7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ce84:	61fb      	str	r3, [r7, #28]
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	4b41      	ldr	r3, [pc, #260]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ce8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce8c:	4a40      	ldr	r2, [pc, #256]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ce8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce92:	6313      	str	r3, [r2, #48]	; 0x30
 800ce94:	4b3e      	ldr	r3, [pc, #248]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ce96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce9c:	61bb      	str	r3, [r7, #24]
 800ce9e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cea0:	4b3b      	ldr	r3, [pc, #236]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800cea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea4:	4a3a      	ldr	r2, [pc, #232]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800cea6:	f043 0304 	orr.w	r3, r3, #4
 800ceaa:	6313      	str	r3, [r2, #48]	; 0x30
 800ceac:	4b38      	ldr	r3, [pc, #224]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ceae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb0:	f003 0304 	and.w	r3, r3, #4
 800ceb4:	617b      	str	r3, [r7, #20]
 800ceb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ceb8:	4b35      	ldr	r3, [pc, #212]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ceba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cebc:	4a34      	ldr	r2, [pc, #208]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800cebe:	f043 0301 	orr.w	r3, r3, #1
 800cec2:	6313      	str	r3, [r2, #48]	; 0x30
 800cec4:	4b32      	ldr	r3, [pc, #200]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800cec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	613b      	str	r3, [r7, #16]
 800cece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ced0:	4b2f      	ldr	r3, [pc, #188]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ced2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced4:	4a2e      	ldr	r2, [pc, #184]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ced6:	f043 0302 	orr.w	r3, r3, #2
 800ceda:	6313      	str	r3, [r2, #48]	; 0x30
 800cedc:	4b2c      	ldr	r3, [pc, #176]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800cede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cee0:	f003 0302 	and.w	r3, r3, #2
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800cee8:	4b29      	ldr	r3, [pc, #164]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ceea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceec:	4a28      	ldr	r2, [pc, #160]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800ceee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef2:	6313      	str	r3, [r2, #48]	; 0x30
 800cef4:	4b26      	ldr	r3, [pc, #152]	; (800cf90 <HAL_ETH_MspInit+0x15c>)
 800cef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cefc:	60bb      	str	r3, [r7, #8]
 800cefe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800cf00:	2332      	movs	r3, #50	; 0x32
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf04:	2302      	movs	r3, #2
 800cf06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf0c:	2303      	movs	r3, #3
 800cf0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cf10:	230b      	movs	r3, #11
 800cf12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf18:	4619      	mov	r1, r3
 800cf1a:	481e      	ldr	r0, [pc, #120]	; (800cf94 <HAL_ETH_MspInit+0x160>)
 800cf1c:	f7f4 fc2a 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800cf20:	2386      	movs	r3, #134	; 0x86
 800cf22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf24:	2302      	movs	r3, #2
 800cf26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cf30:	230b      	movs	r3, #11
 800cf32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf38:	4619      	mov	r1, r3
 800cf3a:	4817      	ldr	r0, [pc, #92]	; (800cf98 <HAL_ETH_MspInit+0x164>)
 800cf3c:	f7f4 fc1a 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800cf40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf46:	2302      	movs	r3, #2
 800cf48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf4e:	2303      	movs	r3, #3
 800cf50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cf52:	230b      	movs	r3, #11
 800cf54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800cf56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	480f      	ldr	r0, [pc, #60]	; (800cf9c <HAL_ETH_MspInit+0x168>)
 800cf5e:	f7f4 fc09 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800cf62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cf66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf68:	2302      	movs	r3, #2
 800cf6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf70:	2303      	movs	r3, #3
 800cf72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cf74:	230b      	movs	r3, #11
 800cf76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cf78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	4808      	ldr	r0, [pc, #32]	; (800cfa0 <HAL_ETH_MspInit+0x16c>)
 800cf80:	f7f4 fbf8 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800cf84:	bf00      	nop
 800cf86:	3738      	adds	r7, #56	; 0x38
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	40028000 	.word	0x40028000
 800cf90:	40023800 	.word	0x40023800
 800cf94:	40020800 	.word	0x40020800
 800cf98:	40020000 	.word	0x40020000
 800cf9c:	40020400 	.word	0x40020400
 800cfa0:	40021800 	.word	0x40021800

0800cfa4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b086      	sub	sp, #24
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800cfac:	2300      	movs	r3, #0
 800cfae:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800cfb0:	4b49      	ldr	r3, [pc, #292]	; (800d0d8 <low_level_init+0x134>)
 800cfb2:	4a4a      	ldr	r2, [pc, #296]	; (800d0dc <low_level_init+0x138>)
 800cfb4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800cfb6:	4b48      	ldr	r3, [pc, #288]	; (800d0d8 <low_level_init+0x134>)
 800cfb8:	2201      	movs	r2, #1
 800cfba:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800cfbc:	4b46      	ldr	r3, [pc, #280]	; (800d0d8 <low_level_init+0x134>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800cfc6:	2380      	movs	r3, #128	; 0x80
 800cfc8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800cfca:	23e1      	movs	r3, #225	; 0xe1
 800cfcc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800cfda:	4a3f      	ldr	r2, [pc, #252]	; (800d0d8 <low_level_init+0x134>)
 800cfdc:	f107 0308 	add.w	r3, r7, #8
 800cfe0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800cfe2:	4b3d      	ldr	r3, [pc, #244]	; (800d0d8 <low_level_init+0x134>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800cfe8:	4b3b      	ldr	r3, [pc, #236]	; (800d0d8 <low_level_init+0x134>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800cfee:	4b3a      	ldr	r3, [pc, #232]	; (800d0d8 <low_level_init+0x134>)
 800cff0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800cff4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800cff6:	4838      	ldr	r0, [pc, #224]	; (800d0d8 <low_level_init+0x134>)
 800cff8:	f7f3 fc48 	bl	800088c <HAL_ETH_Init>
 800cffc:	4603      	mov	r3, r0
 800cffe:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800d000:	7dfb      	ldrb	r3, [r7, #23]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d108      	bne.n	800d018 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d00c:	f043 0304 	orr.w	r3, r3, #4
 800d010:	b2da      	uxtb	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800d018:	2304      	movs	r3, #4
 800d01a:	4a31      	ldr	r2, [pc, #196]	; (800d0e0 <low_level_init+0x13c>)
 800d01c:	4931      	ldr	r1, [pc, #196]	; (800d0e4 <low_level_init+0x140>)
 800d01e:	482e      	ldr	r0, [pc, #184]	; (800d0d8 <low_level_init+0x134>)
 800d020:	f7f3 fdd0 	bl	8000bc4 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800d024:	2304      	movs	r3, #4
 800d026:	4a30      	ldr	r2, [pc, #192]	; (800d0e8 <low_level_init+0x144>)
 800d028:	4930      	ldr	r1, [pc, #192]	; (800d0ec <low_level_init+0x148>)
 800d02a:	482b      	ldr	r0, [pc, #172]	; (800d0d8 <low_level_init+0x134>)
 800d02c:	f7f3 fe33 	bl	8000c96 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2206      	movs	r2, #6
 800d034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d038:	4b27      	ldr	r3, [pc, #156]	; (800d0d8 <low_level_init+0x134>)
 800d03a:	695b      	ldr	r3, [r3, #20]
 800d03c:	781a      	ldrb	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800d044:	4b24      	ldr	r3, [pc, #144]	; (800d0d8 <low_level_init+0x134>)
 800d046:	695b      	ldr	r3, [r3, #20]
 800d048:	785a      	ldrb	r2, [r3, #1]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800d050:	4b21      	ldr	r3, [pc, #132]	; (800d0d8 <low_level_init+0x134>)
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	789a      	ldrb	r2, [r3, #2]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800d05c:	4b1e      	ldr	r3, [pc, #120]	; (800d0d8 <low_level_init+0x134>)
 800d05e:	695b      	ldr	r3, [r3, #20]
 800d060:	78da      	ldrb	r2, [r3, #3]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800d068:	4b1b      	ldr	r3, [pc, #108]	; (800d0d8 <low_level_init+0x134>)
 800d06a:	695b      	ldr	r3, [r3, #20]
 800d06c:	791a      	ldrb	r2, [r3, #4]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800d074:	4b18      	ldr	r3, [pc, #96]	; (800d0d8 <low_level_init+0x134>)
 800d076:	695b      	ldr	r3, [r3, #20]
 800d078:	795a      	ldrb	r2, [r3, #5]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d086:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d08e:	f043 030a 	orr.w	r3, r3, #10
 800d092:	b2da      	uxtb	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800d09a:	480f      	ldr	r0, [pc, #60]	; (800d0d8 <low_level_init+0x134>)
 800d09c:	f7f4 f8a4 	bl	80011e8 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800d0a0:	f107 0310 	add.w	r3, r7, #16
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	211d      	movs	r1, #29
 800d0a8:	480b      	ldr	r0, [pc, #44]	; (800d0d8 <low_level_init+0x134>)
 800d0aa:	f7f3 ffcf 	bl	800104c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	f043 030b 	orr.w	r3, r3, #11
 800d0b4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	211d      	movs	r1, #29
 800d0bc:	4806      	ldr	r0, [pc, #24]	; (800d0d8 <low_level_init+0x134>)
 800d0be:	f7f4 f82d 	bl	800111c <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800d0c2:	f107 0310 	add.w	r3, r7, #16
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	211d      	movs	r1, #29
 800d0ca:	4803      	ldr	r0, [pc, #12]	; (800d0d8 <low_level_init+0x134>)
 800d0cc:	f7f3 ffbe 	bl	800104c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800d0d0:	bf00      	nop
 800d0d2:	3718      	adds	r7, #24
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	20005064 	.word	0x20005064
 800d0dc:	40028000 	.word	0x40028000
 800d0e0:	200050ac 	.word	0x200050ac
 800d0e4:	20003794 	.word	0x20003794
 800d0e8:	20003814 	.word	0x20003814
 800d0ec:	20004fe4 	.word	0x20004fe4

0800d0f0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b08a      	sub	sp, #40	; 0x28
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800d0fa:	4b4b      	ldr	r3, [pc, #300]	; (800d228 <low_level_output+0x138>)
 800d0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800d102:	2300      	movs	r3, #0
 800d104:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800d106:	2300      	movs	r3, #0
 800d108:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800d112:	4b45      	ldr	r3, [pc, #276]	; (800d228 <low_level_output+0x138>)
 800d114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d116:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800d118:	2300      	movs	r3, #0
 800d11a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	623b      	str	r3, [r7, #32]
 800d120:	e05a      	b.n	800d1d8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	da03      	bge.n	800d132 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800d12a:	23f8      	movs	r3, #248	; 0xf8
 800d12c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800d130:	e05c      	b.n	800d1ec <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	895b      	ldrh	r3, [r3, #10]
 800d136:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d13c:	e02f      	b.n	800d19e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800d13e:	69fa      	ldr	r2, [r7, #28]
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	18d0      	adds	r0, r2, r3
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	18d1      	adds	r1, r2, r3
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800d152:	1a9b      	subs	r3, r3, r2
 800d154:	461a      	mov	r2, r3
 800d156:	f000 ffd2 	bl	800e0fe <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	da03      	bge.n	800d170 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800d168:	23f8      	movs	r3, #248	; 0xf8
 800d16a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800d16e:	e03d      	b.n	800d1ec <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800d176:	693a      	ldr	r2, [r7, #16]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	4413      	add	r3, r2
 800d17c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d180:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d18c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d198:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d8c8      	bhi.n	800d13e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800d1ac:	69fa      	ldr	r2, [r7, #28]
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	18d0      	adds	r0, r2, r3
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	685a      	ldr	r2, [r3, #4]
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	f000 ff9e 	bl	800e0fe <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d1c2:	693a      	ldr	r2, [r7, #16]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800d1ca:	697a      	ldr	r2, [r7, #20]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	623b      	str	r3, [r7, #32]
 800d1d8:	6a3b      	ldr	r3, [r7, #32]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1a1      	bne.n	800d122 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800d1de:	6979      	ldr	r1, [r7, #20]
 800d1e0:	4811      	ldr	r0, [pc, #68]	; (800d228 <low_level_output+0x138>)
 800d1e2:	f7f3 fdc5 	bl	8000d70 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800d1ec:	4b0e      	ldr	r3, [pc, #56]	; (800d228 <low_level_output+0x138>)
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	f241 0314 	movw	r3, #4116	; 0x1014
 800d1f4:	4413      	add	r3, r2
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 0320 	and.w	r3, r3, #32
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00d      	beq.n	800d21c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800d200:	4b09      	ldr	r3, [pc, #36]	; (800d228 <low_level_output+0x138>)
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	f241 0314 	movw	r3, #4116	; 0x1014
 800d208:	4413      	add	r3, r2
 800d20a:	2220      	movs	r2, #32
 800d20c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800d20e:	4b06      	ldr	r3, [pc, #24]	; (800d228 <low_level_output+0x138>)
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	f241 0304 	movw	r3, #4100	; 0x1004
 800d216:	4413      	add	r3, r2
 800d218:	2200      	movs	r2, #0
 800d21a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800d21c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d220:	4618      	mov	r0, r3
 800d222:	3728      	adds	r7, #40	; 0x28
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	20005064 	.word	0x20005064

0800d22c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b08c      	sub	sp, #48	; 0x30
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d234:	2300      	movs	r3, #0
 800d236:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800d238:	2300      	movs	r3, #0
 800d23a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800d240:	2300      	movs	r3, #0
 800d242:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800d244:	2300      	movs	r3, #0
 800d246:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800d24c:	2300      	movs	r3, #0
 800d24e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800d250:	484e      	ldr	r0, [pc, #312]	; (800d38c <low_level_input+0x160>)
 800d252:	f7f3 fe77 	bl	8000f44 <HAL_ETH_GetReceivedFrame>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d001      	beq.n	800d260 <low_level_input+0x34>
    return NULL;
 800d25c:	2300      	movs	r3, #0
 800d25e:	e091      	b.n	800d384 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800d260:	4b4a      	ldr	r3, [pc, #296]	; (800d38c <low_level_input+0x160>)
 800d262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d264:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800d266:	4b49      	ldr	r3, [pc, #292]	; (800d38c <low_level_input+0x160>)
 800d268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800d26c:	89fb      	ldrh	r3, [r7, #14]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d006      	beq.n	800d280 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800d272:	89fb      	ldrh	r3, [r7, #14]
 800d274:	2203      	movs	r2, #3
 800d276:	4619      	mov	r1, r3
 800d278:	2004      	movs	r0, #4
 800d27a:	f7f6 feaf 	bl	8003fdc <pbuf_alloc>
 800d27e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800d280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d282:	2b00      	cmp	r3, #0
 800d284:	d04b      	beq.n	800d31e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d286:	4b41      	ldr	r3, [pc, #260]	; (800d38c <low_level_input+0x160>)
 800d288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800d28c:	2300      	movs	r3, #0
 800d28e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	62bb      	str	r3, [r7, #40]	; 0x28
 800d294:	e040      	b.n	800d318 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	895b      	ldrh	r3, [r3, #10]
 800d29a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d2a0:	e021      	b.n	800d2e6 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800d2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	18d0      	adds	r0, r2, r3
 800d2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	18d1      	adds	r1, r2, r3
 800d2b0:	69fa      	ldr	r2, [r7, #28]
 800d2b2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800d2b6:	1a9b      	subs	r3, r3, r2
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	f000 ff20 	bl	800e0fe <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d2be:	6a3b      	ldr	r3, [r7, #32]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800d2c4:	6a3b      	ldr	r3, [r7, #32]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800d2ca:	69fa      	ldr	r2, [r7, #28]
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d2d4:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800d2d6:	69ba      	ldr	r2, [r7, #24]
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d2e0:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d8d6      	bhi.n	800d2a2 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	685a      	ldr	r2, [r3, #4]
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	18d0      	adds	r0, r2, r3
 800d2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	4413      	add	r3, r2
 800d302:	697a      	ldr	r2, [r7, #20]
 800d304:	4619      	mov	r1, r3
 800d306:	f000 fefa 	bl	800e0fe <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d30a:	69fa      	ldr	r2, [r7, #28]
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	4413      	add	r3, r2
 800d310:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	62bb      	str	r3, [r7, #40]	; 0x28
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1bb      	bne.n	800d296 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d31e:	4b1b      	ldr	r3, [pc, #108]	; (800d38c <low_level_input+0x160>)
 800d320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d322:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d324:	2300      	movs	r3, #0
 800d326:	613b      	str	r3, [r7, #16]
 800d328:	e00b      	b.n	800d342 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d332:	6a3b      	ldr	r3, [r7, #32]
 800d334:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d336:	6a3b      	ldr	r3, [r7, #32]
 800d338:	68db      	ldr	r3, [r3, #12]
 800d33a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	3301      	adds	r3, #1
 800d340:	613b      	str	r3, [r7, #16]
 800d342:	4b12      	ldr	r3, [pc, #72]	; (800d38c <low_level_input+0x160>)
 800d344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d346:	693a      	ldr	r2, [r7, #16]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d3ee      	bcc.n	800d32a <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800d34c:	4b0f      	ldr	r3, [pc, #60]	; (800d38c <low_level_input+0x160>)
 800d34e:	2200      	movs	r2, #0
 800d350:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800d352:	4b0e      	ldr	r3, [pc, #56]	; (800d38c <low_level_input+0x160>)
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	f241 0314 	movw	r3, #4116	; 0x1014
 800d35a:	4413      	add	r3, r2
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00d      	beq.n	800d382 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800d366:	4b09      	ldr	r3, [pc, #36]	; (800d38c <low_level_input+0x160>)
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	f241 0314 	movw	r3, #4116	; 0x1014
 800d36e:	4413      	add	r3, r2
 800d370:	2280      	movs	r2, #128	; 0x80
 800d372:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800d374:	4b05      	ldr	r3, [pc, #20]	; (800d38c <low_level_input+0x160>)
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	f241 0308 	movw	r3, #4104	; 0x1008
 800d37c:	4413      	add	r3, r2
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
  }
  return p;
 800d382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d384:	4618      	mov	r0, r3
 800d386:	3730      	adds	r7, #48	; 0x30
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	20005064 	.word	0x20005064

0800d390 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7ff ff47 	bl	800d22c <low_level_input>
 800d39e:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d010      	beq.n	800d3c8 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	6879      	ldr	r1, [r7, #4]
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	4798      	blx	r3
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 800d3b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d006      	beq.n	800d3ca <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f7f7 f97f 	bl	80046c0 <pbuf_free>
    p = NULL;    
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60fb      	str	r3, [r7, #12]
 800d3c6:	e000      	b.n	800d3ca <ethernetif_input+0x3a>
  if (p == NULL) return;
 800d3c8:	bf00      	nop
  }
}
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d106      	bne.n	800d3ec <ethernetif_init+0x1c>
 800d3de:	4b0e      	ldr	r3, [pc, #56]	; (800d418 <ethernetif_init+0x48>)
 800d3e0:	f44f 7204 	mov.w	r2, #528	; 0x210
 800d3e4:	490d      	ldr	r1, [pc, #52]	; (800d41c <ethernetif_init+0x4c>)
 800d3e6:	480e      	ldr	r0, [pc, #56]	; (800d420 <ethernetif_init+0x50>)
 800d3e8:	f000 fe9c 	bl	800e124 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2273      	movs	r2, #115	; 0x73
 800d3f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2274      	movs	r2, #116	; 0x74
 800d3f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4a09      	ldr	r2, [pc, #36]	; (800d424 <ethernetif_init+0x54>)
 800d400:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a08      	ldr	r2, [pc, #32]	; (800d428 <ethernetif_init+0x58>)
 800d406:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f7ff fdcb 	bl	800cfa4 <low_level_init>

  return ERR_OK;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	08010cc4 	.word	0x08010cc4
 800d41c:	08010cd8 	.word	0x08010cd8
 800d420:	08010ce8 	.word	0x08010ce8
 800d424:	0800b261 	.word	0x0800b261
 800d428:	0800d0f1 	.word	0x0800d0f1

0800d42c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d430:	f7f3 f918 	bl	8000664 <HAL_GetTick>
 800d434:	4603      	mov	r3, r0
}
 800d436:	4618      	mov	r0, r3
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b08c      	sub	sp, #48	; 0x30
 800d440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d442:	f107 031c 	add.w	r3, r7, #28
 800d446:	2200      	movs	r2, #0
 800d448:	601a      	str	r2, [r3, #0]
 800d44a:	605a      	str	r2, [r3, #4]
 800d44c:	609a      	str	r2, [r3, #8]
 800d44e:	60da      	str	r2, [r3, #12]
 800d450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d452:	4b5e      	ldr	r3, [pc, #376]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d456:	4a5d      	ldr	r2, [pc, #372]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d458:	f043 0304 	orr.w	r3, r3, #4
 800d45c:	6313      	str	r3, [r2, #48]	; 0x30
 800d45e:	4b5b      	ldr	r3, [pc, #364]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d462:	f003 0304 	and.w	r3, r3, #4
 800d466:	61bb      	str	r3, [r7, #24]
 800d468:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d46a:	4b58      	ldr	r3, [pc, #352]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46e:	4a57      	ldr	r2, [pc, #348]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d474:	6313      	str	r3, [r2, #48]	; 0x30
 800d476:	4b55      	ldr	r3, [pc, #340]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d47e:	617b      	str	r3, [r7, #20]
 800d480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d482:	4b52      	ldr	r3, [pc, #328]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d486:	4a51      	ldr	r2, [pc, #324]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d488:	f043 0301 	orr.w	r3, r3, #1
 800d48c:	6313      	str	r3, [r2, #48]	; 0x30
 800d48e:	4b4f      	ldr	r3, [pc, #316]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d492:	f003 0301 	and.w	r3, r3, #1
 800d496:	613b      	str	r3, [r7, #16]
 800d498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d49a:	4b4c      	ldr	r3, [pc, #304]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49e:	4a4b      	ldr	r2, [pc, #300]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d4a0:	f043 0302 	orr.w	r3, r3, #2
 800d4a4:	6313      	str	r3, [r2, #48]	; 0x30
 800d4a6:	4b49      	ldr	r3, [pc, #292]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4aa:	f003 0302 	and.w	r3, r3, #2
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d4b2:	4b46      	ldr	r3, [pc, #280]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b6:	4a45      	ldr	r2, [pc, #276]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d4b8:	f043 0308 	orr.w	r3, r3, #8
 800d4bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d4be:	4b43      	ldr	r3, [pc, #268]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c2:	f003 0308 	and.w	r3, r3, #8
 800d4c6:	60bb      	str	r3, [r7, #8]
 800d4c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d4ca:	4b40      	ldr	r3, [pc, #256]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ce:	4a3f      	ldr	r2, [pc, #252]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d4d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4d4:	6313      	str	r3, [r2, #48]	; 0x30
 800d4d6:	4b3d      	ldr	r3, [pc, #244]	; (800d5cc <MX_GPIO_Init+0x190>)
 800d4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4de:	607b      	str	r3, [r7, #4]
 800d4e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f244 0181 	movw	r1, #16513	; 0x4081
 800d4e8:	4839      	ldr	r0, [pc, #228]	; (800d5d0 <MX_GPIO_Init+0x194>)
 800d4ea:	f7f4 faed 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	2140      	movs	r1, #64	; 0x40
 800d4f2:	4838      	ldr	r0, [pc, #224]	; (800d5d4 <MX_GPIO_Init+0x198>)
 800d4f4:	f7f4 fae8 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800d4f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d4fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d4fe:	4b36      	ldr	r3, [pc, #216]	; (800d5d8 <MX_GPIO_Init+0x19c>)
 800d500:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d502:	2300      	movs	r3, #0
 800d504:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800d506:	f107 031c 	add.w	r3, r7, #28
 800d50a:	4619      	mov	r1, r3
 800d50c:	4833      	ldr	r0, [pc, #204]	; (800d5dc <MX_GPIO_Init+0x1a0>)
 800d50e:	f7f4 f931 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800d512:	f244 0381 	movw	r3, #16513	; 0x4081
 800d516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d518:	2301      	movs	r3, #1
 800d51a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d51c:	2300      	movs	r3, #0
 800d51e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d520:	2300      	movs	r3, #0
 800d522:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d524:	f107 031c 	add.w	r3, r7, #28
 800d528:	4619      	mov	r1, r3
 800d52a:	4829      	ldr	r0, [pc, #164]	; (800d5d0 <MX_GPIO_Init+0x194>)
 800d52c:	f7f4 f922 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800d530:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d536:	2302      	movs	r3, #2
 800d538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d53a:	2300      	movs	r3, #0
 800d53c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d53e:	2303      	movs	r3, #3
 800d540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d542:	2307      	movs	r3, #7
 800d544:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d546:	f107 031c 	add.w	r3, r7, #28
 800d54a:	4619      	mov	r1, r3
 800d54c:	4824      	ldr	r0, [pc, #144]	; (800d5e0 <MX_GPIO_Init+0x1a4>)
 800d54e:	f7f4 f911 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800d552:	2340      	movs	r3, #64	; 0x40
 800d554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d556:	2301      	movs	r3, #1
 800d558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d55a:	2300      	movs	r3, #0
 800d55c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d55e:	2300      	movs	r3, #0
 800d560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800d562:	f107 031c 	add.w	r3, r7, #28
 800d566:	4619      	mov	r1, r3
 800d568:	481a      	ldr	r0, [pc, #104]	; (800d5d4 <MX_GPIO_Init+0x198>)
 800d56a:	f7f4 f903 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800d56e:	2380      	movs	r3, #128	; 0x80
 800d570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d572:	2300      	movs	r3, #0
 800d574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d576:	2300      	movs	r3, #0
 800d578:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d57a:	f107 031c 	add.w	r3, r7, #28
 800d57e:	4619      	mov	r1, r3
 800d580:	4814      	ldr	r0, [pc, #80]	; (800d5d4 <MX_GPIO_Init+0x198>)
 800d582:	f7f4 f8f7 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d586:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d58a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d58c:	2302      	movs	r3, #2
 800d58e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d590:	2300      	movs	r3, #0
 800d592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d594:	2303      	movs	r3, #3
 800d596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d598:	230a      	movs	r3, #10
 800d59a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d59c:	f107 031c 	add.w	r3, r7, #28
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	4810      	ldr	r0, [pc, #64]	; (800d5e4 <MX_GPIO_Init+0x1a8>)
 800d5a4:	f7f4 f8e6 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d5a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d5b6:	f107 031c 	add.w	r3, r7, #28
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4809      	ldr	r0, [pc, #36]	; (800d5e4 <MX_GPIO_Init+0x1a8>)
 800d5be:	f7f4 f8d9 	bl	8001774 <HAL_GPIO_Init>

}
 800d5c2:	bf00      	nop
 800d5c4:	3730      	adds	r7, #48	; 0x30
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	40023800 	.word	0x40023800
 800d5d0:	40020400 	.word	0x40020400
 800d5d4:	40021800 	.word	0x40021800
 800d5d8:	10110000 	.word	0x10110000
 800d5dc:	40020800 	.word	0x40020800
 800d5e0:	40020c00 	.word	0x40020c00
 800d5e4:	40020000 	.word	0x40020000

0800d5e8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 800d5ee:	4b8b      	ldr	r3, [pc, #556]	; (800d81c <MX_LWIP_Init+0x234>)
 800d5f0:	22a9      	movs	r2, #169	; 0xa9
 800d5f2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 800d5f4:	4b89      	ldr	r3, [pc, #548]	; (800d81c <MX_LWIP_Init+0x234>)
 800d5f6:	22fe      	movs	r2, #254	; 0xfe
 800d5f8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 212;
 800d5fa:	4b88      	ldr	r3, [pc, #544]	; (800d81c <MX_LWIP_Init+0x234>)
 800d5fc:	22d4      	movs	r2, #212	; 0xd4
 800d5fe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 180;
 800d600:	4b86      	ldr	r3, [pc, #536]	; (800d81c <MX_LWIP_Init+0x234>)
 800d602:	22b4      	movs	r2, #180	; 0xb4
 800d604:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800d606:	4b86      	ldr	r3, [pc, #536]	; (800d820 <MX_LWIP_Init+0x238>)
 800d608:	22ff      	movs	r2, #255	; 0xff
 800d60a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800d60c:	4b84      	ldr	r3, [pc, #528]	; (800d820 <MX_LWIP_Init+0x238>)
 800d60e:	22ff      	movs	r2, #255	; 0xff
 800d610:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800d612:	4b83      	ldr	r3, [pc, #524]	; (800d820 <MX_LWIP_Init+0x238>)
 800d614:	2200      	movs	r2, #0
 800d616:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800d618:	4b81      	ldr	r3, [pc, #516]	; (800d820 <MX_LWIP_Init+0x238>)
 800d61a:	2200      	movs	r2, #0
 800d61c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800d61e:	4b81      	ldr	r3, [pc, #516]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d620:	2200      	movs	r2, #0
 800d622:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800d624:	4b7f      	ldr	r3, [pc, #508]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d626:	2200      	movs	r2, #0
 800d628:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800d62a:	4b7e      	ldr	r3, [pc, #504]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800d630:	4b7c      	ldr	r3, [pc, #496]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d632:	2200      	movs	r2, #0
 800d634:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800d636:	f7f5 ff45 	bl	80034c4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800d63a:	4b78      	ldr	r3, [pc, #480]	; (800d81c <MX_LWIP_Init+0x234>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	061a      	lsls	r2, r3, #24
 800d640:	4b76      	ldr	r3, [pc, #472]	; (800d81c <MX_LWIP_Init+0x234>)
 800d642:	785b      	ldrb	r3, [r3, #1]
 800d644:	041b      	lsls	r3, r3, #16
 800d646:	431a      	orrs	r2, r3
 800d648:	4b74      	ldr	r3, [pc, #464]	; (800d81c <MX_LWIP_Init+0x234>)
 800d64a:	789b      	ldrb	r3, [r3, #2]
 800d64c:	021b      	lsls	r3, r3, #8
 800d64e:	4313      	orrs	r3, r2
 800d650:	4a72      	ldr	r2, [pc, #456]	; (800d81c <MX_LWIP_Init+0x234>)
 800d652:	78d2      	ldrb	r2, [r2, #3]
 800d654:	4313      	orrs	r3, r2
 800d656:	061a      	lsls	r2, r3, #24
 800d658:	4b70      	ldr	r3, [pc, #448]	; (800d81c <MX_LWIP_Init+0x234>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	0619      	lsls	r1, r3, #24
 800d65e:	4b6f      	ldr	r3, [pc, #444]	; (800d81c <MX_LWIP_Init+0x234>)
 800d660:	785b      	ldrb	r3, [r3, #1]
 800d662:	041b      	lsls	r3, r3, #16
 800d664:	4319      	orrs	r1, r3
 800d666:	4b6d      	ldr	r3, [pc, #436]	; (800d81c <MX_LWIP_Init+0x234>)
 800d668:	789b      	ldrb	r3, [r3, #2]
 800d66a:	021b      	lsls	r3, r3, #8
 800d66c:	430b      	orrs	r3, r1
 800d66e:	496b      	ldr	r1, [pc, #428]	; (800d81c <MX_LWIP_Init+0x234>)
 800d670:	78c9      	ldrb	r1, [r1, #3]
 800d672:	430b      	orrs	r3, r1
 800d674:	021b      	lsls	r3, r3, #8
 800d676:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d67a:	431a      	orrs	r2, r3
 800d67c:	4b67      	ldr	r3, [pc, #412]	; (800d81c <MX_LWIP_Init+0x234>)
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	0619      	lsls	r1, r3, #24
 800d682:	4b66      	ldr	r3, [pc, #408]	; (800d81c <MX_LWIP_Init+0x234>)
 800d684:	785b      	ldrb	r3, [r3, #1]
 800d686:	041b      	lsls	r3, r3, #16
 800d688:	4319      	orrs	r1, r3
 800d68a:	4b64      	ldr	r3, [pc, #400]	; (800d81c <MX_LWIP_Init+0x234>)
 800d68c:	789b      	ldrb	r3, [r3, #2]
 800d68e:	021b      	lsls	r3, r3, #8
 800d690:	430b      	orrs	r3, r1
 800d692:	4962      	ldr	r1, [pc, #392]	; (800d81c <MX_LWIP_Init+0x234>)
 800d694:	78c9      	ldrb	r1, [r1, #3]
 800d696:	430b      	orrs	r3, r1
 800d698:	0a1b      	lsrs	r3, r3, #8
 800d69a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d69e:	431a      	orrs	r2, r3
 800d6a0:	4b5e      	ldr	r3, [pc, #376]	; (800d81c <MX_LWIP_Init+0x234>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	0619      	lsls	r1, r3, #24
 800d6a6:	4b5d      	ldr	r3, [pc, #372]	; (800d81c <MX_LWIP_Init+0x234>)
 800d6a8:	785b      	ldrb	r3, [r3, #1]
 800d6aa:	041b      	lsls	r3, r3, #16
 800d6ac:	4319      	orrs	r1, r3
 800d6ae:	4b5b      	ldr	r3, [pc, #364]	; (800d81c <MX_LWIP_Init+0x234>)
 800d6b0:	789b      	ldrb	r3, [r3, #2]
 800d6b2:	021b      	lsls	r3, r3, #8
 800d6b4:	430b      	orrs	r3, r1
 800d6b6:	4959      	ldr	r1, [pc, #356]	; (800d81c <MX_LWIP_Init+0x234>)
 800d6b8:	78c9      	ldrb	r1, [r1, #3]
 800d6ba:	430b      	orrs	r3, r1
 800d6bc:	0e1b      	lsrs	r3, r3, #24
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	4a59      	ldr	r2, [pc, #356]	; (800d828 <MX_LWIP_Init+0x240>)
 800d6c2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800d6c4:	4b56      	ldr	r3, [pc, #344]	; (800d820 <MX_LWIP_Init+0x238>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	061a      	lsls	r2, r3, #24
 800d6ca:	4b55      	ldr	r3, [pc, #340]	; (800d820 <MX_LWIP_Init+0x238>)
 800d6cc:	785b      	ldrb	r3, [r3, #1]
 800d6ce:	041b      	lsls	r3, r3, #16
 800d6d0:	431a      	orrs	r2, r3
 800d6d2:	4b53      	ldr	r3, [pc, #332]	; (800d820 <MX_LWIP_Init+0x238>)
 800d6d4:	789b      	ldrb	r3, [r3, #2]
 800d6d6:	021b      	lsls	r3, r3, #8
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	4a51      	ldr	r2, [pc, #324]	; (800d820 <MX_LWIP_Init+0x238>)
 800d6dc:	78d2      	ldrb	r2, [r2, #3]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	061a      	lsls	r2, r3, #24
 800d6e2:	4b4f      	ldr	r3, [pc, #316]	; (800d820 <MX_LWIP_Init+0x238>)
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	0619      	lsls	r1, r3, #24
 800d6e8:	4b4d      	ldr	r3, [pc, #308]	; (800d820 <MX_LWIP_Init+0x238>)
 800d6ea:	785b      	ldrb	r3, [r3, #1]
 800d6ec:	041b      	lsls	r3, r3, #16
 800d6ee:	4319      	orrs	r1, r3
 800d6f0:	4b4b      	ldr	r3, [pc, #300]	; (800d820 <MX_LWIP_Init+0x238>)
 800d6f2:	789b      	ldrb	r3, [r3, #2]
 800d6f4:	021b      	lsls	r3, r3, #8
 800d6f6:	430b      	orrs	r3, r1
 800d6f8:	4949      	ldr	r1, [pc, #292]	; (800d820 <MX_LWIP_Init+0x238>)
 800d6fa:	78c9      	ldrb	r1, [r1, #3]
 800d6fc:	430b      	orrs	r3, r1
 800d6fe:	021b      	lsls	r3, r3, #8
 800d700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d704:	431a      	orrs	r2, r3
 800d706:	4b46      	ldr	r3, [pc, #280]	; (800d820 <MX_LWIP_Init+0x238>)
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	0619      	lsls	r1, r3, #24
 800d70c:	4b44      	ldr	r3, [pc, #272]	; (800d820 <MX_LWIP_Init+0x238>)
 800d70e:	785b      	ldrb	r3, [r3, #1]
 800d710:	041b      	lsls	r3, r3, #16
 800d712:	4319      	orrs	r1, r3
 800d714:	4b42      	ldr	r3, [pc, #264]	; (800d820 <MX_LWIP_Init+0x238>)
 800d716:	789b      	ldrb	r3, [r3, #2]
 800d718:	021b      	lsls	r3, r3, #8
 800d71a:	430b      	orrs	r3, r1
 800d71c:	4940      	ldr	r1, [pc, #256]	; (800d820 <MX_LWIP_Init+0x238>)
 800d71e:	78c9      	ldrb	r1, [r1, #3]
 800d720:	430b      	orrs	r3, r1
 800d722:	0a1b      	lsrs	r3, r3, #8
 800d724:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d728:	431a      	orrs	r2, r3
 800d72a:	4b3d      	ldr	r3, [pc, #244]	; (800d820 <MX_LWIP_Init+0x238>)
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	0619      	lsls	r1, r3, #24
 800d730:	4b3b      	ldr	r3, [pc, #236]	; (800d820 <MX_LWIP_Init+0x238>)
 800d732:	785b      	ldrb	r3, [r3, #1]
 800d734:	041b      	lsls	r3, r3, #16
 800d736:	4319      	orrs	r1, r3
 800d738:	4b39      	ldr	r3, [pc, #228]	; (800d820 <MX_LWIP_Init+0x238>)
 800d73a:	789b      	ldrb	r3, [r3, #2]
 800d73c:	021b      	lsls	r3, r3, #8
 800d73e:	430b      	orrs	r3, r1
 800d740:	4937      	ldr	r1, [pc, #220]	; (800d820 <MX_LWIP_Init+0x238>)
 800d742:	78c9      	ldrb	r1, [r1, #3]
 800d744:	430b      	orrs	r3, r1
 800d746:	0e1b      	lsrs	r3, r3, #24
 800d748:	4313      	orrs	r3, r2
 800d74a:	4a38      	ldr	r2, [pc, #224]	; (800d82c <MX_LWIP_Init+0x244>)
 800d74c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800d74e:	4b35      	ldr	r3, [pc, #212]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	061a      	lsls	r2, r3, #24
 800d754:	4b33      	ldr	r3, [pc, #204]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d756:	785b      	ldrb	r3, [r3, #1]
 800d758:	041b      	lsls	r3, r3, #16
 800d75a:	431a      	orrs	r2, r3
 800d75c:	4b31      	ldr	r3, [pc, #196]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d75e:	789b      	ldrb	r3, [r3, #2]
 800d760:	021b      	lsls	r3, r3, #8
 800d762:	4313      	orrs	r3, r2
 800d764:	4a2f      	ldr	r2, [pc, #188]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d766:	78d2      	ldrb	r2, [r2, #3]
 800d768:	4313      	orrs	r3, r2
 800d76a:	061a      	lsls	r2, r3, #24
 800d76c:	4b2d      	ldr	r3, [pc, #180]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	0619      	lsls	r1, r3, #24
 800d772:	4b2c      	ldr	r3, [pc, #176]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d774:	785b      	ldrb	r3, [r3, #1]
 800d776:	041b      	lsls	r3, r3, #16
 800d778:	4319      	orrs	r1, r3
 800d77a:	4b2a      	ldr	r3, [pc, #168]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d77c:	789b      	ldrb	r3, [r3, #2]
 800d77e:	021b      	lsls	r3, r3, #8
 800d780:	430b      	orrs	r3, r1
 800d782:	4928      	ldr	r1, [pc, #160]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d784:	78c9      	ldrb	r1, [r1, #3]
 800d786:	430b      	orrs	r3, r1
 800d788:	021b      	lsls	r3, r3, #8
 800d78a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d78e:	431a      	orrs	r2, r3
 800d790:	4b24      	ldr	r3, [pc, #144]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	0619      	lsls	r1, r3, #24
 800d796:	4b23      	ldr	r3, [pc, #140]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d798:	785b      	ldrb	r3, [r3, #1]
 800d79a:	041b      	lsls	r3, r3, #16
 800d79c:	4319      	orrs	r1, r3
 800d79e:	4b21      	ldr	r3, [pc, #132]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d7a0:	789b      	ldrb	r3, [r3, #2]
 800d7a2:	021b      	lsls	r3, r3, #8
 800d7a4:	430b      	orrs	r3, r1
 800d7a6:	491f      	ldr	r1, [pc, #124]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d7a8:	78c9      	ldrb	r1, [r1, #3]
 800d7aa:	430b      	orrs	r3, r1
 800d7ac:	0a1b      	lsrs	r3, r3, #8
 800d7ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d7b2:	431a      	orrs	r2, r3
 800d7b4:	4b1b      	ldr	r3, [pc, #108]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	0619      	lsls	r1, r3, #24
 800d7ba:	4b1a      	ldr	r3, [pc, #104]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d7bc:	785b      	ldrb	r3, [r3, #1]
 800d7be:	041b      	lsls	r3, r3, #16
 800d7c0:	4319      	orrs	r1, r3
 800d7c2:	4b18      	ldr	r3, [pc, #96]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d7c4:	789b      	ldrb	r3, [r3, #2]
 800d7c6:	021b      	lsls	r3, r3, #8
 800d7c8:	430b      	orrs	r3, r1
 800d7ca:	4916      	ldr	r1, [pc, #88]	; (800d824 <MX_LWIP_Init+0x23c>)
 800d7cc:	78c9      	ldrb	r1, [r1, #3]
 800d7ce:	430b      	orrs	r3, r1
 800d7d0:	0e1b      	lsrs	r3, r3, #24
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	4a16      	ldr	r2, [pc, #88]	; (800d830 <MX_LWIP_Init+0x248>)
 800d7d6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800d7d8:	4b16      	ldr	r3, [pc, #88]	; (800d834 <MX_LWIP_Init+0x24c>)
 800d7da:	9302      	str	r3, [sp, #8]
 800d7dc:	4b16      	ldr	r3, [pc, #88]	; (800d838 <MX_LWIP_Init+0x250>)
 800d7de:	9301      	str	r3, [sp, #4]
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	4b12      	ldr	r3, [pc, #72]	; (800d830 <MX_LWIP_Init+0x248>)
 800d7e6:	4a11      	ldr	r2, [pc, #68]	; (800d82c <MX_LWIP_Init+0x244>)
 800d7e8:	490f      	ldr	r1, [pc, #60]	; (800d828 <MX_LWIP_Init+0x240>)
 800d7ea:	4814      	ldr	r0, [pc, #80]	; (800d83c <MX_LWIP_Init+0x254>)
 800d7ec:	f7f6 fa70 	bl	8003cd0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d7f0:	4812      	ldr	r0, [pc, #72]	; (800d83c <MX_LWIP_Init+0x254>)
 800d7f2:	f7f6 fb4d 	bl	8003e90 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800d7f6:	4b11      	ldr	r3, [pc, #68]	; (800d83c <MX_LWIP_Init+0x254>)
 800d7f8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d7fc:	089b      	lsrs	r3, r3, #2
 800d7fe:	f003 0301 	and.w	r3, r3, #1
 800d802:	b2db      	uxtb	r3, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	d003      	beq.n	800d810 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800d808:	480c      	ldr	r0, [pc, #48]	; (800d83c <MX_LWIP_Init+0x254>)
 800d80a:	f7f6 fb51 	bl	8003eb0 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800d80e:	e002      	b.n	800d816 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 800d810:	480a      	ldr	r0, [pc, #40]	; (800d83c <MX_LWIP_Init+0x254>)
 800d812:	f7f6 fb91 	bl	8003f38 <netif_set_down>
}
 800d816:	bf00      	nop
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	20006888 	.word	0x20006888
 800d820:	20006884 	.word	0x20006884
 800d824:	2000687c 	.word	0x2000687c
 800d828:	20006880 	.word	0x20006880
 800d82c:	2000688c 	.word	0x2000688c
 800d830:	20006890 	.word	0x20006890
 800d834:	0800cc7d 	.word	0x0800cc7d
 800d838:	0800d3d1 	.word	0x0800d3d1
 800d83c:	20003764 	.word	0x20003764

0800d840 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800d844:	4803      	ldr	r0, [pc, #12]	; (800d854 <MX_LWIP_Process+0x14>)
 800d846:	f7ff fda3 	bl	800d390 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 800d84a:	f7fc fccb 	bl	800a1e4 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800d84e:	bf00      	nop
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20003764 	.word	0x20003764

0800d858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 800d85e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d860:	f7f2 feae 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d864:	f000 f828 	bl	800d8b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d868:	f7ff fde8 	bl	800d43c <MX_GPIO_Init>
  MX_LWIP_Init();
 800d86c:	f7ff febc 	bl	800d5e8 <MX_LWIP_Init>
  MX_USART6_UART_Init();
 800d870:	f000 fb74 	bl	800df5c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  udp_client_init();
 800d874:	f000 fb2a 	bl	800decc <udp_client_init>
  struct tcp_pcb *tpcb;
  tpcb = tcp_client_init();
 800d878:	f000 f9fc 	bl	800dc74 <tcp_client_init>
 800d87c:	f8c7 03e8 	str.w	r0, [r7, #1000]	; 0x3e8
  int i;
  char message[1000];
  for(i = 0; i < 1000; i++){
 800d880:	2300      	movs	r3, #0
 800d882:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800d886:	e00a      	b.n	800d89e <main+0x46>
	  message[i] = 0xff;
 800d888:	463a      	mov	r2, r7
 800d88a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800d88e:	4413      	add	r3, r2
 800d890:	22ff      	movs	r2, #255	; 0xff
 800d892:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < 1000; i++){
 800d894:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800d898:	3301      	adds	r3, #1
 800d89a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800d89e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800d8a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8a6:	dbef      	blt.n	800d888 <main+0x30>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 800d8a8:	f7ff ffca 	bl	800d840 <MX_LWIP_Process>

	  //tcp_write(tpcb, message, 500, 0);

	  udp_client_send(message);
 800d8ac:	463b      	mov	r3, r7
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 fae0 	bl	800de74 <udp_client_send>
	  MX_LWIP_Process();
 800d8b4:	e7f8      	b.n	800d8a8 <main+0x50>
	...

0800d8b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b0b4      	sub	sp, #208	; 0xd0
 800d8bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d8be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d8c2:	2230      	movs	r2, #48	; 0x30
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f000 fc24 	bl	800e114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d8cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	601a      	str	r2, [r3, #0]
 800d8d4:	605a      	str	r2, [r3, #4]
 800d8d6:	609a      	str	r2, [r3, #8]
 800d8d8:	60da      	str	r2, [r3, #12]
 800d8da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d8dc:	f107 0308 	add.w	r3, r7, #8
 800d8e0:	2284      	movs	r2, #132	; 0x84
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f000 fc15 	bl	800e114 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800d8ea:	f7f4 f907 	bl	8001afc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d8ee:	4b39      	ldr	r3, [pc, #228]	; (800d9d4 <SystemClock_Config+0x11c>)
 800d8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8f2:	4a38      	ldr	r2, [pc, #224]	; (800d9d4 <SystemClock_Config+0x11c>)
 800d8f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8f8:	6413      	str	r3, [r2, #64]	; 0x40
 800d8fa:	4b36      	ldr	r3, [pc, #216]	; (800d9d4 <SystemClock_Config+0x11c>)
 800d8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d902:	607b      	str	r3, [r7, #4]
 800d904:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d906:	4b34      	ldr	r3, [pc, #208]	; (800d9d8 <SystemClock_Config+0x120>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a33      	ldr	r2, [pc, #204]	; (800d9d8 <SystemClock_Config+0x120>)
 800d90c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d910:	6013      	str	r3, [r2, #0]
 800d912:	4b31      	ldr	r3, [pc, #196]	; (800d9d8 <SystemClock_Config+0x120>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d91a:	603b      	str	r3, [r7, #0]
 800d91c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d91e:	2301      	movs	r3, #1
 800d920:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800d924:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800d928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d92c:	2302      	movs	r3, #2
 800d92e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d936:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d93a:	2304      	movs	r3, #4
 800d93c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800d940:	23d8      	movs	r3, #216	; 0xd8
 800d942:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d946:	2302      	movs	r3, #2
 800d948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800d94c:	2303      	movs	r3, #3
 800d94e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d952:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d956:	4618      	mov	r0, r3
 800d958:	f7f4 f930 	bl	8001bbc <HAL_RCC_OscConfig>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d001      	beq.n	800d966 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800d962:	f000 f83b 	bl	800d9dc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800d966:	f7f4 f8d9 	bl	8001b1c <HAL_PWREx_EnableOverDrive>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800d970:	f000 f834 	bl	800d9dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d974:	230f      	movs	r3, #15
 800d976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d97a:	2302      	movs	r3, #2
 800d97c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d980:	2300      	movs	r3, #0
 800d982:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d98a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d98e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800d996:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d99a:	2107      	movs	r1, #7
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7f4 fb7d 	bl	800209c <HAL_RCC_ClockConfig>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d001      	beq.n	800d9ac <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800d9a8:	f000 f818 	bl	800d9dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800d9ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d9b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d9b6:	f107 0308 	add.w	r3, r7, #8
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7f4 fd62 	bl	8002484 <HAL_RCCEx_PeriphCLKConfig>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d001      	beq.n	800d9ca <SystemClock_Config+0x112>
  {
    Error_Handler();
 800d9c6:	f000 f809 	bl	800d9dc <Error_Handler>
  }
}
 800d9ca:	bf00      	nop
 800d9cc:	37d0      	adds	r7, #208	; 0xd0
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	40023800 	.word	0x40023800
 800d9d8:	40007000 	.word	0x40007000

0800d9dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d9e0:	bf00      	nop
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
	...

0800d9ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800d9f2:	4b0f      	ldr	r3, [pc, #60]	; (800da30 <HAL_MspInit+0x44>)
 800d9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f6:	4a0e      	ldr	r2, [pc, #56]	; (800da30 <HAL_MspInit+0x44>)
 800d9f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9fc:	6413      	str	r3, [r2, #64]	; 0x40
 800d9fe:	4b0c      	ldr	r3, [pc, #48]	; (800da30 <HAL_MspInit+0x44>)
 800da00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da06:	607b      	str	r3, [r7, #4]
 800da08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da0a:	4b09      	ldr	r3, [pc, #36]	; (800da30 <HAL_MspInit+0x44>)
 800da0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da0e:	4a08      	ldr	r2, [pc, #32]	; (800da30 <HAL_MspInit+0x44>)
 800da10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da14:	6453      	str	r3, [r2, #68]	; 0x44
 800da16:	4b06      	ldr	r3, [pc, #24]	; (800da30 <HAL_MspInit+0x44>)
 800da18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da1e:	603b      	str	r3, [r7, #0]
 800da20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800da22:	bf00      	nop
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	40023800 	.word	0x40023800

0800da34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800da34:	b480      	push	{r7}
 800da36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800da38:	bf00      	nop
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr

0800da42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800da42:	b480      	push	{r7}
 800da44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800da46:	e7fe      	b.n	800da46 <HardFault_Handler+0x4>

0800da48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800da48:	b480      	push	{r7}
 800da4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800da4c:	e7fe      	b.n	800da4c <MemManage_Handler+0x4>

0800da4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800da4e:	b480      	push	{r7}
 800da50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800da52:	e7fe      	b.n	800da52 <BusFault_Handler+0x4>

0800da54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800da54:	b480      	push	{r7}
 800da56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800da58:	e7fe      	b.n	800da58 <UsageFault_Handler+0x4>

0800da5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800da5a:	b480      	push	{r7}
 800da5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800da5e:	bf00      	nop
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800da68:	b480      	push	{r7}
 800da6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800da6c:	bf00      	nop
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr

0800da76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800da76:	b480      	push	{r7}
 800da78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800da7a:	bf00      	nop
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800da88:	f7f2 fdd8 	bl	800063c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800da8c:	bf00      	nop
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da9c:	2300      	movs	r3, #0
 800da9e:	617b      	str	r3, [r7, #20]
 800daa0:	e00a      	b.n	800dab8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800daa2:	f3af 8000 	nop.w
 800daa6:	4601      	mov	r1, r0
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	60ba      	str	r2, [r7, #8]
 800daae:	b2ca      	uxtb	r2, r1
 800dab0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	3301      	adds	r3, #1
 800dab6:	617b      	str	r3, [r7, #20]
 800dab8:	697a      	ldr	r2, [r7, #20]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	dbf0      	blt.n	800daa2 <_read+0x12>
	}

return len;
 800dac0:	687b      	ldr	r3, [r7, #4]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3718      	adds	r7, #24
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b086      	sub	sp, #24
 800dace:	af00      	add	r7, sp, #0
 800dad0:	60f8      	str	r0, [r7, #12]
 800dad2:	60b9      	str	r1, [r7, #8]
 800dad4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dad6:	2300      	movs	r3, #0
 800dad8:	617b      	str	r3, [r7, #20]
 800dada:	e009      	b.n	800daf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	1c5a      	adds	r2, r3, #1
 800dae0:	60ba      	str	r2, [r7, #8]
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	4618      	mov	r0, r3
 800dae6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	3301      	adds	r3, #1
 800daee:	617b      	str	r3, [r7, #20]
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	dbf1      	blt.n	800dadc <_write+0x12>
	}
	return len;
 800daf8:	687b      	ldr	r3, [r7, #4]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3718      	adds	r7, #24
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <_close>:

int _close(int file)
{
 800db02:	b480      	push	{r7}
 800db04:	b083      	sub	sp, #12
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
	return -1;
 800db0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db0e:	4618      	mov	r0, r3
 800db10:	370c      	adds	r7, #12
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800db1a:	b480      	push	{r7}
 800db1c:	b083      	sub	sp, #12
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
 800db22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800db2a:	605a      	str	r2, [r3, #4]
	return 0;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	370c      	adds	r7, #12
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <_isatty>:

int _isatty(int file)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
	return 1;
 800db42:	2301      	movs	r3, #1
}
 800db44:	4618      	mov	r0, r3
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800db50:	b480      	push	{r7}
 800db52:	b085      	sub	sp, #20
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
	return 0;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3714      	adds	r7, #20
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr
	...

0800db6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800db74:	4b11      	ldr	r3, [pc, #68]	; (800dbbc <_sbrk+0x50>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d102      	bne.n	800db82 <_sbrk+0x16>
		heap_end = &end;
 800db7c:	4b0f      	ldr	r3, [pc, #60]	; (800dbbc <_sbrk+0x50>)
 800db7e:	4a10      	ldr	r2, [pc, #64]	; (800dbc0 <_sbrk+0x54>)
 800db80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800db82:	4b0e      	ldr	r3, [pc, #56]	; (800dbbc <_sbrk+0x50>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800db88:	4b0c      	ldr	r3, [pc, #48]	; (800dbbc <_sbrk+0x50>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	4413      	add	r3, r2
 800db90:	466a      	mov	r2, sp
 800db92:	4293      	cmp	r3, r2
 800db94:	d905      	bls.n	800dba2 <_sbrk+0x36>
	{
		errno = ENOMEM;
 800db96:	4b0b      	ldr	r3, [pc, #44]	; (800dbc4 <_sbrk+0x58>)
 800db98:	220c      	movs	r2, #12
 800db9a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800db9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dba0:	e006      	b.n	800dbb0 <_sbrk+0x44>
	}

	heap_end += incr;
 800dba2:	4b06      	ldr	r3, [pc, #24]	; (800dbbc <_sbrk+0x50>)
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4413      	add	r3, r2
 800dbaa:	4a04      	ldr	r2, [pc, #16]	; (800dbbc <_sbrk+0x50>)
 800dbac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800dbae:	68fb      	ldr	r3, [r7, #12]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3714      	adds	r7, #20
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	20000204 	.word	0x20000204
 800dbc0:	20006918 	.word	0x20006918
 800dbc4:	20006914 	.word	0x20006914

0800dbc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dbcc:	4b15      	ldr	r3, [pc, #84]	; (800dc24 <SystemInit+0x5c>)
 800dbce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbd2:	4a14      	ldr	r2, [pc, #80]	; (800dc24 <SystemInit+0x5c>)
 800dbd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dbd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800dbdc:	4b12      	ldr	r3, [pc, #72]	; (800dc28 <SystemInit+0x60>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a11      	ldr	r2, [pc, #68]	; (800dc28 <SystemInit+0x60>)
 800dbe2:	f043 0301 	orr.w	r3, r3, #1
 800dbe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800dbe8:	4b0f      	ldr	r3, [pc, #60]	; (800dc28 <SystemInit+0x60>)
 800dbea:	2200      	movs	r2, #0
 800dbec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800dbee:	4b0e      	ldr	r3, [pc, #56]	; (800dc28 <SystemInit+0x60>)
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	490d      	ldr	r1, [pc, #52]	; (800dc28 <SystemInit+0x60>)
 800dbf4:	4b0d      	ldr	r3, [pc, #52]	; (800dc2c <SystemInit+0x64>)
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800dbfa:	4b0b      	ldr	r3, [pc, #44]	; (800dc28 <SystemInit+0x60>)
 800dbfc:	4a0c      	ldr	r2, [pc, #48]	; (800dc30 <SystemInit+0x68>)
 800dbfe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800dc00:	4b09      	ldr	r3, [pc, #36]	; (800dc28 <SystemInit+0x60>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4a08      	ldr	r2, [pc, #32]	; (800dc28 <SystemInit+0x60>)
 800dc06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dc0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800dc0c:	4b06      	ldr	r3, [pc, #24]	; (800dc28 <SystemInit+0x60>)
 800dc0e:	2200      	movs	r2, #0
 800dc10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800dc12:	4b04      	ldr	r3, [pc, #16]	; (800dc24 <SystemInit+0x5c>)
 800dc14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dc18:	609a      	str	r2, [r3, #8]
#endif
}
 800dc1a:	bf00      	nop
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	e000ed00 	.word	0xe000ed00
 800dc28:	40023800 	.word	0x40023800
 800dc2c:	fef6ffff 	.word	0xfef6ffff
 800dc30:	24003010 	.word	0x24003010

0800dc34 <tcp_client_connected>:
static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err);
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err);

// call back function for connect server
static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	4613      	mov	r3, r2
 800dc40:	71fb      	strb	r3, [r7, #7]
    printf("tcp client connected\r\n");
 800dc42:	4809      	ldr	r0, [pc, #36]	; (800dc68 <tcp_client_connected+0x34>)
 800dc44:	f000 faf6 	bl	800e234 <puts>

    tcp_write(tpcb, "tcp client connected", strlen("tcp client connected"), 0);
 800dc48:	2300      	movs	r3, #0
 800dc4a:	2214      	movs	r2, #20
 800dc4c:	4907      	ldr	r1, [pc, #28]	; (800dc6c <tcp_client_connected+0x38>)
 800dc4e:	68b8      	ldr	r0, [r7, #8]
 800dc50:	f7fb f838 	bl	8008cc4 <tcp_write>

    // call back function for receiving
    tcp_recv(tpcb, tcp_client_recv);
 800dc54:	4906      	ldr	r1, [pc, #24]	; (800dc70 <tcp_client_connected+0x3c>)
 800dc56:	68b8      	ldr	r0, [r7, #8]
 800dc58:	f7f8 fa82 	bl	8006160 <tcp_recv>

    return ERR_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	08010d10 	.word	0x08010d10
 800dc6c:	08010d28 	.word	0x08010d28
 800dc70:	0800dcdd 	.word	0x0800dcdd

0800dc74 <tcp_client_init>:

struct tcp_pcb* tcp_client_init(void)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
    struct tcp_pcb *tpcb;
    ip_addr_t serverIp;

    // set server ip
    IP4_ADDR(&serverIp, SERVER_IP1, SERVER_IP2, SERVER_IP3, SERVER_IP4);
 800dc7a:	4b14      	ldr	r3, [pc, #80]	; (800dccc <tcp_client_init+0x58>)
 800dc7c:	607b      	str	r3, [r7, #4]

    // create tcp control module
    tpcb = tcp_new();
 800dc7e:	f7f8 fa67 	bl	8006150 <tcp_new>
 800dc82:	60f8      	str	r0, [r7, #12]

    if (tpcb != NULL)
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d01a      	beq.n	800dcc0 <tcp_client_init+0x4c>
    {
        err_t err;

        // bind local ip and port number
        err = tcp_bind(tpcb, IP_ADDR_ANY, TCP_LOCAL_PORT);
 800dc8a:	f242 22b0 	movw	r2, #8880	; 0x22b0
 800dc8e:	4910      	ldr	r1, [pc, #64]	; (800dcd0 <tcp_client_init+0x5c>)
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f7f7 fab5 	bl	8005200 <tcp_bind>
 800dc96:	4603      	mov	r3, r0
 800dc98:	72fb      	strb	r3, [r7, #11]

        if (err == ERR_OK)
 800dc9a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d107      	bne.n	800dcb2 <tcp_client_init+0x3e>
        {
            // connect to server
            tcp_connect(tpcb, &serverIp, TCP_REMOTE_PORT, tcp_client_connected);
 800dca2:	1d39      	adds	r1, r7, #4
 800dca4:	4b0b      	ldr	r3, [pc, #44]	; (800dcd4 <tcp_client_init+0x60>)
 800dca6:	f242 22b1 	movw	r2, #8881	; 0x22b1
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f7f7 fc26 	bl	80054fc <tcp_connect>
 800dcb0:	e006      	b.n	800dcc0 <tcp_client_init+0x4c>
        }
        else
        {
            memp_free(MEMP_TCP_PCB, tpcb);
 800dcb2:	68f9      	ldr	r1, [r7, #12]
 800dcb4:	2001      	movs	r0, #1
 800dcb6:	f7f5 ffd9 	bl	8003c6c <memp_free>

            printf("can not bind pcb\r\n");
 800dcba:	4807      	ldr	r0, [pc, #28]	; (800dcd8 <tcp_client_init+0x64>)
 800dcbc:	f000 faba 	bl	800e234 <puts>
        }
    }
    return tpcb;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	bbd4fea9 	.word	0xbbd4fea9
 800dcd0:	08010ed4 	.word	0x08010ed4
 800dcd4:	0800dc35 	.word	0x0800dc35
 800dcd8:	08010d40 	.word	0x08010d40

0800dcdc <tcp_client_recv>:

static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 800dcdc:	b590      	push	{r4, r7, lr}
 800dcde:	b089      	sub	sp, #36	; 0x24
 800dce0:	af02      	add	r7, sp, #8
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
 800dce8:	70fb      	strb	r3, [r7, #3]
    uint32_t i;

    // send data back
    tcp_write(tpcb, p->payload, p->len, 1);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6859      	ldr	r1, [r3, #4]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	895a      	ldrh	r2, [r3, #10]
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	68b8      	ldr	r0, [r7, #8]
 800dcf6:	f7fa ffe5 	bl	8008cc4 <tcp_write>

    if (p != NULL)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d045      	beq.n	800dd8c <tcp_client_recv+0xb0>
    {
        struct pbuf *ptmp = p;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	613b      	str	r3, [r7, #16]

        // print received data
        printf("get msg from %d:%d:%d:%d port:%d:\r\n",
            *((uint8_t *)&tpcb->remote_ip.addr),
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	3304      	adds	r3, #4
 800dd08:	781b      	ldrb	r3, [r3, #0]
        printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800dd0a:	4619      	mov	r1, r3
            *((uint8_t *)&tpcb->remote_ip.addr + 1),
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	3304      	adds	r3, #4
 800dd10:	3301      	adds	r3, #1
 800dd12:	781b      	ldrb	r3, [r3, #0]
        printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800dd14:	4618      	mov	r0, r3
            *((uint8_t *)&tpcb->remote_ip.addr + 2),
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	3304      	adds	r3, #4
 800dd1a:	3302      	adds	r3, #2
 800dd1c:	781b      	ldrb	r3, [r3, #0]
        printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800dd1e:	461c      	mov	r4, r3
            *((uint8_t *)&tpcb->remote_ip.addr + 3),
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	3304      	adds	r3, #4
 800dd24:	3303      	adds	r3, #3
 800dd26:	781b      	ldrb	r3, [r3, #0]
        printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800dd28:	461a      	mov	r2, r3
            tpcb->remote_port);
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	8b1b      	ldrh	r3, [r3, #24]
        printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800dd2e:	9301      	str	r3, [sp, #4]
 800dd30:	9200      	str	r2, [sp, #0]
 800dd32:	4623      	mov	r3, r4
 800dd34:	4602      	mov	r2, r0
 800dd36:	4821      	ldr	r0, [pc, #132]	; (800ddbc <tcp_client_recv+0xe0>)
 800dd38:	f000 f9f4 	bl	800e124 <iprintf>

        while(ptmp != NULL)
 800dd3c:	e016      	b.n	800dd6c <tcp_client_recv+0x90>
        {
            for (i = 0; i < p->len; i++)
 800dd3e:	2300      	movs	r3, #0
 800dd40:	617b      	str	r3, [r7, #20]
 800dd42:	e00a      	b.n	800dd5a <tcp_client_recv+0x7e>
            {
                printf("%c", *((char *)p->payload + i));
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	685a      	ldr	r2, [r3, #4]
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 fa00 	bl	800e154 <putchar>
            for (i = 0; i < p->len; i++)
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	3301      	adds	r3, #1
 800dd58:	617b      	str	r3, [r7, #20]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	895b      	ldrh	r3, [r3, #10]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d3ee      	bcc.n	800dd44 <tcp_client_recv+0x68>
            }

            ptmp = p->next;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	613b      	str	r3, [r7, #16]
        while(ptmp != NULL)
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1e5      	bne.n	800dd3e <tcp_client_recv+0x62>
        }

        printf("\r\n");
 800dd72:	4813      	ldr	r0, [pc, #76]	; (800ddc0 <tcp_client_recv+0xe4>)
 800dd74:	f000 fa5e 	bl	800e234 <puts>

        tcp_recved(tpcb, p->tot_len);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	891b      	ldrh	r3, [r3, #8]
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	68b8      	ldr	r0, [r7, #8]
 800dd80:	f7f7 fb1e 	bl	80053c0 <tcp_recved>

        pbuf_free(p);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7f6 fc9b 	bl	80046c0 <pbuf_free>
 800dd8a:	e011      	b.n	800ddb0 <tcp_client_recv+0xd4>
    }
    else if (err == ERR_OK)
 800dd8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d10d      	bne.n	800ddb0 <tcp_client_recv+0xd4>
    {
        printf("tcp client closed\r\n");
 800dd94:	480b      	ldr	r0, [pc, #44]	; (800ddc4 <tcp_client_recv+0xe8>)
 800dd96:	f000 fa4d 	bl	800e234 <puts>

        tcp_recved(tpcb, p->tot_len);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	891b      	ldrh	r3, [r3, #8]
 800dd9e:	4619      	mov	r1, r3
 800dda0:	68b8      	ldr	r0, [r7, #8]
 800dda2:	f7f7 fb0d 	bl	80053c0 <tcp_recved>

        return tcp_close(tpcb);
 800dda6:	68b8      	ldr	r0, [r7, #8]
 800dda8:	f7f7 f954 	bl	8005054 <tcp_close>
 800ddac:	4603      	mov	r3, r0
 800ddae:	e000      	b.n	800ddb2 <tcp_client_recv+0xd6>
    }

    return ERR_OK;
 800ddb0:	2300      	movs	r3, #0
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	371c      	adds	r7, #28
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd90      	pop	{r4, r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	08010d54 	.word	0x08010d54
 800ddc0:	08010d78 	.word	0x08010d78
 800ddc4:	08010d7c 	.word	0x08010d7c

0800ddc8 <udp_receive_callback>:
 * 描述  : 接收回调函数
 * 参数  : -
 * 返回  : 无
******************************************************************************/
static void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ddc8:	b590      	push	{r4, r7, lr}
 800ddca:	b089      	sub	sp, #36	; 0x24
 800ddcc:	af02      	add	r7, sp, #8
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
 800ddd4:	603b      	str	r3, [r7, #0]
    uint32_t i;

    /* 数据回传 */
    udp_send(upcb, p);
 800ddd6:	6879      	ldr	r1, [r7, #4]
 800ddd8:	68b8      	ldr	r0, [r7, #8]
 800ddda:	f7fc fbb7 	bl	800a54c <udp_send>
    udp_sendto(upcb, p, addr, port);
 800ddde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dde0:	683a      	ldr	r2, [r7, #0]
 800dde2:	6879      	ldr	r1, [r7, #4]
 800dde4:	68b8      	ldr	r0, [r7, #8]
 800dde6:	f7fc fbc9 	bl	800a57c <udp_sendto>

    /* 打印接收到的数据 */
    printf("get msg from %d:%d:%d:%d port:%d:\r\n",
        *((uint8_t *)&addr->addr), *((uint8_t *)&addr->addr + 1),
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	781b      	ldrb	r3, [r3, #0]
    printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800ddee:	4619      	mov	r1, r3
        *((uint8_t *)&addr->addr), *((uint8_t *)&addr->addr + 1),
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	781b      	ldrb	r3, [r3, #0]
    printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800ddf6:	4618      	mov	r0, r3
        *((uint8_t *)&addr->addr + 2), *((uint8_t *)&addr->addr + 3), port);
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	3302      	adds	r3, #2
 800ddfc:	781b      	ldrb	r3, [r3, #0]
    printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800ddfe:	461c      	mov	r4, r3
        *((uint8_t *)&addr->addr + 2), *((uint8_t *)&addr->addr + 3), port);
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	3303      	adds	r3, #3
 800de04:	781b      	ldrb	r3, [r3, #0]
    printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800de06:	461a      	mov	r2, r3
 800de08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de0a:	9301      	str	r3, [sp, #4]
 800de0c:	9200      	str	r2, [sp, #0]
 800de0e:	4623      	mov	r3, r4
 800de10:	4602      	mov	r2, r0
 800de12:	4816      	ldr	r0, [pc, #88]	; (800de6c <udp_receive_callback+0xa4>)
 800de14:	f000 f986 	bl	800e124 <iprintf>

    if (p != NULL)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d01f      	beq.n	800de5e <udp_receive_callback+0x96>
    {
        struct pbuf *ptmp = p;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	613b      	str	r3, [r7, #16]

        while(ptmp != NULL)
 800de22:	e016      	b.n	800de52 <udp_receive_callback+0x8a>
        {
            for (i = 0; i < p->len; i++)
 800de24:	2300      	movs	r3, #0
 800de26:	617b      	str	r3, [r7, #20]
 800de28:	e00a      	b.n	800de40 <udp_receive_callback+0x78>
            {
                printf("%c", *((char *)p->payload + i));
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	685a      	ldr	r2, [r3, #4]
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	4413      	add	r3, r2
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	4618      	mov	r0, r3
 800de36:	f000 f98d 	bl	800e154 <putchar>
            for (i = 0; i < p->len; i++)
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	3301      	adds	r3, #1
 800de3e:	617b      	str	r3, [r7, #20]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	895b      	ldrh	r3, [r3, #10]
 800de44:	461a      	mov	r2, r3
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	4293      	cmp	r3, r2
 800de4a:	d3ee      	bcc.n	800de2a <udp_receive_callback+0x62>
            }

            ptmp = p->next;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	613b      	str	r3, [r7, #16]
        while(ptmp != NULL)
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1e5      	bne.n	800de24 <udp_receive_callback+0x5c>
        }

        printf("\r\n");
 800de58:	4805      	ldr	r0, [pc, #20]	; (800de70 <udp_receive_callback+0xa8>)
 800de5a:	f000 f9eb 	bl	800e234 <puts>
    }

    /* 释放缓冲区数据 */
    pbuf_free(p);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7f6 fc2e 	bl	80046c0 <pbuf_free>
}
 800de64:	bf00      	nop
 800de66:	371c      	adds	r7, #28
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd90      	pop	{r4, r7, pc}
 800de6c:	08010d90 	.word	0x08010d90
 800de70:	08010db4 	.word	0x08010db4

0800de74 <udp_client_send>:
 * 描述  : 发送udp数据
 * 参数  : (in)pData 发送数据的指针
 * 返回  : 无
******************************************************************************/
void udp_client_send(char *pData)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
    struct pbuf *p;

    /* 分配缓冲区空间 */
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(pData), PBUF_POOL);
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f7f2 f9c7 	bl	8000210 <strlen>
 800de82:	4603      	mov	r3, r0
 800de84:	b29b      	uxth	r3, r3
 800de86:	2203      	movs	r2, #3
 800de88:	4619      	mov	r1, r3
 800de8a:	2000      	movs	r0, #0
 800de8c:	f7f6 f8a6 	bl	8003fdc <pbuf_alloc>
 800de90:	60f8      	str	r0, [r7, #12]

    if (p != NULL)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d012      	beq.n	800debe <udp_client_send+0x4a>
    {
        /* 填充缓冲区数据 */
        pbuf_take(p, pData, strlen(pData));
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7f2 f9b9 	bl	8000210 <strlen>
 800de9e:	4603      	mov	r3, r0
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	461a      	mov	r2, r3
 800dea4:	6879      	ldr	r1, [r7, #4]
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f7f6 fe84 	bl	8004bb4 <pbuf_take>

        /* 发送udp数据 */
        udp_send(upcb, p);
 800deac:	4b06      	ldr	r3, [pc, #24]	; (800dec8 <udp_client_send+0x54>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68f9      	ldr	r1, [r7, #12]
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fc fb4a 	bl	800a54c <udp_send>

        /* 释放缓冲区空间 */
        pbuf_free(p);
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f7f6 fc01 	bl	80046c0 <pbuf_free>
    }
}
 800debe:	bf00      	nop
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	20000208 	.word	0x20000208

0800decc <udp_client_init>:
 * 描述  : 创建udp客户端
 * 参数  : 无
 * 返回  : 无
******************************************************************************/
void udp_client_init(void)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
    ip_addr_t serverIP;
    err_t err;

    IP4_ADDR(&serverIP, SERVER_IP1, SERVER_IP2, SERVER_IP3, SERVER_IP4);
 800ded2:	4b1c      	ldr	r3, [pc, #112]	; (800df44 <udp_client_init+0x78>)
 800ded4:	603b      	str	r3, [r7, #0]

    /* 创建udp控制块 */
    upcb = udp_new();
 800ded6:	f7fc fd5d 	bl	800a994 <udp_new>
 800deda:	4602      	mov	r2, r0
 800dedc:	4b1a      	ldr	r3, [pc, #104]	; (800df48 <udp_client_init+0x7c>)
 800dede:	601a      	str	r2, [r3, #0]

    if (upcb!=NULL)
 800dee0:	4b19      	ldr	r3, [pc, #100]	; (800df48 <udp_client_init+0x7c>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d028      	beq.n	800df3a <udp_client_init+0x6e>
    {
        /* 配置本地端口 */
        upcb->local_port = UDP_LOCAL_PORT;
 800dee8:	4b17      	ldr	r3, [pc, #92]	; (800df48 <udp_client_init+0x7c>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f242 22b0 	movw	r2, #8880	; 0x22b0
 800def0:	825a      	strh	r2, [r3, #18]

        /* 配置服务器IP和端口 */
        err= udp_connect(upcb, &serverIP, UDP_REMOTE_PORT);
 800def2:	4b15      	ldr	r3, [pc, #84]	; (800df48 <udp_client_init+0x7c>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4639      	mov	r1, r7
 800def8:	f242 22b1 	movw	r2, #8881	; 0x22b1
 800defc:	4618      	mov	r0, r3
 800defe:	f7fc fcaf 	bl	800a860 <udp_connect>
 800df02:	4603      	mov	r3, r0
 800df04:	71fb      	strb	r3, [r7, #7]

        if (err == ERR_OK)
 800df06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10d      	bne.n	800df2a <udp_client_init+0x5e>
        {
            /* 注册接收回调函数 */
            udp_recv(upcb, udp_receive_callback, NULL);
 800df0e:	4b0e      	ldr	r3, [pc, #56]	; (800df48 <udp_client_init+0x7c>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2200      	movs	r2, #0
 800df14:	490d      	ldr	r1, [pc, #52]	; (800df4c <udp_client_init+0x80>)
 800df16:	4618      	mov	r0, r3
 800df18:	f7fc fcf8 	bl	800a90c <udp_recv>

            /* 发送udp数据 */
            udp_client_send("udp client connected");
 800df1c:	480c      	ldr	r0, [pc, #48]	; (800df50 <udp_client_init+0x84>)
 800df1e:	f7ff ffa9 	bl	800de74 <udp_client_send>

            printf("udp client connected\r\n");
 800df22:	480c      	ldr	r0, [pc, #48]	; (800df54 <udp_client_init+0x88>)
 800df24:	f000 f986 	bl	800e234 <puts>
            udp_remove(upcb);

            printf("can not connect udp pcb\r\n");
        }
    }
}
 800df28:	e007      	b.n	800df3a <udp_client_init+0x6e>
            udp_remove(upcb);
 800df2a:	4b07      	ldr	r3, [pc, #28]	; (800df48 <udp_client_init+0x7c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fc fcfe 	bl	800a930 <udp_remove>
            printf("can not connect udp pcb\r\n");
 800df34:	4808      	ldr	r0, [pc, #32]	; (800df58 <udp_client_init+0x8c>)
 800df36:	f000 f97d 	bl	800e234 <puts>
}
 800df3a:	bf00      	nop
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	bbd4fea9 	.word	0xbbd4fea9
 800df48:	20000208 	.word	0x20000208
 800df4c:	0800ddc9 	.word	0x0800ddc9
 800df50:	08010db8 	.word	0x08010db8
 800df54:	08010dd0 	.word	0x08010dd0
 800df58:	08010de8 	.word	0x08010de8

0800df5c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800df60:	4b14      	ldr	r3, [pc, #80]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800df62:	4a15      	ldr	r2, [pc, #84]	; (800dfb8 <MX_USART6_UART_Init+0x5c>)
 800df64:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800df66:	4b13      	ldr	r3, [pc, #76]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800df68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800df6c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800df6e:	4b11      	ldr	r3, [pc, #68]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800df70:	2200      	movs	r2, #0
 800df72:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800df74:	4b0f      	ldr	r3, [pc, #60]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800df76:	2200      	movs	r2, #0
 800df78:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800df7a:	4b0e      	ldr	r3, [pc, #56]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800df7c:	2200      	movs	r2, #0
 800df7e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800df80:	4b0c      	ldr	r3, [pc, #48]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800df82:	220c      	movs	r2, #12
 800df84:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df86:	4b0b      	ldr	r3, [pc, #44]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800df88:	2200      	movs	r2, #0
 800df8a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800df8c:	4b09      	ldr	r3, [pc, #36]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800df8e:	2200      	movs	r2, #0
 800df90:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800df92:	4b08      	ldr	r3, [pc, #32]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800df94:	2200      	movs	r2, #0
 800df96:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800df98:	4b06      	ldr	r3, [pc, #24]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800df9e:	4805      	ldr	r0, [pc, #20]	; (800dfb4 <MX_USART6_UART_Init+0x58>)
 800dfa0:	f7f4 fe5e 	bl	8002c60 <HAL_UART_Init>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800dfaa:	f7ff fd17 	bl	800d9dc <Error_Handler>
  }

}
 800dfae:	bf00      	nop
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	20006894 	.word	0x20006894
 800dfb8:	40011400 	.word	0x40011400

0800dfbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b08a      	sub	sp, #40	; 0x28
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfc4:	f107 0314 	add.w	r3, r7, #20
 800dfc8:	2200      	movs	r2, #0
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	605a      	str	r2, [r3, #4]
 800dfce:	609a      	str	r2, [r3, #8]
 800dfd0:	60da      	str	r2, [r3, #12]
 800dfd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4a17      	ldr	r2, [pc, #92]	; (800e038 <HAL_UART_MspInit+0x7c>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d127      	bne.n	800e02e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800dfde:	4b17      	ldr	r3, [pc, #92]	; (800e03c <HAL_UART_MspInit+0x80>)
 800dfe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfe2:	4a16      	ldr	r2, [pc, #88]	; (800e03c <HAL_UART_MspInit+0x80>)
 800dfe4:	f043 0320 	orr.w	r3, r3, #32
 800dfe8:	6453      	str	r3, [r2, #68]	; 0x44
 800dfea:	4b14      	ldr	r3, [pc, #80]	; (800e03c <HAL_UART_MspInit+0x80>)
 800dfec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfee:	f003 0320 	and.w	r3, r3, #32
 800dff2:	613b      	str	r3, [r7, #16]
 800dff4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dff6:	4b11      	ldr	r3, [pc, #68]	; (800e03c <HAL_UART_MspInit+0x80>)
 800dff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dffa:	4a10      	ldr	r2, [pc, #64]	; (800e03c <HAL_UART_MspInit+0x80>)
 800dffc:	f043 0304 	orr.w	r3, r3, #4
 800e000:	6313      	str	r3, [r2, #48]	; 0x30
 800e002:	4b0e      	ldr	r3, [pc, #56]	; (800e03c <HAL_UART_MspInit+0x80>)
 800e004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e006:	f003 0304 	and.w	r3, r3, #4
 800e00a:	60fb      	str	r3, [r7, #12]
 800e00c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e00e:	23c0      	movs	r3, #192	; 0xc0
 800e010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e012:	2302      	movs	r3, #2
 800e014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e016:	2300      	movs	r3, #0
 800e018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e01a:	2303      	movs	r3, #3
 800e01c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800e01e:	2308      	movs	r3, #8
 800e020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e022:	f107 0314 	add.w	r3, r7, #20
 800e026:	4619      	mov	r1, r3
 800e028:	4805      	ldr	r0, [pc, #20]	; (800e040 <HAL_UART_MspInit+0x84>)
 800e02a:	f7f3 fba3 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800e02e:	bf00      	nop
 800e030:	3728      	adds	r7, #40	; 0x28
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	40011400 	.word	0x40011400
 800e03c:	40023800 	.word	0x40023800
 800e040:	40020800 	.word	0x40020800

0800e044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e07c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e048:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e04a:	e003      	b.n	800e054 <LoopCopyDataInit>

0800e04c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e04c:	4b0c      	ldr	r3, [pc, #48]	; (800e080 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e04e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e050:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e052:	3104      	adds	r1, #4

0800e054 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e054:	480b      	ldr	r0, [pc, #44]	; (800e084 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e056:	4b0c      	ldr	r3, [pc, #48]	; (800e088 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e058:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e05a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e05c:	d3f6      	bcc.n	800e04c <CopyDataInit>
  ldr  r2, =_sbss
 800e05e:	4a0b      	ldr	r2, [pc, #44]	; (800e08c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e060:	e002      	b.n	800e068 <LoopFillZerobss>

0800e062 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e062:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e064:	f842 3b04 	str.w	r3, [r2], #4

0800e068 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e068:	4b09      	ldr	r3, [pc, #36]	; (800e090 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e06a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e06c:	d3f9      	bcc.n	800e062 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e06e:	f7ff fdab 	bl	800dbc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e072:	f000 f811 	bl	800e098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e076:	f7ff fbef 	bl	800d858 <main>
  bx  lr    
 800e07a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e07c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800e080:	08010fa8 	.word	0x08010fa8
  ldr  r0, =_sdata
 800e084:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e088:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800e08c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800e090:	20006918 	.word	0x20006918

0800e094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e094:	e7fe      	b.n	800e094 <ADC_IRQHandler>
	...

0800e098 <__libc_init_array>:
 800e098:	b570      	push	{r4, r5, r6, lr}
 800e09a:	4e0d      	ldr	r6, [pc, #52]	; (800e0d0 <__libc_init_array+0x38>)
 800e09c:	4c0d      	ldr	r4, [pc, #52]	; (800e0d4 <__libc_init_array+0x3c>)
 800e09e:	1ba4      	subs	r4, r4, r6
 800e0a0:	10a4      	asrs	r4, r4, #2
 800e0a2:	2500      	movs	r5, #0
 800e0a4:	42a5      	cmp	r5, r4
 800e0a6:	d109      	bne.n	800e0bc <__libc_init_array+0x24>
 800e0a8:	4e0b      	ldr	r6, [pc, #44]	; (800e0d8 <__libc_init_array+0x40>)
 800e0aa:	4c0c      	ldr	r4, [pc, #48]	; (800e0dc <__libc_init_array+0x44>)
 800e0ac:	f000 ffcc 	bl	800f048 <_init>
 800e0b0:	1ba4      	subs	r4, r4, r6
 800e0b2:	10a4      	asrs	r4, r4, #2
 800e0b4:	2500      	movs	r5, #0
 800e0b6:	42a5      	cmp	r5, r4
 800e0b8:	d105      	bne.n	800e0c6 <__libc_init_array+0x2e>
 800e0ba:	bd70      	pop	{r4, r5, r6, pc}
 800e0bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e0c0:	4798      	blx	r3
 800e0c2:	3501      	adds	r5, #1
 800e0c4:	e7ee      	b.n	800e0a4 <__libc_init_array+0xc>
 800e0c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e0ca:	4798      	blx	r3
 800e0cc:	3501      	adds	r5, #1
 800e0ce:	e7f2      	b.n	800e0b6 <__libc_init_array+0x1e>
 800e0d0:	08010fa0 	.word	0x08010fa0
 800e0d4:	08010fa0 	.word	0x08010fa0
 800e0d8:	08010fa0 	.word	0x08010fa0
 800e0dc:	08010fa4 	.word	0x08010fa4

0800e0e0 <memcmp>:
 800e0e0:	b530      	push	{r4, r5, lr}
 800e0e2:	2400      	movs	r4, #0
 800e0e4:	42a2      	cmp	r2, r4
 800e0e6:	d101      	bne.n	800e0ec <memcmp+0xc>
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	e007      	b.n	800e0fc <memcmp+0x1c>
 800e0ec:	5d03      	ldrb	r3, [r0, r4]
 800e0ee:	3401      	adds	r4, #1
 800e0f0:	190d      	adds	r5, r1, r4
 800e0f2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800e0f6:	42ab      	cmp	r3, r5
 800e0f8:	d0f4      	beq.n	800e0e4 <memcmp+0x4>
 800e0fa:	1b58      	subs	r0, r3, r5
 800e0fc:	bd30      	pop	{r4, r5, pc}

0800e0fe <memcpy>:
 800e0fe:	b510      	push	{r4, lr}
 800e100:	1e43      	subs	r3, r0, #1
 800e102:	440a      	add	r2, r1
 800e104:	4291      	cmp	r1, r2
 800e106:	d100      	bne.n	800e10a <memcpy+0xc>
 800e108:	bd10      	pop	{r4, pc}
 800e10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e10e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e112:	e7f7      	b.n	800e104 <memcpy+0x6>

0800e114 <memset>:
 800e114:	4402      	add	r2, r0
 800e116:	4603      	mov	r3, r0
 800e118:	4293      	cmp	r3, r2
 800e11a:	d100      	bne.n	800e11e <memset+0xa>
 800e11c:	4770      	bx	lr
 800e11e:	f803 1b01 	strb.w	r1, [r3], #1
 800e122:	e7f9      	b.n	800e118 <memset+0x4>

0800e124 <iprintf>:
 800e124:	b40f      	push	{r0, r1, r2, r3}
 800e126:	4b0a      	ldr	r3, [pc, #40]	; (800e150 <iprintf+0x2c>)
 800e128:	b513      	push	{r0, r1, r4, lr}
 800e12a:	681c      	ldr	r4, [r3, #0]
 800e12c:	b124      	cbz	r4, 800e138 <iprintf+0x14>
 800e12e:	69a3      	ldr	r3, [r4, #24]
 800e130:	b913      	cbnz	r3, 800e138 <iprintf+0x14>
 800e132:	4620      	mov	r0, r4
 800e134:	f000 fa36 	bl	800e5a4 <__sinit>
 800e138:	ab05      	add	r3, sp, #20
 800e13a:	9a04      	ldr	r2, [sp, #16]
 800e13c:	68a1      	ldr	r1, [r4, #8]
 800e13e:	9301      	str	r3, [sp, #4]
 800e140:	4620      	mov	r0, r4
 800e142:	f000 fbef 	bl	800e924 <_vfiprintf_r>
 800e146:	b002      	add	sp, #8
 800e148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e14c:	b004      	add	sp, #16
 800e14e:	4770      	bx	lr
 800e150:	20000014 	.word	0x20000014

0800e154 <putchar>:
 800e154:	b538      	push	{r3, r4, r5, lr}
 800e156:	4b08      	ldr	r3, [pc, #32]	; (800e178 <putchar+0x24>)
 800e158:	681c      	ldr	r4, [r3, #0]
 800e15a:	4605      	mov	r5, r0
 800e15c:	b124      	cbz	r4, 800e168 <putchar+0x14>
 800e15e:	69a3      	ldr	r3, [r4, #24]
 800e160:	b913      	cbnz	r3, 800e168 <putchar+0x14>
 800e162:	4620      	mov	r0, r4
 800e164:	f000 fa1e 	bl	800e5a4 <__sinit>
 800e168:	68a2      	ldr	r2, [r4, #8]
 800e16a:	4629      	mov	r1, r5
 800e16c:	4620      	mov	r0, r4
 800e16e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e172:	f000 be75 	b.w	800ee60 <_putc_r>
 800e176:	bf00      	nop
 800e178:	20000014 	.word	0x20000014

0800e17c <_puts_r>:
 800e17c:	b570      	push	{r4, r5, r6, lr}
 800e17e:	460e      	mov	r6, r1
 800e180:	4605      	mov	r5, r0
 800e182:	b118      	cbz	r0, 800e18c <_puts_r+0x10>
 800e184:	6983      	ldr	r3, [r0, #24]
 800e186:	b90b      	cbnz	r3, 800e18c <_puts_r+0x10>
 800e188:	f000 fa0c 	bl	800e5a4 <__sinit>
 800e18c:	69ab      	ldr	r3, [r5, #24]
 800e18e:	68ac      	ldr	r4, [r5, #8]
 800e190:	b913      	cbnz	r3, 800e198 <_puts_r+0x1c>
 800e192:	4628      	mov	r0, r5
 800e194:	f000 fa06 	bl	800e5a4 <__sinit>
 800e198:	4b23      	ldr	r3, [pc, #140]	; (800e228 <_puts_r+0xac>)
 800e19a:	429c      	cmp	r4, r3
 800e19c:	d117      	bne.n	800e1ce <_puts_r+0x52>
 800e19e:	686c      	ldr	r4, [r5, #4]
 800e1a0:	89a3      	ldrh	r3, [r4, #12]
 800e1a2:	071b      	lsls	r3, r3, #28
 800e1a4:	d51d      	bpl.n	800e1e2 <_puts_r+0x66>
 800e1a6:	6923      	ldr	r3, [r4, #16]
 800e1a8:	b1db      	cbz	r3, 800e1e2 <_puts_r+0x66>
 800e1aa:	3e01      	subs	r6, #1
 800e1ac:	68a3      	ldr	r3, [r4, #8]
 800e1ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	60a3      	str	r3, [r4, #8]
 800e1b6:	b9e9      	cbnz	r1, 800e1f4 <_puts_r+0x78>
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	da2e      	bge.n	800e21a <_puts_r+0x9e>
 800e1bc:	4622      	mov	r2, r4
 800e1be:	210a      	movs	r1, #10
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	f000 f83f 	bl	800e244 <__swbuf_r>
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	d011      	beq.n	800e1ee <_puts_r+0x72>
 800e1ca:	200a      	movs	r0, #10
 800e1cc:	e011      	b.n	800e1f2 <_puts_r+0x76>
 800e1ce:	4b17      	ldr	r3, [pc, #92]	; (800e22c <_puts_r+0xb0>)
 800e1d0:	429c      	cmp	r4, r3
 800e1d2:	d101      	bne.n	800e1d8 <_puts_r+0x5c>
 800e1d4:	68ac      	ldr	r4, [r5, #8]
 800e1d6:	e7e3      	b.n	800e1a0 <_puts_r+0x24>
 800e1d8:	4b15      	ldr	r3, [pc, #84]	; (800e230 <_puts_r+0xb4>)
 800e1da:	429c      	cmp	r4, r3
 800e1dc:	bf08      	it	eq
 800e1de:	68ec      	ldreq	r4, [r5, #12]
 800e1e0:	e7de      	b.n	800e1a0 <_puts_r+0x24>
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f000 f87f 	bl	800e2e8 <__swsetup_r>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d0dd      	beq.n	800e1aa <_puts_r+0x2e>
 800e1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	da04      	bge.n	800e202 <_puts_r+0x86>
 800e1f8:	69a2      	ldr	r2, [r4, #24]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	dc06      	bgt.n	800e20c <_puts_r+0x90>
 800e1fe:	290a      	cmp	r1, #10
 800e200:	d004      	beq.n	800e20c <_puts_r+0x90>
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	1c5a      	adds	r2, r3, #1
 800e206:	6022      	str	r2, [r4, #0]
 800e208:	7019      	strb	r1, [r3, #0]
 800e20a:	e7cf      	b.n	800e1ac <_puts_r+0x30>
 800e20c:	4622      	mov	r2, r4
 800e20e:	4628      	mov	r0, r5
 800e210:	f000 f818 	bl	800e244 <__swbuf_r>
 800e214:	3001      	adds	r0, #1
 800e216:	d1c9      	bne.n	800e1ac <_puts_r+0x30>
 800e218:	e7e9      	b.n	800e1ee <_puts_r+0x72>
 800e21a:	6823      	ldr	r3, [r4, #0]
 800e21c:	200a      	movs	r0, #10
 800e21e:	1c5a      	adds	r2, r3, #1
 800e220:	6022      	str	r2, [r4, #0]
 800e222:	7018      	strb	r0, [r3, #0]
 800e224:	e7e5      	b.n	800e1f2 <_puts_r+0x76>
 800e226:	bf00      	nop
 800e228:	08010f24 	.word	0x08010f24
 800e22c:	08010f44 	.word	0x08010f44
 800e230:	08010f04 	.word	0x08010f04

0800e234 <puts>:
 800e234:	4b02      	ldr	r3, [pc, #8]	; (800e240 <puts+0xc>)
 800e236:	4601      	mov	r1, r0
 800e238:	6818      	ldr	r0, [r3, #0]
 800e23a:	f7ff bf9f 	b.w	800e17c <_puts_r>
 800e23e:	bf00      	nop
 800e240:	20000014 	.word	0x20000014

0800e244 <__swbuf_r>:
 800e244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e246:	460e      	mov	r6, r1
 800e248:	4614      	mov	r4, r2
 800e24a:	4605      	mov	r5, r0
 800e24c:	b118      	cbz	r0, 800e256 <__swbuf_r+0x12>
 800e24e:	6983      	ldr	r3, [r0, #24]
 800e250:	b90b      	cbnz	r3, 800e256 <__swbuf_r+0x12>
 800e252:	f000 f9a7 	bl	800e5a4 <__sinit>
 800e256:	4b21      	ldr	r3, [pc, #132]	; (800e2dc <__swbuf_r+0x98>)
 800e258:	429c      	cmp	r4, r3
 800e25a:	d12a      	bne.n	800e2b2 <__swbuf_r+0x6e>
 800e25c:	686c      	ldr	r4, [r5, #4]
 800e25e:	69a3      	ldr	r3, [r4, #24]
 800e260:	60a3      	str	r3, [r4, #8]
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	071a      	lsls	r2, r3, #28
 800e266:	d52e      	bpl.n	800e2c6 <__swbuf_r+0x82>
 800e268:	6923      	ldr	r3, [r4, #16]
 800e26a:	b363      	cbz	r3, 800e2c6 <__swbuf_r+0x82>
 800e26c:	6923      	ldr	r3, [r4, #16]
 800e26e:	6820      	ldr	r0, [r4, #0]
 800e270:	1ac0      	subs	r0, r0, r3
 800e272:	6963      	ldr	r3, [r4, #20]
 800e274:	b2f6      	uxtb	r6, r6
 800e276:	4283      	cmp	r3, r0
 800e278:	4637      	mov	r7, r6
 800e27a:	dc04      	bgt.n	800e286 <__swbuf_r+0x42>
 800e27c:	4621      	mov	r1, r4
 800e27e:	4628      	mov	r0, r5
 800e280:	f000 f926 	bl	800e4d0 <_fflush_r>
 800e284:	bb28      	cbnz	r0, 800e2d2 <__swbuf_r+0x8e>
 800e286:	68a3      	ldr	r3, [r4, #8]
 800e288:	3b01      	subs	r3, #1
 800e28a:	60a3      	str	r3, [r4, #8]
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	1c5a      	adds	r2, r3, #1
 800e290:	6022      	str	r2, [r4, #0]
 800e292:	701e      	strb	r6, [r3, #0]
 800e294:	6963      	ldr	r3, [r4, #20]
 800e296:	3001      	adds	r0, #1
 800e298:	4283      	cmp	r3, r0
 800e29a:	d004      	beq.n	800e2a6 <__swbuf_r+0x62>
 800e29c:	89a3      	ldrh	r3, [r4, #12]
 800e29e:	07db      	lsls	r3, r3, #31
 800e2a0:	d519      	bpl.n	800e2d6 <__swbuf_r+0x92>
 800e2a2:	2e0a      	cmp	r6, #10
 800e2a4:	d117      	bne.n	800e2d6 <__swbuf_r+0x92>
 800e2a6:	4621      	mov	r1, r4
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	f000 f911 	bl	800e4d0 <_fflush_r>
 800e2ae:	b190      	cbz	r0, 800e2d6 <__swbuf_r+0x92>
 800e2b0:	e00f      	b.n	800e2d2 <__swbuf_r+0x8e>
 800e2b2:	4b0b      	ldr	r3, [pc, #44]	; (800e2e0 <__swbuf_r+0x9c>)
 800e2b4:	429c      	cmp	r4, r3
 800e2b6:	d101      	bne.n	800e2bc <__swbuf_r+0x78>
 800e2b8:	68ac      	ldr	r4, [r5, #8]
 800e2ba:	e7d0      	b.n	800e25e <__swbuf_r+0x1a>
 800e2bc:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <__swbuf_r+0xa0>)
 800e2be:	429c      	cmp	r4, r3
 800e2c0:	bf08      	it	eq
 800e2c2:	68ec      	ldreq	r4, [r5, #12]
 800e2c4:	e7cb      	b.n	800e25e <__swbuf_r+0x1a>
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f000 f80d 	bl	800e2e8 <__swsetup_r>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d0cc      	beq.n	800e26c <__swbuf_r+0x28>
 800e2d2:	f04f 37ff 	mov.w	r7, #4294967295
 800e2d6:	4638      	mov	r0, r7
 800e2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	08010f24 	.word	0x08010f24
 800e2e0:	08010f44 	.word	0x08010f44
 800e2e4:	08010f04 	.word	0x08010f04

0800e2e8 <__swsetup_r>:
 800e2e8:	4b32      	ldr	r3, [pc, #200]	; (800e3b4 <__swsetup_r+0xcc>)
 800e2ea:	b570      	push	{r4, r5, r6, lr}
 800e2ec:	681d      	ldr	r5, [r3, #0]
 800e2ee:	4606      	mov	r6, r0
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	b125      	cbz	r5, 800e2fe <__swsetup_r+0x16>
 800e2f4:	69ab      	ldr	r3, [r5, #24]
 800e2f6:	b913      	cbnz	r3, 800e2fe <__swsetup_r+0x16>
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	f000 f953 	bl	800e5a4 <__sinit>
 800e2fe:	4b2e      	ldr	r3, [pc, #184]	; (800e3b8 <__swsetup_r+0xd0>)
 800e300:	429c      	cmp	r4, r3
 800e302:	d10f      	bne.n	800e324 <__swsetup_r+0x3c>
 800e304:	686c      	ldr	r4, [r5, #4]
 800e306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	0715      	lsls	r5, r2, #28
 800e30e:	d42c      	bmi.n	800e36a <__swsetup_r+0x82>
 800e310:	06d0      	lsls	r0, r2, #27
 800e312:	d411      	bmi.n	800e338 <__swsetup_r+0x50>
 800e314:	2209      	movs	r2, #9
 800e316:	6032      	str	r2, [r6, #0]
 800e318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e31c:	81a3      	strh	r3, [r4, #12]
 800e31e:	f04f 30ff 	mov.w	r0, #4294967295
 800e322:	e03e      	b.n	800e3a2 <__swsetup_r+0xba>
 800e324:	4b25      	ldr	r3, [pc, #148]	; (800e3bc <__swsetup_r+0xd4>)
 800e326:	429c      	cmp	r4, r3
 800e328:	d101      	bne.n	800e32e <__swsetup_r+0x46>
 800e32a:	68ac      	ldr	r4, [r5, #8]
 800e32c:	e7eb      	b.n	800e306 <__swsetup_r+0x1e>
 800e32e:	4b24      	ldr	r3, [pc, #144]	; (800e3c0 <__swsetup_r+0xd8>)
 800e330:	429c      	cmp	r4, r3
 800e332:	bf08      	it	eq
 800e334:	68ec      	ldreq	r4, [r5, #12]
 800e336:	e7e6      	b.n	800e306 <__swsetup_r+0x1e>
 800e338:	0751      	lsls	r1, r2, #29
 800e33a:	d512      	bpl.n	800e362 <__swsetup_r+0x7a>
 800e33c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e33e:	b141      	cbz	r1, 800e352 <__swsetup_r+0x6a>
 800e340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e344:	4299      	cmp	r1, r3
 800e346:	d002      	beq.n	800e34e <__swsetup_r+0x66>
 800e348:	4630      	mov	r0, r6
 800e34a:	f000 fa19 	bl	800e780 <_free_r>
 800e34e:	2300      	movs	r3, #0
 800e350:	6363      	str	r3, [r4, #52]	; 0x34
 800e352:	89a3      	ldrh	r3, [r4, #12]
 800e354:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e358:	81a3      	strh	r3, [r4, #12]
 800e35a:	2300      	movs	r3, #0
 800e35c:	6063      	str	r3, [r4, #4]
 800e35e:	6923      	ldr	r3, [r4, #16]
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	f043 0308 	orr.w	r3, r3, #8
 800e368:	81a3      	strh	r3, [r4, #12]
 800e36a:	6923      	ldr	r3, [r4, #16]
 800e36c:	b94b      	cbnz	r3, 800e382 <__swsetup_r+0x9a>
 800e36e:	89a3      	ldrh	r3, [r4, #12]
 800e370:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e378:	d003      	beq.n	800e382 <__swsetup_r+0x9a>
 800e37a:	4621      	mov	r1, r4
 800e37c:	4630      	mov	r0, r6
 800e37e:	f000 f9bf 	bl	800e700 <__smakebuf_r>
 800e382:	89a2      	ldrh	r2, [r4, #12]
 800e384:	f012 0301 	ands.w	r3, r2, #1
 800e388:	d00c      	beq.n	800e3a4 <__swsetup_r+0xbc>
 800e38a:	2300      	movs	r3, #0
 800e38c:	60a3      	str	r3, [r4, #8]
 800e38e:	6963      	ldr	r3, [r4, #20]
 800e390:	425b      	negs	r3, r3
 800e392:	61a3      	str	r3, [r4, #24]
 800e394:	6923      	ldr	r3, [r4, #16]
 800e396:	b953      	cbnz	r3, 800e3ae <__swsetup_r+0xc6>
 800e398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e39c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e3a0:	d1ba      	bne.n	800e318 <__swsetup_r+0x30>
 800e3a2:	bd70      	pop	{r4, r5, r6, pc}
 800e3a4:	0792      	lsls	r2, r2, #30
 800e3a6:	bf58      	it	pl
 800e3a8:	6963      	ldrpl	r3, [r4, #20]
 800e3aa:	60a3      	str	r3, [r4, #8]
 800e3ac:	e7f2      	b.n	800e394 <__swsetup_r+0xac>
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	e7f7      	b.n	800e3a2 <__swsetup_r+0xba>
 800e3b2:	bf00      	nop
 800e3b4:	20000014 	.word	0x20000014
 800e3b8:	08010f24 	.word	0x08010f24
 800e3bc:	08010f44 	.word	0x08010f44
 800e3c0:	08010f04 	.word	0x08010f04

0800e3c4 <__sflush_r>:
 800e3c4:	898a      	ldrh	r2, [r1, #12]
 800e3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ca:	4605      	mov	r5, r0
 800e3cc:	0710      	lsls	r0, r2, #28
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	d458      	bmi.n	800e484 <__sflush_r+0xc0>
 800e3d2:	684b      	ldr	r3, [r1, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	dc05      	bgt.n	800e3e4 <__sflush_r+0x20>
 800e3d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	dc02      	bgt.n	800e3e4 <__sflush_r+0x20>
 800e3de:	2000      	movs	r0, #0
 800e3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3e6:	2e00      	cmp	r6, #0
 800e3e8:	d0f9      	beq.n	800e3de <__sflush_r+0x1a>
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e3f0:	682f      	ldr	r7, [r5, #0]
 800e3f2:	6a21      	ldr	r1, [r4, #32]
 800e3f4:	602b      	str	r3, [r5, #0]
 800e3f6:	d032      	beq.n	800e45e <__sflush_r+0x9a>
 800e3f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e3fa:	89a3      	ldrh	r3, [r4, #12]
 800e3fc:	075a      	lsls	r2, r3, #29
 800e3fe:	d505      	bpl.n	800e40c <__sflush_r+0x48>
 800e400:	6863      	ldr	r3, [r4, #4]
 800e402:	1ac0      	subs	r0, r0, r3
 800e404:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e406:	b10b      	cbz	r3, 800e40c <__sflush_r+0x48>
 800e408:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e40a:	1ac0      	subs	r0, r0, r3
 800e40c:	2300      	movs	r3, #0
 800e40e:	4602      	mov	r2, r0
 800e410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e412:	6a21      	ldr	r1, [r4, #32]
 800e414:	4628      	mov	r0, r5
 800e416:	47b0      	blx	r6
 800e418:	1c43      	adds	r3, r0, #1
 800e41a:	89a3      	ldrh	r3, [r4, #12]
 800e41c:	d106      	bne.n	800e42c <__sflush_r+0x68>
 800e41e:	6829      	ldr	r1, [r5, #0]
 800e420:	291d      	cmp	r1, #29
 800e422:	d848      	bhi.n	800e4b6 <__sflush_r+0xf2>
 800e424:	4a29      	ldr	r2, [pc, #164]	; (800e4cc <__sflush_r+0x108>)
 800e426:	40ca      	lsrs	r2, r1
 800e428:	07d6      	lsls	r6, r2, #31
 800e42a:	d544      	bpl.n	800e4b6 <__sflush_r+0xf2>
 800e42c:	2200      	movs	r2, #0
 800e42e:	6062      	str	r2, [r4, #4]
 800e430:	04d9      	lsls	r1, r3, #19
 800e432:	6922      	ldr	r2, [r4, #16]
 800e434:	6022      	str	r2, [r4, #0]
 800e436:	d504      	bpl.n	800e442 <__sflush_r+0x7e>
 800e438:	1c42      	adds	r2, r0, #1
 800e43a:	d101      	bne.n	800e440 <__sflush_r+0x7c>
 800e43c:	682b      	ldr	r3, [r5, #0]
 800e43e:	b903      	cbnz	r3, 800e442 <__sflush_r+0x7e>
 800e440:	6560      	str	r0, [r4, #84]	; 0x54
 800e442:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e444:	602f      	str	r7, [r5, #0]
 800e446:	2900      	cmp	r1, #0
 800e448:	d0c9      	beq.n	800e3de <__sflush_r+0x1a>
 800e44a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e44e:	4299      	cmp	r1, r3
 800e450:	d002      	beq.n	800e458 <__sflush_r+0x94>
 800e452:	4628      	mov	r0, r5
 800e454:	f000 f994 	bl	800e780 <_free_r>
 800e458:	2000      	movs	r0, #0
 800e45a:	6360      	str	r0, [r4, #52]	; 0x34
 800e45c:	e7c0      	b.n	800e3e0 <__sflush_r+0x1c>
 800e45e:	2301      	movs	r3, #1
 800e460:	4628      	mov	r0, r5
 800e462:	47b0      	blx	r6
 800e464:	1c41      	adds	r1, r0, #1
 800e466:	d1c8      	bne.n	800e3fa <__sflush_r+0x36>
 800e468:	682b      	ldr	r3, [r5, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0c5      	beq.n	800e3fa <__sflush_r+0x36>
 800e46e:	2b1d      	cmp	r3, #29
 800e470:	d001      	beq.n	800e476 <__sflush_r+0xb2>
 800e472:	2b16      	cmp	r3, #22
 800e474:	d101      	bne.n	800e47a <__sflush_r+0xb6>
 800e476:	602f      	str	r7, [r5, #0]
 800e478:	e7b1      	b.n	800e3de <__sflush_r+0x1a>
 800e47a:	89a3      	ldrh	r3, [r4, #12]
 800e47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e480:	81a3      	strh	r3, [r4, #12]
 800e482:	e7ad      	b.n	800e3e0 <__sflush_r+0x1c>
 800e484:	690f      	ldr	r7, [r1, #16]
 800e486:	2f00      	cmp	r7, #0
 800e488:	d0a9      	beq.n	800e3de <__sflush_r+0x1a>
 800e48a:	0793      	lsls	r3, r2, #30
 800e48c:	680e      	ldr	r6, [r1, #0]
 800e48e:	bf08      	it	eq
 800e490:	694b      	ldreq	r3, [r1, #20]
 800e492:	600f      	str	r7, [r1, #0]
 800e494:	bf18      	it	ne
 800e496:	2300      	movne	r3, #0
 800e498:	eba6 0807 	sub.w	r8, r6, r7
 800e49c:	608b      	str	r3, [r1, #8]
 800e49e:	f1b8 0f00 	cmp.w	r8, #0
 800e4a2:	dd9c      	ble.n	800e3de <__sflush_r+0x1a>
 800e4a4:	4643      	mov	r3, r8
 800e4a6:	463a      	mov	r2, r7
 800e4a8:	6a21      	ldr	r1, [r4, #32]
 800e4aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	47b0      	blx	r6
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	dc06      	bgt.n	800e4c2 <__sflush_r+0xfe>
 800e4b4:	89a3      	ldrh	r3, [r4, #12]
 800e4b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4ba:	81a3      	strh	r3, [r4, #12]
 800e4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c0:	e78e      	b.n	800e3e0 <__sflush_r+0x1c>
 800e4c2:	4407      	add	r7, r0
 800e4c4:	eba8 0800 	sub.w	r8, r8, r0
 800e4c8:	e7e9      	b.n	800e49e <__sflush_r+0xda>
 800e4ca:	bf00      	nop
 800e4cc:	20400001 	.word	0x20400001

0800e4d0 <_fflush_r>:
 800e4d0:	b538      	push	{r3, r4, r5, lr}
 800e4d2:	690b      	ldr	r3, [r1, #16]
 800e4d4:	4605      	mov	r5, r0
 800e4d6:	460c      	mov	r4, r1
 800e4d8:	b1db      	cbz	r3, 800e512 <_fflush_r+0x42>
 800e4da:	b118      	cbz	r0, 800e4e4 <_fflush_r+0x14>
 800e4dc:	6983      	ldr	r3, [r0, #24]
 800e4de:	b90b      	cbnz	r3, 800e4e4 <_fflush_r+0x14>
 800e4e0:	f000 f860 	bl	800e5a4 <__sinit>
 800e4e4:	4b0c      	ldr	r3, [pc, #48]	; (800e518 <_fflush_r+0x48>)
 800e4e6:	429c      	cmp	r4, r3
 800e4e8:	d109      	bne.n	800e4fe <_fflush_r+0x2e>
 800e4ea:	686c      	ldr	r4, [r5, #4]
 800e4ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4f0:	b17b      	cbz	r3, 800e512 <_fflush_r+0x42>
 800e4f2:	4621      	mov	r1, r4
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4fa:	f7ff bf63 	b.w	800e3c4 <__sflush_r>
 800e4fe:	4b07      	ldr	r3, [pc, #28]	; (800e51c <_fflush_r+0x4c>)
 800e500:	429c      	cmp	r4, r3
 800e502:	d101      	bne.n	800e508 <_fflush_r+0x38>
 800e504:	68ac      	ldr	r4, [r5, #8]
 800e506:	e7f1      	b.n	800e4ec <_fflush_r+0x1c>
 800e508:	4b05      	ldr	r3, [pc, #20]	; (800e520 <_fflush_r+0x50>)
 800e50a:	429c      	cmp	r4, r3
 800e50c:	bf08      	it	eq
 800e50e:	68ec      	ldreq	r4, [r5, #12]
 800e510:	e7ec      	b.n	800e4ec <_fflush_r+0x1c>
 800e512:	2000      	movs	r0, #0
 800e514:	bd38      	pop	{r3, r4, r5, pc}
 800e516:	bf00      	nop
 800e518:	08010f24 	.word	0x08010f24
 800e51c:	08010f44 	.word	0x08010f44
 800e520:	08010f04 	.word	0x08010f04

0800e524 <std>:
 800e524:	2300      	movs	r3, #0
 800e526:	b510      	push	{r4, lr}
 800e528:	4604      	mov	r4, r0
 800e52a:	e9c0 3300 	strd	r3, r3, [r0]
 800e52e:	6083      	str	r3, [r0, #8]
 800e530:	8181      	strh	r1, [r0, #12]
 800e532:	6643      	str	r3, [r0, #100]	; 0x64
 800e534:	81c2      	strh	r2, [r0, #14]
 800e536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e53a:	6183      	str	r3, [r0, #24]
 800e53c:	4619      	mov	r1, r3
 800e53e:	2208      	movs	r2, #8
 800e540:	305c      	adds	r0, #92	; 0x5c
 800e542:	f7ff fde7 	bl	800e114 <memset>
 800e546:	4b05      	ldr	r3, [pc, #20]	; (800e55c <std+0x38>)
 800e548:	6263      	str	r3, [r4, #36]	; 0x24
 800e54a:	4b05      	ldr	r3, [pc, #20]	; (800e560 <std+0x3c>)
 800e54c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e54e:	4b05      	ldr	r3, [pc, #20]	; (800e564 <std+0x40>)
 800e550:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e552:	4b05      	ldr	r3, [pc, #20]	; (800e568 <std+0x44>)
 800e554:	6224      	str	r4, [r4, #32]
 800e556:	6323      	str	r3, [r4, #48]	; 0x30
 800e558:	bd10      	pop	{r4, pc}
 800e55a:	bf00      	nop
 800e55c:	0800eeed 	.word	0x0800eeed
 800e560:	0800ef0f 	.word	0x0800ef0f
 800e564:	0800ef47 	.word	0x0800ef47
 800e568:	0800ef6b 	.word	0x0800ef6b

0800e56c <_cleanup_r>:
 800e56c:	4901      	ldr	r1, [pc, #4]	; (800e574 <_cleanup_r+0x8>)
 800e56e:	f000 b885 	b.w	800e67c <_fwalk_reent>
 800e572:	bf00      	nop
 800e574:	0800e4d1 	.word	0x0800e4d1

0800e578 <__sfmoreglue>:
 800e578:	b570      	push	{r4, r5, r6, lr}
 800e57a:	1e4a      	subs	r2, r1, #1
 800e57c:	2568      	movs	r5, #104	; 0x68
 800e57e:	4355      	muls	r5, r2
 800e580:	460e      	mov	r6, r1
 800e582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e586:	f000 f949 	bl	800e81c <_malloc_r>
 800e58a:	4604      	mov	r4, r0
 800e58c:	b140      	cbz	r0, 800e5a0 <__sfmoreglue+0x28>
 800e58e:	2100      	movs	r1, #0
 800e590:	e9c0 1600 	strd	r1, r6, [r0]
 800e594:	300c      	adds	r0, #12
 800e596:	60a0      	str	r0, [r4, #8]
 800e598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e59c:	f7ff fdba 	bl	800e114 <memset>
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	bd70      	pop	{r4, r5, r6, pc}

0800e5a4 <__sinit>:
 800e5a4:	6983      	ldr	r3, [r0, #24]
 800e5a6:	b510      	push	{r4, lr}
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	bb33      	cbnz	r3, 800e5fa <__sinit+0x56>
 800e5ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e5b0:	6503      	str	r3, [r0, #80]	; 0x50
 800e5b2:	4b12      	ldr	r3, [pc, #72]	; (800e5fc <__sinit+0x58>)
 800e5b4:	4a12      	ldr	r2, [pc, #72]	; (800e600 <__sinit+0x5c>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6282      	str	r2, [r0, #40]	; 0x28
 800e5ba:	4298      	cmp	r0, r3
 800e5bc:	bf04      	itt	eq
 800e5be:	2301      	moveq	r3, #1
 800e5c0:	6183      	streq	r3, [r0, #24]
 800e5c2:	f000 f81f 	bl	800e604 <__sfp>
 800e5c6:	6060      	str	r0, [r4, #4]
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	f000 f81b 	bl	800e604 <__sfp>
 800e5ce:	60a0      	str	r0, [r4, #8]
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f000 f817 	bl	800e604 <__sfp>
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	60e0      	str	r0, [r4, #12]
 800e5da:	2104      	movs	r1, #4
 800e5dc:	6860      	ldr	r0, [r4, #4]
 800e5de:	f7ff ffa1 	bl	800e524 <std>
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	2109      	movs	r1, #9
 800e5e6:	68a0      	ldr	r0, [r4, #8]
 800e5e8:	f7ff ff9c 	bl	800e524 <std>
 800e5ec:	2202      	movs	r2, #2
 800e5ee:	2112      	movs	r1, #18
 800e5f0:	68e0      	ldr	r0, [r4, #12]
 800e5f2:	f7ff ff97 	bl	800e524 <std>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	61a3      	str	r3, [r4, #24]
 800e5fa:	bd10      	pop	{r4, pc}
 800e5fc:	08010f00 	.word	0x08010f00
 800e600:	0800e56d 	.word	0x0800e56d

0800e604 <__sfp>:
 800e604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e606:	4b1b      	ldr	r3, [pc, #108]	; (800e674 <__sfp+0x70>)
 800e608:	681e      	ldr	r6, [r3, #0]
 800e60a:	69b3      	ldr	r3, [r6, #24]
 800e60c:	4607      	mov	r7, r0
 800e60e:	b913      	cbnz	r3, 800e616 <__sfp+0x12>
 800e610:	4630      	mov	r0, r6
 800e612:	f7ff ffc7 	bl	800e5a4 <__sinit>
 800e616:	3648      	adds	r6, #72	; 0x48
 800e618:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e61c:	3b01      	subs	r3, #1
 800e61e:	d503      	bpl.n	800e628 <__sfp+0x24>
 800e620:	6833      	ldr	r3, [r6, #0]
 800e622:	b133      	cbz	r3, 800e632 <__sfp+0x2e>
 800e624:	6836      	ldr	r6, [r6, #0]
 800e626:	e7f7      	b.n	800e618 <__sfp+0x14>
 800e628:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e62c:	b16d      	cbz	r5, 800e64a <__sfp+0x46>
 800e62e:	3468      	adds	r4, #104	; 0x68
 800e630:	e7f4      	b.n	800e61c <__sfp+0x18>
 800e632:	2104      	movs	r1, #4
 800e634:	4638      	mov	r0, r7
 800e636:	f7ff ff9f 	bl	800e578 <__sfmoreglue>
 800e63a:	6030      	str	r0, [r6, #0]
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d1f1      	bne.n	800e624 <__sfp+0x20>
 800e640:	230c      	movs	r3, #12
 800e642:	603b      	str	r3, [r7, #0]
 800e644:	4604      	mov	r4, r0
 800e646:	4620      	mov	r0, r4
 800e648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e64a:	4b0b      	ldr	r3, [pc, #44]	; (800e678 <__sfp+0x74>)
 800e64c:	6665      	str	r5, [r4, #100]	; 0x64
 800e64e:	e9c4 5500 	strd	r5, r5, [r4]
 800e652:	60a5      	str	r5, [r4, #8]
 800e654:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e658:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e65c:	2208      	movs	r2, #8
 800e65e:	4629      	mov	r1, r5
 800e660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e664:	f7ff fd56 	bl	800e114 <memset>
 800e668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e66c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e670:	e7e9      	b.n	800e646 <__sfp+0x42>
 800e672:	bf00      	nop
 800e674:	08010f00 	.word	0x08010f00
 800e678:	ffff0001 	.word	0xffff0001

0800e67c <_fwalk_reent>:
 800e67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e680:	4680      	mov	r8, r0
 800e682:	4689      	mov	r9, r1
 800e684:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e688:	2600      	movs	r6, #0
 800e68a:	b914      	cbnz	r4, 800e692 <_fwalk_reent+0x16>
 800e68c:	4630      	mov	r0, r6
 800e68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e692:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e696:	3f01      	subs	r7, #1
 800e698:	d501      	bpl.n	800e69e <_fwalk_reent+0x22>
 800e69a:	6824      	ldr	r4, [r4, #0]
 800e69c:	e7f5      	b.n	800e68a <_fwalk_reent+0xe>
 800e69e:	89ab      	ldrh	r3, [r5, #12]
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	d907      	bls.n	800e6b4 <_fwalk_reent+0x38>
 800e6a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	d003      	beq.n	800e6b4 <_fwalk_reent+0x38>
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	4640      	mov	r0, r8
 800e6b0:	47c8      	blx	r9
 800e6b2:	4306      	orrs	r6, r0
 800e6b4:	3568      	adds	r5, #104	; 0x68
 800e6b6:	e7ee      	b.n	800e696 <_fwalk_reent+0x1a>

0800e6b8 <__swhatbuf_r>:
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	460e      	mov	r6, r1
 800e6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6c0:	2900      	cmp	r1, #0
 800e6c2:	b096      	sub	sp, #88	; 0x58
 800e6c4:	4614      	mov	r4, r2
 800e6c6:	461d      	mov	r5, r3
 800e6c8:	da07      	bge.n	800e6da <__swhatbuf_r+0x22>
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	602b      	str	r3, [r5, #0]
 800e6ce:	89b3      	ldrh	r3, [r6, #12]
 800e6d0:	061a      	lsls	r2, r3, #24
 800e6d2:	d410      	bmi.n	800e6f6 <__swhatbuf_r+0x3e>
 800e6d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6d8:	e00e      	b.n	800e6f8 <__swhatbuf_r+0x40>
 800e6da:	466a      	mov	r2, sp
 800e6dc:	f000 fc6c 	bl	800efb8 <_fstat_r>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	dbf2      	blt.n	800e6ca <__swhatbuf_r+0x12>
 800e6e4:	9a01      	ldr	r2, [sp, #4]
 800e6e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6ee:	425a      	negs	r2, r3
 800e6f0:	415a      	adcs	r2, r3
 800e6f2:	602a      	str	r2, [r5, #0]
 800e6f4:	e7ee      	b.n	800e6d4 <__swhatbuf_r+0x1c>
 800e6f6:	2340      	movs	r3, #64	; 0x40
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	6023      	str	r3, [r4, #0]
 800e6fc:	b016      	add	sp, #88	; 0x58
 800e6fe:	bd70      	pop	{r4, r5, r6, pc}

0800e700 <__smakebuf_r>:
 800e700:	898b      	ldrh	r3, [r1, #12]
 800e702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e704:	079d      	lsls	r5, r3, #30
 800e706:	4606      	mov	r6, r0
 800e708:	460c      	mov	r4, r1
 800e70a:	d507      	bpl.n	800e71c <__smakebuf_r+0x1c>
 800e70c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	6123      	str	r3, [r4, #16]
 800e714:	2301      	movs	r3, #1
 800e716:	6163      	str	r3, [r4, #20]
 800e718:	b002      	add	sp, #8
 800e71a:	bd70      	pop	{r4, r5, r6, pc}
 800e71c:	ab01      	add	r3, sp, #4
 800e71e:	466a      	mov	r2, sp
 800e720:	f7ff ffca 	bl	800e6b8 <__swhatbuf_r>
 800e724:	9900      	ldr	r1, [sp, #0]
 800e726:	4605      	mov	r5, r0
 800e728:	4630      	mov	r0, r6
 800e72a:	f000 f877 	bl	800e81c <_malloc_r>
 800e72e:	b948      	cbnz	r0, 800e744 <__smakebuf_r+0x44>
 800e730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e734:	059a      	lsls	r2, r3, #22
 800e736:	d4ef      	bmi.n	800e718 <__smakebuf_r+0x18>
 800e738:	f023 0303 	bic.w	r3, r3, #3
 800e73c:	f043 0302 	orr.w	r3, r3, #2
 800e740:	81a3      	strh	r3, [r4, #12]
 800e742:	e7e3      	b.n	800e70c <__smakebuf_r+0xc>
 800e744:	4b0d      	ldr	r3, [pc, #52]	; (800e77c <__smakebuf_r+0x7c>)
 800e746:	62b3      	str	r3, [r6, #40]	; 0x28
 800e748:	89a3      	ldrh	r3, [r4, #12]
 800e74a:	6020      	str	r0, [r4, #0]
 800e74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e750:	81a3      	strh	r3, [r4, #12]
 800e752:	9b00      	ldr	r3, [sp, #0]
 800e754:	6163      	str	r3, [r4, #20]
 800e756:	9b01      	ldr	r3, [sp, #4]
 800e758:	6120      	str	r0, [r4, #16]
 800e75a:	b15b      	cbz	r3, 800e774 <__smakebuf_r+0x74>
 800e75c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e760:	4630      	mov	r0, r6
 800e762:	f000 fc3b 	bl	800efdc <_isatty_r>
 800e766:	b128      	cbz	r0, 800e774 <__smakebuf_r+0x74>
 800e768:	89a3      	ldrh	r3, [r4, #12]
 800e76a:	f023 0303 	bic.w	r3, r3, #3
 800e76e:	f043 0301 	orr.w	r3, r3, #1
 800e772:	81a3      	strh	r3, [r4, #12]
 800e774:	89a3      	ldrh	r3, [r4, #12]
 800e776:	431d      	orrs	r5, r3
 800e778:	81a5      	strh	r5, [r4, #12]
 800e77a:	e7cd      	b.n	800e718 <__smakebuf_r+0x18>
 800e77c:	0800e56d 	.word	0x0800e56d

0800e780 <_free_r>:
 800e780:	b538      	push	{r3, r4, r5, lr}
 800e782:	4605      	mov	r5, r0
 800e784:	2900      	cmp	r1, #0
 800e786:	d045      	beq.n	800e814 <_free_r+0x94>
 800e788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e78c:	1f0c      	subs	r4, r1, #4
 800e78e:	2b00      	cmp	r3, #0
 800e790:	bfb8      	it	lt
 800e792:	18e4      	addlt	r4, r4, r3
 800e794:	f000 fc44 	bl	800f020 <__malloc_lock>
 800e798:	4a1f      	ldr	r2, [pc, #124]	; (800e818 <_free_r+0x98>)
 800e79a:	6813      	ldr	r3, [r2, #0]
 800e79c:	4610      	mov	r0, r2
 800e79e:	b933      	cbnz	r3, 800e7ae <_free_r+0x2e>
 800e7a0:	6063      	str	r3, [r4, #4]
 800e7a2:	6014      	str	r4, [r2, #0]
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7aa:	f000 bc3a 	b.w	800f022 <__malloc_unlock>
 800e7ae:	42a3      	cmp	r3, r4
 800e7b0:	d90c      	bls.n	800e7cc <_free_r+0x4c>
 800e7b2:	6821      	ldr	r1, [r4, #0]
 800e7b4:	1862      	adds	r2, r4, r1
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	bf04      	itt	eq
 800e7ba:	681a      	ldreq	r2, [r3, #0]
 800e7bc:	685b      	ldreq	r3, [r3, #4]
 800e7be:	6063      	str	r3, [r4, #4]
 800e7c0:	bf04      	itt	eq
 800e7c2:	1852      	addeq	r2, r2, r1
 800e7c4:	6022      	streq	r2, [r4, #0]
 800e7c6:	6004      	str	r4, [r0, #0]
 800e7c8:	e7ec      	b.n	800e7a4 <_free_r+0x24>
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	685a      	ldr	r2, [r3, #4]
 800e7ce:	b10a      	cbz	r2, 800e7d4 <_free_r+0x54>
 800e7d0:	42a2      	cmp	r2, r4
 800e7d2:	d9fa      	bls.n	800e7ca <_free_r+0x4a>
 800e7d4:	6819      	ldr	r1, [r3, #0]
 800e7d6:	1858      	adds	r0, r3, r1
 800e7d8:	42a0      	cmp	r0, r4
 800e7da:	d10b      	bne.n	800e7f4 <_free_r+0x74>
 800e7dc:	6820      	ldr	r0, [r4, #0]
 800e7de:	4401      	add	r1, r0
 800e7e0:	1858      	adds	r0, r3, r1
 800e7e2:	4282      	cmp	r2, r0
 800e7e4:	6019      	str	r1, [r3, #0]
 800e7e6:	d1dd      	bne.n	800e7a4 <_free_r+0x24>
 800e7e8:	6810      	ldr	r0, [r2, #0]
 800e7ea:	6852      	ldr	r2, [r2, #4]
 800e7ec:	605a      	str	r2, [r3, #4]
 800e7ee:	4401      	add	r1, r0
 800e7f0:	6019      	str	r1, [r3, #0]
 800e7f2:	e7d7      	b.n	800e7a4 <_free_r+0x24>
 800e7f4:	d902      	bls.n	800e7fc <_free_r+0x7c>
 800e7f6:	230c      	movs	r3, #12
 800e7f8:	602b      	str	r3, [r5, #0]
 800e7fa:	e7d3      	b.n	800e7a4 <_free_r+0x24>
 800e7fc:	6820      	ldr	r0, [r4, #0]
 800e7fe:	1821      	adds	r1, r4, r0
 800e800:	428a      	cmp	r2, r1
 800e802:	bf04      	itt	eq
 800e804:	6811      	ldreq	r1, [r2, #0]
 800e806:	6852      	ldreq	r2, [r2, #4]
 800e808:	6062      	str	r2, [r4, #4]
 800e80a:	bf04      	itt	eq
 800e80c:	1809      	addeq	r1, r1, r0
 800e80e:	6021      	streq	r1, [r4, #0]
 800e810:	605c      	str	r4, [r3, #4]
 800e812:	e7c7      	b.n	800e7a4 <_free_r+0x24>
 800e814:	bd38      	pop	{r3, r4, r5, pc}
 800e816:	bf00      	nop
 800e818:	2000020c 	.word	0x2000020c

0800e81c <_malloc_r>:
 800e81c:	b570      	push	{r4, r5, r6, lr}
 800e81e:	1ccd      	adds	r5, r1, #3
 800e820:	f025 0503 	bic.w	r5, r5, #3
 800e824:	3508      	adds	r5, #8
 800e826:	2d0c      	cmp	r5, #12
 800e828:	bf38      	it	cc
 800e82a:	250c      	movcc	r5, #12
 800e82c:	2d00      	cmp	r5, #0
 800e82e:	4606      	mov	r6, r0
 800e830:	db01      	blt.n	800e836 <_malloc_r+0x1a>
 800e832:	42a9      	cmp	r1, r5
 800e834:	d903      	bls.n	800e83e <_malloc_r+0x22>
 800e836:	230c      	movs	r3, #12
 800e838:	6033      	str	r3, [r6, #0]
 800e83a:	2000      	movs	r0, #0
 800e83c:	bd70      	pop	{r4, r5, r6, pc}
 800e83e:	f000 fbef 	bl	800f020 <__malloc_lock>
 800e842:	4a21      	ldr	r2, [pc, #132]	; (800e8c8 <_malloc_r+0xac>)
 800e844:	6814      	ldr	r4, [r2, #0]
 800e846:	4621      	mov	r1, r4
 800e848:	b991      	cbnz	r1, 800e870 <_malloc_r+0x54>
 800e84a:	4c20      	ldr	r4, [pc, #128]	; (800e8cc <_malloc_r+0xb0>)
 800e84c:	6823      	ldr	r3, [r4, #0]
 800e84e:	b91b      	cbnz	r3, 800e858 <_malloc_r+0x3c>
 800e850:	4630      	mov	r0, r6
 800e852:	f000 fb3b 	bl	800eecc <_sbrk_r>
 800e856:	6020      	str	r0, [r4, #0]
 800e858:	4629      	mov	r1, r5
 800e85a:	4630      	mov	r0, r6
 800e85c:	f000 fb36 	bl	800eecc <_sbrk_r>
 800e860:	1c43      	adds	r3, r0, #1
 800e862:	d124      	bne.n	800e8ae <_malloc_r+0x92>
 800e864:	230c      	movs	r3, #12
 800e866:	6033      	str	r3, [r6, #0]
 800e868:	4630      	mov	r0, r6
 800e86a:	f000 fbda 	bl	800f022 <__malloc_unlock>
 800e86e:	e7e4      	b.n	800e83a <_malloc_r+0x1e>
 800e870:	680b      	ldr	r3, [r1, #0]
 800e872:	1b5b      	subs	r3, r3, r5
 800e874:	d418      	bmi.n	800e8a8 <_malloc_r+0x8c>
 800e876:	2b0b      	cmp	r3, #11
 800e878:	d90f      	bls.n	800e89a <_malloc_r+0x7e>
 800e87a:	600b      	str	r3, [r1, #0]
 800e87c:	50cd      	str	r5, [r1, r3]
 800e87e:	18cc      	adds	r4, r1, r3
 800e880:	4630      	mov	r0, r6
 800e882:	f000 fbce 	bl	800f022 <__malloc_unlock>
 800e886:	f104 000b 	add.w	r0, r4, #11
 800e88a:	1d23      	adds	r3, r4, #4
 800e88c:	f020 0007 	bic.w	r0, r0, #7
 800e890:	1ac3      	subs	r3, r0, r3
 800e892:	d0d3      	beq.n	800e83c <_malloc_r+0x20>
 800e894:	425a      	negs	r2, r3
 800e896:	50e2      	str	r2, [r4, r3]
 800e898:	e7d0      	b.n	800e83c <_malloc_r+0x20>
 800e89a:	428c      	cmp	r4, r1
 800e89c:	684b      	ldr	r3, [r1, #4]
 800e89e:	bf16      	itet	ne
 800e8a0:	6063      	strne	r3, [r4, #4]
 800e8a2:	6013      	streq	r3, [r2, #0]
 800e8a4:	460c      	movne	r4, r1
 800e8a6:	e7eb      	b.n	800e880 <_malloc_r+0x64>
 800e8a8:	460c      	mov	r4, r1
 800e8aa:	6849      	ldr	r1, [r1, #4]
 800e8ac:	e7cc      	b.n	800e848 <_malloc_r+0x2c>
 800e8ae:	1cc4      	adds	r4, r0, #3
 800e8b0:	f024 0403 	bic.w	r4, r4, #3
 800e8b4:	42a0      	cmp	r0, r4
 800e8b6:	d005      	beq.n	800e8c4 <_malloc_r+0xa8>
 800e8b8:	1a21      	subs	r1, r4, r0
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f000 fb06 	bl	800eecc <_sbrk_r>
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	d0cf      	beq.n	800e864 <_malloc_r+0x48>
 800e8c4:	6025      	str	r5, [r4, #0]
 800e8c6:	e7db      	b.n	800e880 <_malloc_r+0x64>
 800e8c8:	2000020c 	.word	0x2000020c
 800e8cc:	20000210 	.word	0x20000210

0800e8d0 <__sfputc_r>:
 800e8d0:	6893      	ldr	r3, [r2, #8]
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	b410      	push	{r4}
 800e8d8:	6093      	str	r3, [r2, #8]
 800e8da:	da08      	bge.n	800e8ee <__sfputc_r+0x1e>
 800e8dc:	6994      	ldr	r4, [r2, #24]
 800e8de:	42a3      	cmp	r3, r4
 800e8e0:	db01      	blt.n	800e8e6 <__sfputc_r+0x16>
 800e8e2:	290a      	cmp	r1, #10
 800e8e4:	d103      	bne.n	800e8ee <__sfputc_r+0x1e>
 800e8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8ea:	f7ff bcab 	b.w	800e244 <__swbuf_r>
 800e8ee:	6813      	ldr	r3, [r2, #0]
 800e8f0:	1c58      	adds	r0, r3, #1
 800e8f2:	6010      	str	r0, [r2, #0]
 800e8f4:	7019      	strb	r1, [r3, #0]
 800e8f6:	4608      	mov	r0, r1
 800e8f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8fc:	4770      	bx	lr

0800e8fe <__sfputs_r>:
 800e8fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e900:	4606      	mov	r6, r0
 800e902:	460f      	mov	r7, r1
 800e904:	4614      	mov	r4, r2
 800e906:	18d5      	adds	r5, r2, r3
 800e908:	42ac      	cmp	r4, r5
 800e90a:	d101      	bne.n	800e910 <__sfputs_r+0x12>
 800e90c:	2000      	movs	r0, #0
 800e90e:	e007      	b.n	800e920 <__sfputs_r+0x22>
 800e910:	463a      	mov	r2, r7
 800e912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e916:	4630      	mov	r0, r6
 800e918:	f7ff ffda 	bl	800e8d0 <__sfputc_r>
 800e91c:	1c43      	adds	r3, r0, #1
 800e91e:	d1f3      	bne.n	800e908 <__sfputs_r+0xa>
 800e920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e924 <_vfiprintf_r>:
 800e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e928:	460c      	mov	r4, r1
 800e92a:	b09d      	sub	sp, #116	; 0x74
 800e92c:	4617      	mov	r7, r2
 800e92e:	461d      	mov	r5, r3
 800e930:	4606      	mov	r6, r0
 800e932:	b118      	cbz	r0, 800e93c <_vfiprintf_r+0x18>
 800e934:	6983      	ldr	r3, [r0, #24]
 800e936:	b90b      	cbnz	r3, 800e93c <_vfiprintf_r+0x18>
 800e938:	f7ff fe34 	bl	800e5a4 <__sinit>
 800e93c:	4b7c      	ldr	r3, [pc, #496]	; (800eb30 <_vfiprintf_r+0x20c>)
 800e93e:	429c      	cmp	r4, r3
 800e940:	d158      	bne.n	800e9f4 <_vfiprintf_r+0xd0>
 800e942:	6874      	ldr	r4, [r6, #4]
 800e944:	89a3      	ldrh	r3, [r4, #12]
 800e946:	0718      	lsls	r0, r3, #28
 800e948:	d55e      	bpl.n	800ea08 <_vfiprintf_r+0xe4>
 800e94a:	6923      	ldr	r3, [r4, #16]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d05b      	beq.n	800ea08 <_vfiprintf_r+0xe4>
 800e950:	2300      	movs	r3, #0
 800e952:	9309      	str	r3, [sp, #36]	; 0x24
 800e954:	2320      	movs	r3, #32
 800e956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e95a:	2330      	movs	r3, #48	; 0x30
 800e95c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e960:	9503      	str	r5, [sp, #12]
 800e962:	f04f 0b01 	mov.w	fp, #1
 800e966:	46b8      	mov	r8, r7
 800e968:	4645      	mov	r5, r8
 800e96a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e96e:	b10b      	cbz	r3, 800e974 <_vfiprintf_r+0x50>
 800e970:	2b25      	cmp	r3, #37	; 0x25
 800e972:	d154      	bne.n	800ea1e <_vfiprintf_r+0xfa>
 800e974:	ebb8 0a07 	subs.w	sl, r8, r7
 800e978:	d00b      	beq.n	800e992 <_vfiprintf_r+0x6e>
 800e97a:	4653      	mov	r3, sl
 800e97c:	463a      	mov	r2, r7
 800e97e:	4621      	mov	r1, r4
 800e980:	4630      	mov	r0, r6
 800e982:	f7ff ffbc 	bl	800e8fe <__sfputs_r>
 800e986:	3001      	adds	r0, #1
 800e988:	f000 80c2 	beq.w	800eb10 <_vfiprintf_r+0x1ec>
 800e98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e98e:	4453      	add	r3, sl
 800e990:	9309      	str	r3, [sp, #36]	; 0x24
 800e992:	f898 3000 	ldrb.w	r3, [r8]
 800e996:	2b00      	cmp	r3, #0
 800e998:	f000 80ba 	beq.w	800eb10 <_vfiprintf_r+0x1ec>
 800e99c:	2300      	movs	r3, #0
 800e99e:	f04f 32ff 	mov.w	r2, #4294967295
 800e9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9a6:	9304      	str	r3, [sp, #16]
 800e9a8:	9307      	str	r3, [sp, #28]
 800e9aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9ae:	931a      	str	r3, [sp, #104]	; 0x68
 800e9b0:	46a8      	mov	r8, r5
 800e9b2:	2205      	movs	r2, #5
 800e9b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e9b8:	485e      	ldr	r0, [pc, #376]	; (800eb34 <_vfiprintf_r+0x210>)
 800e9ba:	f7f1 fc31 	bl	8000220 <memchr>
 800e9be:	9b04      	ldr	r3, [sp, #16]
 800e9c0:	bb78      	cbnz	r0, 800ea22 <_vfiprintf_r+0xfe>
 800e9c2:	06d9      	lsls	r1, r3, #27
 800e9c4:	bf44      	itt	mi
 800e9c6:	2220      	movmi	r2, #32
 800e9c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e9cc:	071a      	lsls	r2, r3, #28
 800e9ce:	bf44      	itt	mi
 800e9d0:	222b      	movmi	r2, #43	; 0x2b
 800e9d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e9d6:	782a      	ldrb	r2, [r5, #0]
 800e9d8:	2a2a      	cmp	r2, #42	; 0x2a
 800e9da:	d02a      	beq.n	800ea32 <_vfiprintf_r+0x10e>
 800e9dc:	9a07      	ldr	r2, [sp, #28]
 800e9de:	46a8      	mov	r8, r5
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	250a      	movs	r5, #10
 800e9e4:	4641      	mov	r1, r8
 800e9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9ea:	3b30      	subs	r3, #48	; 0x30
 800e9ec:	2b09      	cmp	r3, #9
 800e9ee:	d969      	bls.n	800eac4 <_vfiprintf_r+0x1a0>
 800e9f0:	b360      	cbz	r0, 800ea4c <_vfiprintf_r+0x128>
 800e9f2:	e024      	b.n	800ea3e <_vfiprintf_r+0x11a>
 800e9f4:	4b50      	ldr	r3, [pc, #320]	; (800eb38 <_vfiprintf_r+0x214>)
 800e9f6:	429c      	cmp	r4, r3
 800e9f8:	d101      	bne.n	800e9fe <_vfiprintf_r+0xda>
 800e9fa:	68b4      	ldr	r4, [r6, #8]
 800e9fc:	e7a2      	b.n	800e944 <_vfiprintf_r+0x20>
 800e9fe:	4b4f      	ldr	r3, [pc, #316]	; (800eb3c <_vfiprintf_r+0x218>)
 800ea00:	429c      	cmp	r4, r3
 800ea02:	bf08      	it	eq
 800ea04:	68f4      	ldreq	r4, [r6, #12]
 800ea06:	e79d      	b.n	800e944 <_vfiprintf_r+0x20>
 800ea08:	4621      	mov	r1, r4
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	f7ff fc6c 	bl	800e2e8 <__swsetup_r>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d09d      	beq.n	800e950 <_vfiprintf_r+0x2c>
 800ea14:	f04f 30ff 	mov.w	r0, #4294967295
 800ea18:	b01d      	add	sp, #116	; 0x74
 800ea1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1e:	46a8      	mov	r8, r5
 800ea20:	e7a2      	b.n	800e968 <_vfiprintf_r+0x44>
 800ea22:	4a44      	ldr	r2, [pc, #272]	; (800eb34 <_vfiprintf_r+0x210>)
 800ea24:	1a80      	subs	r0, r0, r2
 800ea26:	fa0b f000 	lsl.w	r0, fp, r0
 800ea2a:	4318      	orrs	r0, r3
 800ea2c:	9004      	str	r0, [sp, #16]
 800ea2e:	4645      	mov	r5, r8
 800ea30:	e7be      	b.n	800e9b0 <_vfiprintf_r+0x8c>
 800ea32:	9a03      	ldr	r2, [sp, #12]
 800ea34:	1d11      	adds	r1, r2, #4
 800ea36:	6812      	ldr	r2, [r2, #0]
 800ea38:	9103      	str	r1, [sp, #12]
 800ea3a:	2a00      	cmp	r2, #0
 800ea3c:	db01      	blt.n	800ea42 <_vfiprintf_r+0x11e>
 800ea3e:	9207      	str	r2, [sp, #28]
 800ea40:	e004      	b.n	800ea4c <_vfiprintf_r+0x128>
 800ea42:	4252      	negs	r2, r2
 800ea44:	f043 0302 	orr.w	r3, r3, #2
 800ea48:	9207      	str	r2, [sp, #28]
 800ea4a:	9304      	str	r3, [sp, #16]
 800ea4c:	f898 3000 	ldrb.w	r3, [r8]
 800ea50:	2b2e      	cmp	r3, #46	; 0x2e
 800ea52:	d10e      	bne.n	800ea72 <_vfiprintf_r+0x14e>
 800ea54:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ea58:	2b2a      	cmp	r3, #42	; 0x2a
 800ea5a:	d138      	bne.n	800eace <_vfiprintf_r+0x1aa>
 800ea5c:	9b03      	ldr	r3, [sp, #12]
 800ea5e:	1d1a      	adds	r2, r3, #4
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	9203      	str	r2, [sp, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	bfb8      	it	lt
 800ea68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea6c:	f108 0802 	add.w	r8, r8, #2
 800ea70:	9305      	str	r3, [sp, #20]
 800ea72:	4d33      	ldr	r5, [pc, #204]	; (800eb40 <_vfiprintf_r+0x21c>)
 800ea74:	f898 1000 	ldrb.w	r1, [r8]
 800ea78:	2203      	movs	r2, #3
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	f7f1 fbd0 	bl	8000220 <memchr>
 800ea80:	b140      	cbz	r0, 800ea94 <_vfiprintf_r+0x170>
 800ea82:	2340      	movs	r3, #64	; 0x40
 800ea84:	1b40      	subs	r0, r0, r5
 800ea86:	fa03 f000 	lsl.w	r0, r3, r0
 800ea8a:	9b04      	ldr	r3, [sp, #16]
 800ea8c:	4303      	orrs	r3, r0
 800ea8e:	f108 0801 	add.w	r8, r8, #1
 800ea92:	9304      	str	r3, [sp, #16]
 800ea94:	f898 1000 	ldrb.w	r1, [r8]
 800ea98:	482a      	ldr	r0, [pc, #168]	; (800eb44 <_vfiprintf_r+0x220>)
 800ea9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea9e:	2206      	movs	r2, #6
 800eaa0:	f108 0701 	add.w	r7, r8, #1
 800eaa4:	f7f1 fbbc 	bl	8000220 <memchr>
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	d037      	beq.n	800eb1c <_vfiprintf_r+0x1f8>
 800eaac:	4b26      	ldr	r3, [pc, #152]	; (800eb48 <_vfiprintf_r+0x224>)
 800eaae:	bb1b      	cbnz	r3, 800eaf8 <_vfiprintf_r+0x1d4>
 800eab0:	9b03      	ldr	r3, [sp, #12]
 800eab2:	3307      	adds	r3, #7
 800eab4:	f023 0307 	bic.w	r3, r3, #7
 800eab8:	3308      	adds	r3, #8
 800eaba:	9303      	str	r3, [sp, #12]
 800eabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eabe:	444b      	add	r3, r9
 800eac0:	9309      	str	r3, [sp, #36]	; 0x24
 800eac2:	e750      	b.n	800e966 <_vfiprintf_r+0x42>
 800eac4:	fb05 3202 	mla	r2, r5, r2, r3
 800eac8:	2001      	movs	r0, #1
 800eaca:	4688      	mov	r8, r1
 800eacc:	e78a      	b.n	800e9e4 <_vfiprintf_r+0xc0>
 800eace:	2300      	movs	r3, #0
 800ead0:	f108 0801 	add.w	r8, r8, #1
 800ead4:	9305      	str	r3, [sp, #20]
 800ead6:	4619      	mov	r1, r3
 800ead8:	250a      	movs	r5, #10
 800eada:	4640      	mov	r0, r8
 800eadc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eae0:	3a30      	subs	r2, #48	; 0x30
 800eae2:	2a09      	cmp	r2, #9
 800eae4:	d903      	bls.n	800eaee <_vfiprintf_r+0x1ca>
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d0c3      	beq.n	800ea72 <_vfiprintf_r+0x14e>
 800eaea:	9105      	str	r1, [sp, #20]
 800eaec:	e7c1      	b.n	800ea72 <_vfiprintf_r+0x14e>
 800eaee:	fb05 2101 	mla	r1, r5, r1, r2
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	4680      	mov	r8, r0
 800eaf6:	e7f0      	b.n	800eada <_vfiprintf_r+0x1b6>
 800eaf8:	ab03      	add	r3, sp, #12
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	4622      	mov	r2, r4
 800eafe:	4b13      	ldr	r3, [pc, #76]	; (800eb4c <_vfiprintf_r+0x228>)
 800eb00:	a904      	add	r1, sp, #16
 800eb02:	4630      	mov	r0, r6
 800eb04:	f3af 8000 	nop.w
 800eb08:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eb0c:	4681      	mov	r9, r0
 800eb0e:	d1d5      	bne.n	800eabc <_vfiprintf_r+0x198>
 800eb10:	89a3      	ldrh	r3, [r4, #12]
 800eb12:	065b      	lsls	r3, r3, #25
 800eb14:	f53f af7e 	bmi.w	800ea14 <_vfiprintf_r+0xf0>
 800eb18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb1a:	e77d      	b.n	800ea18 <_vfiprintf_r+0xf4>
 800eb1c:	ab03      	add	r3, sp, #12
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	4622      	mov	r2, r4
 800eb22:	4b0a      	ldr	r3, [pc, #40]	; (800eb4c <_vfiprintf_r+0x228>)
 800eb24:	a904      	add	r1, sp, #16
 800eb26:	4630      	mov	r0, r6
 800eb28:	f000 f888 	bl	800ec3c <_printf_i>
 800eb2c:	e7ec      	b.n	800eb08 <_vfiprintf_r+0x1e4>
 800eb2e:	bf00      	nop
 800eb30:	08010f24 	.word	0x08010f24
 800eb34:	08010f64 	.word	0x08010f64
 800eb38:	08010f44 	.word	0x08010f44
 800eb3c:	08010f04 	.word	0x08010f04
 800eb40:	08010f6a 	.word	0x08010f6a
 800eb44:	08010f6e 	.word	0x08010f6e
 800eb48:	00000000 	.word	0x00000000
 800eb4c:	0800e8ff 	.word	0x0800e8ff

0800eb50 <_printf_common>:
 800eb50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb54:	4691      	mov	r9, r2
 800eb56:	461f      	mov	r7, r3
 800eb58:	688a      	ldr	r2, [r1, #8]
 800eb5a:	690b      	ldr	r3, [r1, #16]
 800eb5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb60:	4293      	cmp	r3, r2
 800eb62:	bfb8      	it	lt
 800eb64:	4613      	movlt	r3, r2
 800eb66:	f8c9 3000 	str.w	r3, [r9]
 800eb6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb6e:	4606      	mov	r6, r0
 800eb70:	460c      	mov	r4, r1
 800eb72:	b112      	cbz	r2, 800eb7a <_printf_common+0x2a>
 800eb74:	3301      	adds	r3, #1
 800eb76:	f8c9 3000 	str.w	r3, [r9]
 800eb7a:	6823      	ldr	r3, [r4, #0]
 800eb7c:	0699      	lsls	r1, r3, #26
 800eb7e:	bf42      	ittt	mi
 800eb80:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eb84:	3302      	addmi	r3, #2
 800eb86:	f8c9 3000 	strmi.w	r3, [r9]
 800eb8a:	6825      	ldr	r5, [r4, #0]
 800eb8c:	f015 0506 	ands.w	r5, r5, #6
 800eb90:	d107      	bne.n	800eba2 <_printf_common+0x52>
 800eb92:	f104 0a19 	add.w	sl, r4, #25
 800eb96:	68e3      	ldr	r3, [r4, #12]
 800eb98:	f8d9 2000 	ldr.w	r2, [r9]
 800eb9c:	1a9b      	subs	r3, r3, r2
 800eb9e:	42ab      	cmp	r3, r5
 800eba0:	dc28      	bgt.n	800ebf4 <_printf_common+0xa4>
 800eba2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eba6:	6822      	ldr	r2, [r4, #0]
 800eba8:	3300      	adds	r3, #0
 800ebaa:	bf18      	it	ne
 800ebac:	2301      	movne	r3, #1
 800ebae:	0692      	lsls	r2, r2, #26
 800ebb0:	d42d      	bmi.n	800ec0e <_printf_common+0xbe>
 800ebb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebb6:	4639      	mov	r1, r7
 800ebb8:	4630      	mov	r0, r6
 800ebba:	47c0      	blx	r8
 800ebbc:	3001      	adds	r0, #1
 800ebbe:	d020      	beq.n	800ec02 <_printf_common+0xb2>
 800ebc0:	6823      	ldr	r3, [r4, #0]
 800ebc2:	68e5      	ldr	r5, [r4, #12]
 800ebc4:	f8d9 2000 	ldr.w	r2, [r9]
 800ebc8:	f003 0306 	and.w	r3, r3, #6
 800ebcc:	2b04      	cmp	r3, #4
 800ebce:	bf08      	it	eq
 800ebd0:	1aad      	subeq	r5, r5, r2
 800ebd2:	68a3      	ldr	r3, [r4, #8]
 800ebd4:	6922      	ldr	r2, [r4, #16]
 800ebd6:	bf0c      	ite	eq
 800ebd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebdc:	2500      	movne	r5, #0
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	bfc4      	itt	gt
 800ebe2:	1a9b      	subgt	r3, r3, r2
 800ebe4:	18ed      	addgt	r5, r5, r3
 800ebe6:	f04f 0900 	mov.w	r9, #0
 800ebea:	341a      	adds	r4, #26
 800ebec:	454d      	cmp	r5, r9
 800ebee:	d11a      	bne.n	800ec26 <_printf_common+0xd6>
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	e008      	b.n	800ec06 <_printf_common+0xb6>
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	4652      	mov	r2, sl
 800ebf8:	4639      	mov	r1, r7
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	47c0      	blx	r8
 800ebfe:	3001      	adds	r0, #1
 800ec00:	d103      	bne.n	800ec0a <_printf_common+0xba>
 800ec02:	f04f 30ff 	mov.w	r0, #4294967295
 800ec06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0a:	3501      	adds	r5, #1
 800ec0c:	e7c3      	b.n	800eb96 <_printf_common+0x46>
 800ec0e:	18e1      	adds	r1, r4, r3
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	2030      	movs	r0, #48	; 0x30
 800ec14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec18:	4422      	add	r2, r4
 800ec1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec22:	3302      	adds	r3, #2
 800ec24:	e7c5      	b.n	800ebb2 <_printf_common+0x62>
 800ec26:	2301      	movs	r3, #1
 800ec28:	4622      	mov	r2, r4
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	47c0      	blx	r8
 800ec30:	3001      	adds	r0, #1
 800ec32:	d0e6      	beq.n	800ec02 <_printf_common+0xb2>
 800ec34:	f109 0901 	add.w	r9, r9, #1
 800ec38:	e7d8      	b.n	800ebec <_printf_common+0x9c>
	...

0800ec3c <_printf_i>:
 800ec3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ec44:	460c      	mov	r4, r1
 800ec46:	7e09      	ldrb	r1, [r1, #24]
 800ec48:	b085      	sub	sp, #20
 800ec4a:	296e      	cmp	r1, #110	; 0x6e
 800ec4c:	4617      	mov	r7, r2
 800ec4e:	4606      	mov	r6, r0
 800ec50:	4698      	mov	r8, r3
 800ec52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec54:	f000 80b3 	beq.w	800edbe <_printf_i+0x182>
 800ec58:	d822      	bhi.n	800eca0 <_printf_i+0x64>
 800ec5a:	2963      	cmp	r1, #99	; 0x63
 800ec5c:	d036      	beq.n	800eccc <_printf_i+0x90>
 800ec5e:	d80a      	bhi.n	800ec76 <_printf_i+0x3a>
 800ec60:	2900      	cmp	r1, #0
 800ec62:	f000 80b9 	beq.w	800edd8 <_printf_i+0x19c>
 800ec66:	2958      	cmp	r1, #88	; 0x58
 800ec68:	f000 8083 	beq.w	800ed72 <_printf_i+0x136>
 800ec6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ec74:	e032      	b.n	800ecdc <_printf_i+0xa0>
 800ec76:	2964      	cmp	r1, #100	; 0x64
 800ec78:	d001      	beq.n	800ec7e <_printf_i+0x42>
 800ec7a:	2969      	cmp	r1, #105	; 0x69
 800ec7c:	d1f6      	bne.n	800ec6c <_printf_i+0x30>
 800ec7e:	6820      	ldr	r0, [r4, #0]
 800ec80:	6813      	ldr	r3, [r2, #0]
 800ec82:	0605      	lsls	r5, r0, #24
 800ec84:	f103 0104 	add.w	r1, r3, #4
 800ec88:	d52a      	bpl.n	800ece0 <_printf_i+0xa4>
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	6011      	str	r1, [r2, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	da03      	bge.n	800ec9a <_printf_i+0x5e>
 800ec92:	222d      	movs	r2, #45	; 0x2d
 800ec94:	425b      	negs	r3, r3
 800ec96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ec9a:	486f      	ldr	r0, [pc, #444]	; (800ee58 <_printf_i+0x21c>)
 800ec9c:	220a      	movs	r2, #10
 800ec9e:	e039      	b.n	800ed14 <_printf_i+0xd8>
 800eca0:	2973      	cmp	r1, #115	; 0x73
 800eca2:	f000 809d 	beq.w	800ede0 <_printf_i+0x1a4>
 800eca6:	d808      	bhi.n	800ecba <_printf_i+0x7e>
 800eca8:	296f      	cmp	r1, #111	; 0x6f
 800ecaa:	d020      	beq.n	800ecee <_printf_i+0xb2>
 800ecac:	2970      	cmp	r1, #112	; 0x70
 800ecae:	d1dd      	bne.n	800ec6c <_printf_i+0x30>
 800ecb0:	6823      	ldr	r3, [r4, #0]
 800ecb2:	f043 0320 	orr.w	r3, r3, #32
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	e003      	b.n	800ecc2 <_printf_i+0x86>
 800ecba:	2975      	cmp	r1, #117	; 0x75
 800ecbc:	d017      	beq.n	800ecee <_printf_i+0xb2>
 800ecbe:	2978      	cmp	r1, #120	; 0x78
 800ecc0:	d1d4      	bne.n	800ec6c <_printf_i+0x30>
 800ecc2:	2378      	movs	r3, #120	; 0x78
 800ecc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecc8:	4864      	ldr	r0, [pc, #400]	; (800ee5c <_printf_i+0x220>)
 800ecca:	e055      	b.n	800ed78 <_printf_i+0x13c>
 800eccc:	6813      	ldr	r3, [r2, #0]
 800ecce:	1d19      	adds	r1, r3, #4
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	6011      	str	r1, [r2, #0]
 800ecd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecdc:	2301      	movs	r3, #1
 800ecde:	e08c      	b.n	800edfa <_printf_i+0x1be>
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	6011      	str	r1, [r2, #0]
 800ece4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ece8:	bf18      	it	ne
 800ecea:	b21b      	sxthne	r3, r3
 800ecec:	e7cf      	b.n	800ec8e <_printf_i+0x52>
 800ecee:	6813      	ldr	r3, [r2, #0]
 800ecf0:	6825      	ldr	r5, [r4, #0]
 800ecf2:	1d18      	adds	r0, r3, #4
 800ecf4:	6010      	str	r0, [r2, #0]
 800ecf6:	0628      	lsls	r0, r5, #24
 800ecf8:	d501      	bpl.n	800ecfe <_printf_i+0xc2>
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	e002      	b.n	800ed04 <_printf_i+0xc8>
 800ecfe:	0668      	lsls	r0, r5, #25
 800ed00:	d5fb      	bpl.n	800ecfa <_printf_i+0xbe>
 800ed02:	881b      	ldrh	r3, [r3, #0]
 800ed04:	4854      	ldr	r0, [pc, #336]	; (800ee58 <_printf_i+0x21c>)
 800ed06:	296f      	cmp	r1, #111	; 0x6f
 800ed08:	bf14      	ite	ne
 800ed0a:	220a      	movne	r2, #10
 800ed0c:	2208      	moveq	r2, #8
 800ed0e:	2100      	movs	r1, #0
 800ed10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed14:	6865      	ldr	r5, [r4, #4]
 800ed16:	60a5      	str	r5, [r4, #8]
 800ed18:	2d00      	cmp	r5, #0
 800ed1a:	f2c0 8095 	blt.w	800ee48 <_printf_i+0x20c>
 800ed1e:	6821      	ldr	r1, [r4, #0]
 800ed20:	f021 0104 	bic.w	r1, r1, #4
 800ed24:	6021      	str	r1, [r4, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d13d      	bne.n	800eda6 <_printf_i+0x16a>
 800ed2a:	2d00      	cmp	r5, #0
 800ed2c:	f040 808e 	bne.w	800ee4c <_printf_i+0x210>
 800ed30:	4665      	mov	r5, ip
 800ed32:	2a08      	cmp	r2, #8
 800ed34:	d10b      	bne.n	800ed4e <_printf_i+0x112>
 800ed36:	6823      	ldr	r3, [r4, #0]
 800ed38:	07db      	lsls	r3, r3, #31
 800ed3a:	d508      	bpl.n	800ed4e <_printf_i+0x112>
 800ed3c:	6923      	ldr	r3, [r4, #16]
 800ed3e:	6862      	ldr	r2, [r4, #4]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	bfde      	ittt	le
 800ed44:	2330      	movle	r3, #48	; 0x30
 800ed46:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed4e:	ebac 0305 	sub.w	r3, ip, r5
 800ed52:	6123      	str	r3, [r4, #16]
 800ed54:	f8cd 8000 	str.w	r8, [sp]
 800ed58:	463b      	mov	r3, r7
 800ed5a:	aa03      	add	r2, sp, #12
 800ed5c:	4621      	mov	r1, r4
 800ed5e:	4630      	mov	r0, r6
 800ed60:	f7ff fef6 	bl	800eb50 <_printf_common>
 800ed64:	3001      	adds	r0, #1
 800ed66:	d14d      	bne.n	800ee04 <_printf_i+0x1c8>
 800ed68:	f04f 30ff 	mov.w	r0, #4294967295
 800ed6c:	b005      	add	sp, #20
 800ed6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed72:	4839      	ldr	r0, [pc, #228]	; (800ee58 <_printf_i+0x21c>)
 800ed74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ed78:	6813      	ldr	r3, [r2, #0]
 800ed7a:	6821      	ldr	r1, [r4, #0]
 800ed7c:	1d1d      	adds	r5, r3, #4
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	6015      	str	r5, [r2, #0]
 800ed82:	060a      	lsls	r2, r1, #24
 800ed84:	d50b      	bpl.n	800ed9e <_printf_i+0x162>
 800ed86:	07ca      	lsls	r2, r1, #31
 800ed88:	bf44      	itt	mi
 800ed8a:	f041 0120 	orrmi.w	r1, r1, #32
 800ed8e:	6021      	strmi	r1, [r4, #0]
 800ed90:	b91b      	cbnz	r3, 800ed9a <_printf_i+0x15e>
 800ed92:	6822      	ldr	r2, [r4, #0]
 800ed94:	f022 0220 	bic.w	r2, r2, #32
 800ed98:	6022      	str	r2, [r4, #0]
 800ed9a:	2210      	movs	r2, #16
 800ed9c:	e7b7      	b.n	800ed0e <_printf_i+0xd2>
 800ed9e:	064d      	lsls	r5, r1, #25
 800eda0:	bf48      	it	mi
 800eda2:	b29b      	uxthmi	r3, r3
 800eda4:	e7ef      	b.n	800ed86 <_printf_i+0x14a>
 800eda6:	4665      	mov	r5, ip
 800eda8:	fbb3 f1f2 	udiv	r1, r3, r2
 800edac:	fb02 3311 	mls	r3, r2, r1, r3
 800edb0:	5cc3      	ldrb	r3, [r0, r3]
 800edb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800edb6:	460b      	mov	r3, r1
 800edb8:	2900      	cmp	r1, #0
 800edba:	d1f5      	bne.n	800eda8 <_printf_i+0x16c>
 800edbc:	e7b9      	b.n	800ed32 <_printf_i+0xf6>
 800edbe:	6813      	ldr	r3, [r2, #0]
 800edc0:	6825      	ldr	r5, [r4, #0]
 800edc2:	6961      	ldr	r1, [r4, #20]
 800edc4:	1d18      	adds	r0, r3, #4
 800edc6:	6010      	str	r0, [r2, #0]
 800edc8:	0628      	lsls	r0, r5, #24
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	d501      	bpl.n	800edd2 <_printf_i+0x196>
 800edce:	6019      	str	r1, [r3, #0]
 800edd0:	e002      	b.n	800edd8 <_printf_i+0x19c>
 800edd2:	066a      	lsls	r2, r5, #25
 800edd4:	d5fb      	bpl.n	800edce <_printf_i+0x192>
 800edd6:	8019      	strh	r1, [r3, #0]
 800edd8:	2300      	movs	r3, #0
 800edda:	6123      	str	r3, [r4, #16]
 800eddc:	4665      	mov	r5, ip
 800edde:	e7b9      	b.n	800ed54 <_printf_i+0x118>
 800ede0:	6813      	ldr	r3, [r2, #0]
 800ede2:	1d19      	adds	r1, r3, #4
 800ede4:	6011      	str	r1, [r2, #0]
 800ede6:	681d      	ldr	r5, [r3, #0]
 800ede8:	6862      	ldr	r2, [r4, #4]
 800edea:	2100      	movs	r1, #0
 800edec:	4628      	mov	r0, r5
 800edee:	f7f1 fa17 	bl	8000220 <memchr>
 800edf2:	b108      	cbz	r0, 800edf8 <_printf_i+0x1bc>
 800edf4:	1b40      	subs	r0, r0, r5
 800edf6:	6060      	str	r0, [r4, #4]
 800edf8:	6863      	ldr	r3, [r4, #4]
 800edfa:	6123      	str	r3, [r4, #16]
 800edfc:	2300      	movs	r3, #0
 800edfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee02:	e7a7      	b.n	800ed54 <_printf_i+0x118>
 800ee04:	6923      	ldr	r3, [r4, #16]
 800ee06:	462a      	mov	r2, r5
 800ee08:	4639      	mov	r1, r7
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	47c0      	blx	r8
 800ee0e:	3001      	adds	r0, #1
 800ee10:	d0aa      	beq.n	800ed68 <_printf_i+0x12c>
 800ee12:	6823      	ldr	r3, [r4, #0]
 800ee14:	079b      	lsls	r3, r3, #30
 800ee16:	d413      	bmi.n	800ee40 <_printf_i+0x204>
 800ee18:	68e0      	ldr	r0, [r4, #12]
 800ee1a:	9b03      	ldr	r3, [sp, #12]
 800ee1c:	4298      	cmp	r0, r3
 800ee1e:	bfb8      	it	lt
 800ee20:	4618      	movlt	r0, r3
 800ee22:	e7a3      	b.n	800ed6c <_printf_i+0x130>
 800ee24:	2301      	movs	r3, #1
 800ee26:	464a      	mov	r2, r9
 800ee28:	4639      	mov	r1, r7
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	47c0      	blx	r8
 800ee2e:	3001      	adds	r0, #1
 800ee30:	d09a      	beq.n	800ed68 <_printf_i+0x12c>
 800ee32:	3501      	adds	r5, #1
 800ee34:	68e3      	ldr	r3, [r4, #12]
 800ee36:	9a03      	ldr	r2, [sp, #12]
 800ee38:	1a9b      	subs	r3, r3, r2
 800ee3a:	42ab      	cmp	r3, r5
 800ee3c:	dcf2      	bgt.n	800ee24 <_printf_i+0x1e8>
 800ee3e:	e7eb      	b.n	800ee18 <_printf_i+0x1dc>
 800ee40:	2500      	movs	r5, #0
 800ee42:	f104 0919 	add.w	r9, r4, #25
 800ee46:	e7f5      	b.n	800ee34 <_printf_i+0x1f8>
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d1ac      	bne.n	800eda6 <_printf_i+0x16a>
 800ee4c:	7803      	ldrb	r3, [r0, #0]
 800ee4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee56:	e76c      	b.n	800ed32 <_printf_i+0xf6>
 800ee58:	08010f75 	.word	0x08010f75
 800ee5c:	08010f86 	.word	0x08010f86

0800ee60 <_putc_r>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	460d      	mov	r5, r1
 800ee64:	4614      	mov	r4, r2
 800ee66:	4606      	mov	r6, r0
 800ee68:	b118      	cbz	r0, 800ee72 <_putc_r+0x12>
 800ee6a:	6983      	ldr	r3, [r0, #24]
 800ee6c:	b90b      	cbnz	r3, 800ee72 <_putc_r+0x12>
 800ee6e:	f7ff fb99 	bl	800e5a4 <__sinit>
 800ee72:	4b13      	ldr	r3, [pc, #76]	; (800eec0 <_putc_r+0x60>)
 800ee74:	429c      	cmp	r4, r3
 800ee76:	d112      	bne.n	800ee9e <_putc_r+0x3e>
 800ee78:	6874      	ldr	r4, [r6, #4]
 800ee7a:	68a3      	ldr	r3, [r4, #8]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	60a3      	str	r3, [r4, #8]
 800ee82:	da16      	bge.n	800eeb2 <_putc_r+0x52>
 800ee84:	69a2      	ldr	r2, [r4, #24]
 800ee86:	4293      	cmp	r3, r2
 800ee88:	db02      	blt.n	800ee90 <_putc_r+0x30>
 800ee8a:	b2eb      	uxtb	r3, r5
 800ee8c:	2b0a      	cmp	r3, #10
 800ee8e:	d110      	bne.n	800eeb2 <_putc_r+0x52>
 800ee90:	4622      	mov	r2, r4
 800ee92:	4629      	mov	r1, r5
 800ee94:	4630      	mov	r0, r6
 800ee96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee9a:	f7ff b9d3 	b.w	800e244 <__swbuf_r>
 800ee9e:	4b09      	ldr	r3, [pc, #36]	; (800eec4 <_putc_r+0x64>)
 800eea0:	429c      	cmp	r4, r3
 800eea2:	d101      	bne.n	800eea8 <_putc_r+0x48>
 800eea4:	68b4      	ldr	r4, [r6, #8]
 800eea6:	e7e8      	b.n	800ee7a <_putc_r+0x1a>
 800eea8:	4b07      	ldr	r3, [pc, #28]	; (800eec8 <_putc_r+0x68>)
 800eeaa:	429c      	cmp	r4, r3
 800eeac:	bf08      	it	eq
 800eeae:	68f4      	ldreq	r4, [r6, #12]
 800eeb0:	e7e3      	b.n	800ee7a <_putc_r+0x1a>
 800eeb2:	6823      	ldr	r3, [r4, #0]
 800eeb4:	1c5a      	adds	r2, r3, #1
 800eeb6:	6022      	str	r2, [r4, #0]
 800eeb8:	701d      	strb	r5, [r3, #0]
 800eeba:	b2e8      	uxtb	r0, r5
 800eebc:	bd70      	pop	{r4, r5, r6, pc}
 800eebe:	bf00      	nop
 800eec0:	08010f24 	.word	0x08010f24
 800eec4:	08010f44 	.word	0x08010f44
 800eec8:	08010f04 	.word	0x08010f04

0800eecc <_sbrk_r>:
 800eecc:	b538      	push	{r3, r4, r5, lr}
 800eece:	4c06      	ldr	r4, [pc, #24]	; (800eee8 <_sbrk_r+0x1c>)
 800eed0:	2300      	movs	r3, #0
 800eed2:	4605      	mov	r5, r0
 800eed4:	4608      	mov	r0, r1
 800eed6:	6023      	str	r3, [r4, #0]
 800eed8:	f7fe fe48 	bl	800db6c <_sbrk>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_sbrk_r+0x1a>
 800eee0:	6823      	ldr	r3, [r4, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_sbrk_r+0x1a>
 800eee4:	602b      	str	r3, [r5, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	20006914 	.word	0x20006914

0800eeec <__sread>:
 800eeec:	b510      	push	{r4, lr}
 800eeee:	460c      	mov	r4, r1
 800eef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef4:	f000 f896 	bl	800f024 <_read_r>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	bfab      	itete	ge
 800eefc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eefe:	89a3      	ldrhlt	r3, [r4, #12]
 800ef00:	181b      	addge	r3, r3, r0
 800ef02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef06:	bfac      	ite	ge
 800ef08:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef0a:	81a3      	strhlt	r3, [r4, #12]
 800ef0c:	bd10      	pop	{r4, pc}

0800ef0e <__swrite>:
 800ef0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef12:	461f      	mov	r7, r3
 800ef14:	898b      	ldrh	r3, [r1, #12]
 800ef16:	05db      	lsls	r3, r3, #23
 800ef18:	4605      	mov	r5, r0
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	4616      	mov	r6, r2
 800ef1e:	d505      	bpl.n	800ef2c <__swrite+0x1e>
 800ef20:	2302      	movs	r3, #2
 800ef22:	2200      	movs	r2, #0
 800ef24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef28:	f000 f868 	bl	800effc <_lseek_r>
 800ef2c:	89a3      	ldrh	r3, [r4, #12]
 800ef2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef36:	81a3      	strh	r3, [r4, #12]
 800ef38:	4632      	mov	r2, r6
 800ef3a:	463b      	mov	r3, r7
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef42:	f000 b817 	b.w	800ef74 <_write_r>

0800ef46 <__sseek>:
 800ef46:	b510      	push	{r4, lr}
 800ef48:	460c      	mov	r4, r1
 800ef4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef4e:	f000 f855 	bl	800effc <_lseek_r>
 800ef52:	1c43      	adds	r3, r0, #1
 800ef54:	89a3      	ldrh	r3, [r4, #12]
 800ef56:	bf15      	itete	ne
 800ef58:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef62:	81a3      	strheq	r3, [r4, #12]
 800ef64:	bf18      	it	ne
 800ef66:	81a3      	strhne	r3, [r4, #12]
 800ef68:	bd10      	pop	{r4, pc}

0800ef6a <__sclose>:
 800ef6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef6e:	f000 b813 	b.w	800ef98 <_close_r>
	...

0800ef74 <_write_r>:
 800ef74:	b538      	push	{r3, r4, r5, lr}
 800ef76:	4c07      	ldr	r4, [pc, #28]	; (800ef94 <_write_r+0x20>)
 800ef78:	4605      	mov	r5, r0
 800ef7a:	4608      	mov	r0, r1
 800ef7c:	4611      	mov	r1, r2
 800ef7e:	2200      	movs	r2, #0
 800ef80:	6022      	str	r2, [r4, #0]
 800ef82:	461a      	mov	r2, r3
 800ef84:	f7fe fda1 	bl	800daca <_write>
 800ef88:	1c43      	adds	r3, r0, #1
 800ef8a:	d102      	bne.n	800ef92 <_write_r+0x1e>
 800ef8c:	6823      	ldr	r3, [r4, #0]
 800ef8e:	b103      	cbz	r3, 800ef92 <_write_r+0x1e>
 800ef90:	602b      	str	r3, [r5, #0]
 800ef92:	bd38      	pop	{r3, r4, r5, pc}
 800ef94:	20006914 	.word	0x20006914

0800ef98 <_close_r>:
 800ef98:	b538      	push	{r3, r4, r5, lr}
 800ef9a:	4c06      	ldr	r4, [pc, #24]	; (800efb4 <_close_r+0x1c>)
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	4605      	mov	r5, r0
 800efa0:	4608      	mov	r0, r1
 800efa2:	6023      	str	r3, [r4, #0]
 800efa4:	f7fe fdad 	bl	800db02 <_close>
 800efa8:	1c43      	adds	r3, r0, #1
 800efaa:	d102      	bne.n	800efb2 <_close_r+0x1a>
 800efac:	6823      	ldr	r3, [r4, #0]
 800efae:	b103      	cbz	r3, 800efb2 <_close_r+0x1a>
 800efb0:	602b      	str	r3, [r5, #0]
 800efb2:	bd38      	pop	{r3, r4, r5, pc}
 800efb4:	20006914 	.word	0x20006914

0800efb8 <_fstat_r>:
 800efb8:	b538      	push	{r3, r4, r5, lr}
 800efba:	4c07      	ldr	r4, [pc, #28]	; (800efd8 <_fstat_r+0x20>)
 800efbc:	2300      	movs	r3, #0
 800efbe:	4605      	mov	r5, r0
 800efc0:	4608      	mov	r0, r1
 800efc2:	4611      	mov	r1, r2
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	f7fe fda8 	bl	800db1a <_fstat>
 800efca:	1c43      	adds	r3, r0, #1
 800efcc:	d102      	bne.n	800efd4 <_fstat_r+0x1c>
 800efce:	6823      	ldr	r3, [r4, #0]
 800efd0:	b103      	cbz	r3, 800efd4 <_fstat_r+0x1c>
 800efd2:	602b      	str	r3, [r5, #0]
 800efd4:	bd38      	pop	{r3, r4, r5, pc}
 800efd6:	bf00      	nop
 800efd8:	20006914 	.word	0x20006914

0800efdc <_isatty_r>:
 800efdc:	b538      	push	{r3, r4, r5, lr}
 800efde:	4c06      	ldr	r4, [pc, #24]	; (800eff8 <_isatty_r+0x1c>)
 800efe0:	2300      	movs	r3, #0
 800efe2:	4605      	mov	r5, r0
 800efe4:	4608      	mov	r0, r1
 800efe6:	6023      	str	r3, [r4, #0]
 800efe8:	f7fe fda7 	bl	800db3a <_isatty>
 800efec:	1c43      	adds	r3, r0, #1
 800efee:	d102      	bne.n	800eff6 <_isatty_r+0x1a>
 800eff0:	6823      	ldr	r3, [r4, #0]
 800eff2:	b103      	cbz	r3, 800eff6 <_isatty_r+0x1a>
 800eff4:	602b      	str	r3, [r5, #0]
 800eff6:	bd38      	pop	{r3, r4, r5, pc}
 800eff8:	20006914 	.word	0x20006914

0800effc <_lseek_r>:
 800effc:	b538      	push	{r3, r4, r5, lr}
 800effe:	4c07      	ldr	r4, [pc, #28]	; (800f01c <_lseek_r+0x20>)
 800f000:	4605      	mov	r5, r0
 800f002:	4608      	mov	r0, r1
 800f004:	4611      	mov	r1, r2
 800f006:	2200      	movs	r2, #0
 800f008:	6022      	str	r2, [r4, #0]
 800f00a:	461a      	mov	r2, r3
 800f00c:	f7fe fda0 	bl	800db50 <_lseek>
 800f010:	1c43      	adds	r3, r0, #1
 800f012:	d102      	bne.n	800f01a <_lseek_r+0x1e>
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	b103      	cbz	r3, 800f01a <_lseek_r+0x1e>
 800f018:	602b      	str	r3, [r5, #0]
 800f01a:	bd38      	pop	{r3, r4, r5, pc}
 800f01c:	20006914 	.word	0x20006914

0800f020 <__malloc_lock>:
 800f020:	4770      	bx	lr

0800f022 <__malloc_unlock>:
 800f022:	4770      	bx	lr

0800f024 <_read_r>:
 800f024:	b538      	push	{r3, r4, r5, lr}
 800f026:	4c07      	ldr	r4, [pc, #28]	; (800f044 <_read_r+0x20>)
 800f028:	4605      	mov	r5, r0
 800f02a:	4608      	mov	r0, r1
 800f02c:	4611      	mov	r1, r2
 800f02e:	2200      	movs	r2, #0
 800f030:	6022      	str	r2, [r4, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	f7fe fd2c 	bl	800da90 <_read>
 800f038:	1c43      	adds	r3, r0, #1
 800f03a:	d102      	bne.n	800f042 <_read_r+0x1e>
 800f03c:	6823      	ldr	r3, [r4, #0]
 800f03e:	b103      	cbz	r3, 800f042 <_read_r+0x1e>
 800f040:	602b      	str	r3, [r5, #0]
 800f042:	bd38      	pop	{r3, r4, r5, pc}
 800f044:	20006914 	.word	0x20006914

0800f048 <_init>:
 800f048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04a:	bf00      	nop
 800f04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f04e:	bc08      	pop	{r3}
 800f050:	469e      	mov	lr, r3
 800f052:	4770      	bx	lr

0800f054 <_fini>:
 800f054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f056:	bf00      	nop
 800f058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f05a:	bc08      	pop	{r3}
 800f05c:	469e      	mov	lr, r3
 800f05e:	4770      	bx	lr
